// @generated by Peggy 4.2.0.
// @ts-nocheck
//
// https://peggyjs.org/
// Helper functions available in actions
function createBinaryOp(left, operator, right) {
    return {
        type: 'binary_operator',
        operator: operator.toLowerCase ? operator.toLowerCase() : operator,
        left,
        right
    };
}
function createUnaryOp(operator, operand) {
    return {
        type: 'unary_operator',
        operator: operator.toLowerCase ? operator.toLowerCase() : operator,
        operand
    };
}
function createFunctionCall(name, args) {
    return {
        type: 'function_call',
        name: name.toLowerCase(),
        args: args || []
    };
}
function createFieldReference(name) {
    return {
        type: 'field_reference',
        fieldName: name
    };
}
function createLiteral(value, dataType) {
    return {
        type: 'literal',
        value,
        dataType
    };
}
function createConditional(condition, trueValue, falseValue) {
    return {
        type: 'conditional',
        condition,
        trueValue,
        falseValue
    };
}
function peg$subclass(child, parent) {
    function C() { this.constructor = child; }
    C.prototype = parent.prototype;
    child.prototype = new C();
}
function peg$SyntaxError(message, expected, found, location) {
    var self = Error.call(this, message);
    // istanbul ignore next Check is a necessary evil to support older environments
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(self, peg$SyntaxError.prototype);
    }
    self.expected = expected;
    self.found = found;
    self.location = location;
    self.name = "SyntaxError";
    return self;
}
peg$subclass(peg$SyntaxError, Error);
function peg$padEnd(str, targetLength, padString) {
    padString = padString || " ";
    if (str.length > targetLength) {
        return str;
    }
    targetLength -= str.length;
    padString += padString.repeat(targetLength);
    return str + padString.slice(0, targetLength);
}
peg$SyntaxError.prototype.format = function (sources) {
    var str = "Error: " + this.message;
    if (this.location) {
        var src = null;
        var k;
        for (k = 0; k < sources.length; k++) {
            if (sources[k].source === this.location.source) {
                src = sources[k].text.split(/\r\n|\n|\r/g);
                break;
            }
        }
        var s = this.location.start;
        var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
            ? this.location.source.offset(s)
            : s;
        var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
        if (src) {
            var e = this.location.end;
            var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
            var line = src[s.line - 1];
            var last = s.line === e.line ? e.column : line.length + 1;
            var hatLen = (last - s.column) || 1;
            str += "\n --> " + loc + "\n"
                + filler + " |\n"
                + offset_s.line + " | " + line + "\n"
                + filler + " | " + peg$padEnd("", s.column - 1, ' ')
                + peg$padEnd("", hatLen, "^");
        }
        else {
            str += "\n at " + loc;
        }
    }
    return str;
};
peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
        literal: function (expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
        },
        class: function (expectation) {
            var escapedParts = expectation.parts.map(function (part) {
                return Array.isArray(part)
                    ? classEscape(part[0]) + "-" + classEscape(part[1])
                    : classEscape(part);
            });
            return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
        },
        any: function () {
            return "any character";
        },
        end: function () {
            return "end of input";
        },
        other: function (expectation) {
            return expectation.description;
        }
    };
    function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
    }
    function literalEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/"/g, "\\\"")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function classEscape(s) {
        return s
            .replace(/\\/g, "\\\\")
            .replace(/\]/g, "\\]")
            .replace(/\^/g, "\\^")
            .replace(/-/g, "\\-")
            .replace(/\0/g, "\\0")
            .replace(/\t/g, "\\t")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
            .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
    }
    function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }
    function describeExpected(expected) {
        var descriptions = expected.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
            for (i = 1, j = 1; i < descriptions.length; i++) {
                if (descriptions[i - 1] !== descriptions[i]) {
                    descriptions[j] = descriptions[i];
                    j++;
                }
            }
            descriptions.length = j;
        }
        switch (descriptions.length) {
            case 1:
                return descriptions[0];
            case 2:
                return descriptions[0] + " or " + descriptions[1];
            default:
                return descriptions.slice(0, -1).join(", ")
                    + ", or "
                    + descriptions[descriptions.length - 1];
        }
    }
    function describeFound(found) {
        return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$source = options.grammarSource;
    var peg$startRuleFunctions = { Expression: peg$parseExpression };
    var peg$startRuleFunction = peg$parseExpression;
    var peg$c0 = "&";
    var peg$c1 = "^";
    var peg$c2 = "-";
    var peg$c3 = "(";
    var peg$c4 = ")";
    var peg$c5 = "if";
    var peg$c6 = "IF";
    var peg$c7 = ",";
    var peg$c8 = "${";
    var peg$c9 = "}";
    var peg$c10 = "[";
    var peg$c11 = "]";
    var peg$c12 = ".";
    var peg$c13 = "\"";
    var peg$c14 = "'";
    var peg$c15 = "\\\"";
    var peg$c16 = "\\\\";
    var peg$c17 = "\\'";
    var peg$c18 = "true";
    var peg$c19 = "TRUE";
    var peg$c20 = "false";
    var peg$c21 = "FALSE";
    var peg$c22 = "null";
    var peg$c23 = "NULL";
    var peg$c24 = "<=";
    var peg$c25 = ">=";
    var peg$c26 = "!=";
    var peg$c27 = "<>";
    var peg$c28 = "and";
    var peg$c29 = "AND";
    var peg$c30 = "or";
    var peg$c31 = "OR";
    var peg$c32 = "not";
    var peg$c33 = "NOT";
    var peg$r0 = /^[+\-]/;
    var peg$r1 = /^[%*\/]/;
    var peg$r2 = /^[a-zA-Z_]/;
    var peg$r3 = /^[a-zA-Z0-9_.]/;
    var peg$r4 = /^[^[\]]/;
    var peg$r5 = /^[a-zA-Z0-9_]/;
    var peg$r6 = /^[0-9]/;
    var peg$r7 = /^[^"]/;
    var peg$r8 = /^[^']/;
    var peg$r9 = /^[<->]/;
    var peg$r10 = /^[ \t\n\r]/;
    var peg$e0 = peg$literalExpectation("&", false);
    var peg$e1 = peg$classExpectation(["+", "-"], false, false);
    var peg$e2 = peg$classExpectation(["%", "*", "/"], false, false);
    var peg$e3 = peg$literalExpectation("^", false);
    var peg$e4 = peg$literalExpectation("-", false);
    var peg$e5 = peg$literalExpectation("(", false);
    var peg$e6 = peg$literalExpectation(")", false);
    var peg$e7 = peg$literalExpectation("if", true);
    var peg$e8 = peg$literalExpectation("IF", false);
    var peg$e9 = peg$literalExpectation(",", false);
    var peg$e10 = peg$literalExpectation("${", false);
    var peg$e11 = peg$literalExpectation("}", false);
    var peg$e12 = peg$literalExpectation("[", false);
    var peg$e13 = peg$literalExpectation("]", false);
    var peg$e14 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
    var peg$e15 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_", "."], false, false);
    var peg$e16 = peg$classExpectation(["[", "]"], true, false);
    var peg$e17 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
    var peg$e18 = peg$classExpectation([["0", "9"]], false, false);
    var peg$e19 = peg$literalExpectation(".", false);
    var peg$e20 = peg$literalExpectation("\"", false);
    var peg$e21 = peg$literalExpectation("'", false);
    var peg$e22 = peg$literalExpectation("\\\"", false);
    var peg$e23 = peg$literalExpectation("\\\\", false);
    var peg$e24 = peg$classExpectation(["\""], true, false);
    var peg$e25 = peg$literalExpectation("\\'", false);
    var peg$e26 = peg$classExpectation(["'"], true, false);
    var peg$e27 = peg$literalExpectation("true", true);
    var peg$e28 = peg$literalExpectation("TRUE", false);
    var peg$e29 = peg$literalExpectation("false", true);
    var peg$e30 = peg$literalExpectation("FALSE", false);
    var peg$e31 = peg$literalExpectation("null", true);
    var peg$e32 = peg$literalExpectation("NULL", false);
    var peg$e33 = peg$literalExpectation("<=", false);
    var peg$e34 = peg$literalExpectation(">=", false);
    var peg$e35 = peg$literalExpectation("!=", false);
    var peg$e36 = peg$literalExpectation("<>", false);
    var peg$e37 = peg$classExpectation([["<", ">"]], false, false);
    var peg$e38 = peg$literalExpectation("and", true);
    var peg$e39 = peg$literalExpectation("AND", false);
    var peg$e40 = peg$literalExpectation("or", true);
    var peg$e41 = peg$literalExpectation("OR", false);
    var peg$e42 = peg$literalExpectation("not", true);
    var peg$e43 = peg$literalExpectation("NOT", false);
    var peg$e44 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
    var peg$f0 = function (expr) { return expr; };
    var peg$f1 = function (left, rest) {
        return rest.reduce((acc, [, op, , right]) => createBinaryOp(acc, op, right), left);
    };
    var peg$f2 = function (left, rest) {
        return rest.reduce((acc, [, op, , right]) => createBinaryOp(acc, op, right), left);
    };
    var peg$f3 = function (left, rest) {
        if (rest) {
            return createBinaryOp(left, rest[1], rest[3]);
        }
        return left;
    };
    var peg$f4 = function (left, rest) {
        return rest.reduce((acc, [, op, , right]) => createBinaryOp(acc, op, right), left);
    };
    var peg$f5 = function (left, rest) {
        return rest.reduce((acc, [, op, , right]) => createBinaryOp(acc, op, right), left);
    };
    var peg$f6 = function (left, rest) {
        return rest.reduce((acc, [, op, , right]) => createBinaryOp(acc, op, right), left);
    };
    var peg$f7 = function (left, rest) {
        if (rest) {
            return createBinaryOp(left, rest[1], rest[3]);
        }
        return left;
    };
    var peg$f8 = function (expr) { return createUnaryOp('not', expr); };
    var peg$f9 = function (expr) { return createUnaryOp('-', expr); };
    var peg$f10 = function (expr) { return expr; };
    var peg$f11 = function (name, args) {
        return createFunctionCall(name, args);
    };
    var peg$f12 = function (condition, trueValue, falseValue) {
        return createConditional(condition, trueValue, falseValue);
    };
    var peg$f13 = function (first, rest) {
        return [first, ...rest.map(r => r[3])];
    };
    var peg$f14 = function (name) { return createFieldReference(name); };
    var peg$f15 = function (name) { return createFieldReference(name); };
    var peg$f16 = function (chars) { return text(); };
    var peg$f17 = function (chars) { return text().trim(); };
    var peg$f18 = function (name) { return text(); };
    var peg$f19 = function (value) { return createLiteral(value, 'number'); };
    var peg$f20 = function (digits) { return parseFloat(text()); };
    var peg$f21 = function (chars) { return createLiteral(chars.join(''), 'string'); };
    var peg$f22 = function (chars) { return createLiteral(chars.join(''), 'string'); };
    var peg$f23 = function () { return '"'; };
    var peg$f24 = function () { return '\\'; };
    var peg$f25 = function () { return "'"; };
    var peg$f26 = function () { return '\\'; };
    var peg$f27 = function () { return createLiteral(true, 'boolean'); };
    var peg$f28 = function () { return createLiteral(false, 'boolean'); };
    var peg$f29 = function () { return createLiteral(null, 'null'); };
    var peg$f30 = function () { return 'and'; };
    var peg$f31 = function () { return 'or'; };
    var peg$f32 = function () { return 'not'; };
    var peg$currPos = options.peg$currPos | 0;
    var peg$savedPos = peg$currPos;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = peg$currPos;
    var peg$maxFailExpected = options.peg$maxFailExpected || [];
    var peg$silentFails = options.peg$silentFails | 0;
    var peg$result;
    if (options.startRule) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function offset() {
        return peg$savedPos;
    }
    function range() {
        return {
            source: peg$source,
            start: peg$savedPos,
            end: peg$currPos
        };
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
    }
    function error(message, location) {
        location = location !== undefined
            ? location
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location);
    }
    function peg$literalExpectation(text, ignoreCase) {
        return { type: "literal", text: text, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            if (pos >= peg$posDetailsCache.length) {
                p = peg$posDetailsCache.length - 1;
            }
            else {
                p = pos;
                while (!peg$posDetailsCache[--p]) { }
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos, offset) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        var res = {
            source: peg$source,
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
        if (offset && peg$source && (typeof peg$source.offset === "function")) {
            res.start = peg$source.offset(res.start);
            res.end = peg$source.offset(res.end);
        }
        return res;
    }
    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected);
    }
    function peg$buildSimpleError(message, location) {
        return new peg$SyntaxError(message, null, null, location);
    }
    function peg$buildStructuredError(expected, found, location) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
    }
    function peg$parseExpression() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parse_();
        s2 = peg$parseLogicalOrExpression();
        if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f0(s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseLogicalOrExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseLogicalAndExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            s5 = peg$parseOrOperator();
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseLogicalAndExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                s5 = peg$parseOrOperator();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseLogicalAndExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f1(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseLogicalAndExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseComparisonExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            s5 = peg$parseAndOperator();
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseComparisonExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                s5 = peg$parseAndOperator();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseComparisonExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f2(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseComparisonExpression() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseConcatenationExpression();
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parse_();
            s4 = peg$parseComparisonOperator();
            if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                s6 = peg$parseConcatenationExpression();
                if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f3(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseConcatenationExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseAdditiveExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 38) {
                s5 = peg$c0;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e0);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseAdditiveExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 38) {
                    s5 = peg$c0;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e0);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseAdditiveExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f4(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseAdditiveExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseMultiplicativeExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            s5 = input.charAt(peg$currPos);
            if (peg$r0.test(s5)) {
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e1);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseMultiplicativeExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                s5 = input.charAt(peg$currPos);
                if (peg$r0.test(s5)) {
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e1);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseMultiplicativeExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f5(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseMultiplicativeExpression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parsePowerExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            s5 = input.charAt(peg$currPos);
            if (peg$r1.test(s5)) {
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e2);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parsePowerExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                s5 = input.charAt(peg$currPos);
                if (peg$r1.test(s5)) {
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e2);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parsePowerExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f6(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parsePowerExpression() {
        var s0, s1, s2, s3, s4, s5, s6;
        s0 = peg$currPos;
        s1 = peg$parseUnaryExpression();
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 94) {
                s4 = peg$c1;
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e3);
                }
            }
            if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                s6 = peg$parseUnaryExpression();
                if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f7(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseUnaryExpression() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = peg$parseNotOperator();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s3 = peg$parseUnaryExpression();
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f8(s3);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s1 = peg$c2;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e4);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseUnaryExpression();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f9(s3);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parsePrimaryExpression();
            }
        }
        return s0;
    }
    function peg$parsePrimaryExpression() {
        var s0, s1, s2, s3, s4, s5;
        s0 = peg$parseFunctionCall();
        if (s0 === peg$FAILED) {
            s0 = peg$parseFieldReference();
            if (s0 === peg$FAILED) {
                s0 = peg$parseLiteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                        s1 = peg$c3;
                        peg$currPos++;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e5);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        s3 = peg$parseExpression();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 41) {
                                s5 = peg$c4;
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e6);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f10(s3);
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseFunctionCall() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$parseIfFunction();
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseFunctionName();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 40) {
                    s3 = peg$c3;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e5);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parseArgumentList();
                    if (s5 === peg$FAILED) {
                        s5 = null;
                    }
                    s6 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s7 = peg$c4;
                        peg$currPos++;
                    }
                    else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e6);
                        }
                    }
                    if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f11(s1, s5);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseIfFunction() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 2);
        if (s1.toLowerCase() === peg$c5) {
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e7);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c6) {
                s1 = peg$c6;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e8);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 40) {
                s3 = peg$c3;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e5);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                s5 = peg$parseExpression();
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s7 = peg$c7;
                        peg$currPos++;
                    }
                    else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e9);
                        }
                    }
                    if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        s9 = peg$parseExpression();
                        if (s9 !== peg$FAILED) {
                            s10 = peg$parse_();
                            if (input.charCodeAt(peg$currPos) === 44) {
                                s11 = peg$c7;
                                peg$currPos++;
                            }
                            else {
                                s11 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$e9);
                                }
                            }
                            if (s11 !== peg$FAILED) {
                                s12 = peg$parse_();
                                s13 = peg$parseExpression();
                                if (s13 !== peg$FAILED) {
                                    s14 = peg$parse_();
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                        s15 = peg$c4;
                                        peg$currPos++;
                                    }
                                    else {
                                        s15 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$e6);
                                        }
                                    }
                                    if (s15 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f12(s5, s9, s13);
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseArgumentList() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$parseExpression();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
                s5 = peg$c7;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e9);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseExpression();
                if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 44) {
                    s5 = peg$c7;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e9);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseExpression();
                    if (s7 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            peg$savedPos = s0;
            s0 = peg$f13(s1, s2);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseFieldReference() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c8) {
            s1 = peg$c8;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e10);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseFieldName();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                    s3 = peg$c9;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e11);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f14(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c10;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e12);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseFieldNameWithSpaces();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s3 = peg$c11;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e13);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f15(s2);
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseFieldName() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = input.charAt(peg$currPos);
        if (peg$r2.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e14);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = input.charAt(peg$currPos);
            if (peg$r3.test(s3)) {
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e15);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = input.charAt(peg$currPos);
                if (peg$r3.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e15);
                    }
                }
            }
            peg$savedPos = s0;
            s0 = peg$f16(s1);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseFieldNameWithSpaces() {
        var s0, s1, s2;
        s0 = peg$currPos;
        s1 = [];
        s2 = input.charAt(peg$currPos);
        if (peg$r4.test(s2)) {
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e16);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = input.charAt(peg$currPos);
                if (peg$r4.test(s2)) {
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e16);
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f17(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseFunctionName() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        s1 = input.charAt(peg$currPos);
        if (peg$r2.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e14);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = input.charAt(peg$currPos);
            if (peg$r5.test(s3)) {
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e17);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = input.charAt(peg$currPos);
                if (peg$r5.test(s3)) {
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e17);
                    }
                }
            }
            peg$savedPos = s0;
            s0 = peg$f18(s1);
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        return s0;
    }
    function peg$parseLiteral() {
        var s0;
        s0 = peg$parseNumberLiteral();
        if (s0 === peg$FAILED) {
            s0 = peg$parseStringLiteral();
            if (s0 === peg$FAILED) {
                s0 = peg$parseBooleanLiteral();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseNullLiteral();
                }
            }
        }
        return s0;
    }
    function peg$parseNumberLiteral() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = peg$parseNumber();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f19(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseNumber() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c2;
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e4);
            }
        }
        if (s2 === peg$FAILED) {
            s2 = null;
        }
        s3 = [];
        s4 = input.charAt(peg$currPos);
        if (peg$r6.test(s4)) {
            peg$currPos++;
        }
        else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e18);
            }
        }
        if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
                s3.push(s4);
                s4 = input.charAt(peg$currPos);
                if (peg$r6.test(s4)) {
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e18);
                    }
                }
            }
        }
        else {
            s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c12;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e19);
                }
            }
            if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = input.charAt(peg$currPos);
                if (peg$r6.test(s7)) {
                    peg$currPos++;
                }
                else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e18);
                    }
                }
                if (s7 !== peg$FAILED) {
                    while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        s7 = input.charAt(peg$currPos);
                        if (peg$r6.test(s7)) {
                            peg$currPos++;
                        }
                        else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e18);
                            }
                        }
                    }
                }
                else {
                    s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
                s4 = null;
            }
            s2 = [s2, s3, s4];
            s1 = s2;
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f20(s1);
        }
        s0 = s1;
        return s0;
    }
    function peg$parseStringLiteral() {
        var s0, s1, s2, s3;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c13;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e20);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parseDoubleStringCharacter();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parseDoubleStringCharacter();
            }
            if (input.charCodeAt(peg$currPos) === 34) {
                s3 = peg$c13;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e20);
                }
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f21(s2);
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 39) {
                s1 = peg$c14;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e21);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseSingleStringCharacter();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseSingleStringCharacter();
                }
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c14;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e21);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f22(s2);
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        return s0;
    }
    function peg$parseDoubleStringCharacter() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c15) {
            s1 = peg$c15;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e22);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f23();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c16) {
                s1 = peg$c16;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f24();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = input.charAt(peg$currPos);
                if (peg$r7.test(s0)) {
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e24);
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseSingleStringCharacter() {
        var s0, s1;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c17) {
            s1 = peg$c17;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e25);
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f25();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c16) {
                s1 = peg$c16;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e23);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f26();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = input.charAt(peg$currPos);
                if (peg$r8.test(s0)) {
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e26);
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseBooleanLiteral() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c18) {
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e27);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c19) {
                s1 = peg$c19;
                peg$currPos += 4;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e28);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f27();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = input.substr(peg$currPos, 5);
            if (s1.toLowerCase() === peg$c20) {
                peg$currPos += 5;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e29);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c21) {
                    s1 = peg$c21;
                    peg$currPos += 5;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e30);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f28();
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parseNullLiteral() {
        var s0, s1;
        s0 = peg$currPos;
        s1 = input.substr(peg$currPos, 4);
        if (s1.toLowerCase() === peg$c22) {
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e31);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c23) {
                s1 = peg$c23;
                peg$currPos += 4;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e32);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f29();
        }
        s0 = s1;
        return s0;
    }
    function peg$parseComparisonOperator() {
        var s0;
        if (input.substr(peg$currPos, 2) === peg$c24) {
            s0 = peg$c24;
            peg$currPos += 2;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e33);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c25) {
                s0 = peg$c25;
                peg$currPos += 2;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e34);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c26) {
                    s0 = peg$c26;
                    peg$currPos += 2;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$e35);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c27) {
                        s0 = peg$c27;
                        peg$currPos += 2;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$e36);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        s0 = input.charAt(peg$currPos);
                        if (peg$r9.test(s0)) {
                            peg$currPos++;
                        }
                        else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$e37);
                            }
                        }
                    }
                }
            }
        }
        return s0;
    }
    function peg$parseAndOperator() {
        var s0, s1;
        s0 = input.substr(peg$currPos, 3);
        if (s0.toLowerCase() === peg$c28) {
            peg$currPos += 3;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e38);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c29) {
                s1 = peg$c29;
                peg$currPos += 3;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e39);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f30();
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parseOrOperator() {
        var s0, s1;
        s0 = input.substr(peg$currPos, 2);
        if (s0.toLowerCase() === peg$c30) {
            peg$currPos += 2;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e40);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c31) {
                s1 = peg$c31;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e41);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f31();
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parseNotOperator() {
        var s0, s1;
        s0 = input.substr(peg$currPos, 3);
        if (s0.toLowerCase() === peg$c32) {
            peg$currPos += 3;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e42);
            }
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c33) {
                s1 = peg$c33;
                peg$currPos += 3;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e43);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f32();
            }
            s0 = s1;
        }
        return s0;
    }
    function peg$parse_() {
        var s0, s1;
        s0 = [];
        s1 = input.charAt(peg$currPos);
        if (peg$r10.test(s1)) {
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$e44);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = input.charAt(peg$currPos);
            if (peg$r10.test(s1)) {
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$e44);
                }
            }
        }
        return s0;
    }
    peg$result = peg$startRuleFunction();
    if (options.peg$library) {
        return /** @type {any} */ ({
            peg$result,
            peg$currPos,
            peg$FAILED,
            peg$maxFailExpected,
            peg$maxFailPos
        });
    }
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
const peg$allowedStartRules = [
    "Expression"
];
export { peg$allowedStartRules as StartRules, peg$SyntaxError as SyntaxError, peg$parse as parse };
//# sourceMappingURL=generated.js.map