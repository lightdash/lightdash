{
    "components": {
        "examples": {},
        "headers": {},
        "parameters": {},
        "requestBodies": {},
        "responses": {},
        "schemas": {
            "ApiErrorPayload": {
                "properties": {
                    "error": {
                        "properties": {
                            "data": {
                                "description": "Optional data containing details of the error"
                            },
                            "message": {
                                "type": "string",
                                "description": "A friendly message summarising the error"
                            },
                            "name": {
                                "type": "string",
                                "description": "Unique name for the type of error"
                            },
                            "statusCode": {
                                "type": "number",
                                "format": "integer",
                                "description": "HTTP status code"
                            }
                        },
                        "required": ["name", "statusCode"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["error"],
                        "nullable": false
                    }
                },
                "required": ["error", "status"],
                "type": "object",
                "description": "The Error object is returned from the api any time there is an error.\nThe message contains"
            },
            "FieldType": {
                "enum": ["metric", "dimension"],
                "type": "string"
            },
            "Pick_Field.name-or-label-or-fieldType-or-tableLabel-or-description_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "fieldType": {
                        "$ref": "#/components/schemas/FieldType"
                    },
                    "tableLabel": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": ["name", "label", "fieldType", "tableLabel"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Record_string.string-or-string-Array_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Pick_Dimension.requiredAttributes_": {
                "properties": {
                    "requiredAttributes": {
                        "$ref": "#/components/schemas/Record_string.string-or-string-Array_"
                    }
                },
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CatalogType.Field": {
                "enum": ["field"],
                "type": "string"
            },
            "Pick_Tag.name-or-color-or-tagUuid_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    },
                    "tagUuid": {
                        "type": "string"
                    }
                },
                "required": ["name", "color", "tagUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "EmojiIcon": {
                "properties": {
                    "unicode": {
                        "type": "string"
                    }
                },
                "required": ["unicode"],
                "type": "object"
            },
            "CustomIcon": {
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": ["url"],
                "type": "object"
            },
            "CatalogItemIcon": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/EmojiIcon"
                    },
                    {
                        "$ref": "#/components/schemas/CustomIcon"
                    }
                ]
            },
            "CatalogField": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Field.name-or-label-or-fieldType-or-tableLabel-or-description_"
                    },
                    {
                        "$ref": "#/components/schemas/Pick_Dimension.requiredAttributes_"
                    },
                    {
                        "properties": {
                            "icon": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CatalogItemIcon"
                                    }
                                ],
                                "nullable": true
                            },
                            "chartUsage": {
                                "type": "number",
                                "format": "double"
                            },
                            "categories": {
                                "items": {
                                    "$ref": "#/components/schemas/Pick_Tag.name-or-color-or-tagUuid_"
                                },
                                "type": "array"
                            },
                            "tags": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "tableGroupLabel": {
                                "type": "string"
                            },
                            "tableName": {
                                "type": "string"
                            },
                            "basicType": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/components/schemas/CatalogType.Field"
                            },
                            "catalogSearchUuid": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "icon",
                            "categories",
                            "tableName",
                            "type",
                            "catalogSearchUuid"
                        ],
                        "type": "object"
                    }
                ]
            },
            "Pick_TableBase.name-or-label-or-groupLabel-or-description-or-requiredAttributes_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "requiredAttributes": {
                        "$ref": "#/components/schemas/Record_string.string-or-string-Array_"
                    },
                    "groupLabel": {
                        "type": "string"
                    }
                },
                "required": ["name", "label"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "InlineErrorType": {
                "enum": ["METADATA_PARSE_ERROR", "NO_DIMENSIONS_FOUND"],
                "type": "string"
            },
            "InlineError": {
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/InlineErrorType"
                    }
                },
                "required": ["message", "type"],
                "type": "object"
            },
            "CatalogType.Table": {
                "enum": ["table"],
                "type": "string"
            },
            "DbtModelJoinType": {
                "type": "string",
                "enum": ["inner", "full", "left", "right"]
            },
            "Pick_ExploreJoin.table-or-sqlOn-or-type-or-hidden-or-always_": {
                "properties": {
                    "table": {
                        "type": "string"
                    },
                    "sqlOn": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DbtModelJoinType"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "always": {
                        "type": "boolean"
                    }
                },
                "required": ["table", "sqlOn"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CompiledExploreJoin": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_ExploreJoin.table-or-sqlOn-or-type-or-hidden-or-always_"
                    },
                    {
                        "properties": {
                            "compiledSqlOn": {
                                "type": "string"
                            }
                        },
                        "required": ["compiledSqlOn"],
                        "type": "object"
                    }
                ]
            },
            "CatalogTable": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_TableBase.name-or-label-or-groupLabel-or-description-or-requiredAttributes_"
                    },
                    {
                        "properties": {
                            "icon": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/CatalogItemIcon"
                                    }
                                ],
                                "nullable": true
                            },
                            "chartUsage": {
                                "type": "number",
                                "format": "double"
                            },
                            "joinedTables": {
                                "items": {
                                    "$ref": "#/components/schemas/CompiledExploreJoin"
                                },
                                "type": "array"
                            },
                            "categories": {
                                "items": {
                                    "$ref": "#/components/schemas/Pick_Tag.name-or-color-or-tagUuid_"
                                },
                                "type": "array"
                            },
                            "tags": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "groupLabel": {
                                "type": "string"
                            },
                            "type": {
                                "$ref": "#/components/schemas/CatalogType.Table"
                            },
                            "errors": {
                                "items": {
                                    "$ref": "#/components/schemas/InlineError"
                                },
                                "type": "array"
                            },
                            "catalogSearchUuid": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "icon",
                            "categories",
                            "type",
                            "catalogSearchUuid"
                        ],
                        "type": "object"
                    }
                ]
            },
            "CatalogItem": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/CatalogField"
                    },
                    {
                        "$ref": "#/components/schemas/CatalogTable"
                    }
                ]
            },
            "ApiCatalogResults": {
                "items": {
                    "$ref": "#/components/schemas/CatalogItem"
                },
                "type": "array"
            },
            "CatalogType": {
                "enum": ["table", "field"],
                "type": "string"
            },
            "CatalogFilter": {
                "enum": ["tables", "dimensions", "metrics"],
                "type": "string"
            },
            "CatalogMetadata": {
                "properties": {
                    "fieldType": {
                        "$ref": "#/components/schemas/FieldType"
                    },
                    "tableLabel": {
                        "type": "string"
                    },
                    "joinedTables": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "fields": {
                        "items": {
                            "$ref": "#/components/schemas/CatalogField"
                        },
                        "type": "array"
                    },
                    "source": {
                        "type": "string"
                    },
                    "modelName": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "joinedTables",
                    "fields",
                    "modelName",
                    "label",
                    "name"
                ],
                "type": "object"
            },
            "ApiCatalogMetadataResults": {
                "$ref": "#/components/schemas/CatalogMetadata"
            },
            "ChartKind": {
                "enum": [
                    "line",
                    "horizontal_bar",
                    "vertical_bar",
                    "scatter",
                    "area",
                    "mixed",
                    "pie",
                    "table",
                    "big_number",
                    "funnel",
                    "custom"
                ],
                "type": "string"
            },
            "Pick_ChartSummary.uuid-or-name-or-spaceUuid-or-spaceName-or-dashboardName-or-dashboardUuid-or-chartKind_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceName": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "dashboardName": {
                        "type": "string",
                        "nullable": true
                    },
                    "chartKind": {
                        "$ref": "#/components/schemas/ChartKind"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceName",
                    "spaceUuid",
                    "dashboardUuid",
                    "dashboardName"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CatalogAnalytics": {
                "properties": {
                    "charts": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_ChartSummary.uuid-or-name-or-spaceUuid-or-spaceName-or-dashboardName-or-dashboardUuid-or-chartKind_"
                        },
                        "type": "array"
                    }
                },
                "required": ["charts"],
                "type": "object"
            },
            "ApiCatalogAnalyticsResults": {
                "$ref": "#/components/schemas/CatalogAnalytics"
            },
            "ApiMetricsCatalogResults": {
                "items": {
                    "$ref": "#/components/schemas/CatalogField"
                },
                "type": "array"
            },
            "KnexPaginateArgs": {
                "properties": {
                    "page": {
                        "type": "number",
                        "format": "double"
                    },
                    "pageSize": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["page", "pageSize"],
                "type": "object"
            },
            "KnexPaginatedData_ApiMetricsCatalogResults_": {
                "properties": {
                    "pagination": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/KnexPaginateArgs"
                            },
                            {
                                "properties": {
                                    "totalResults": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "totalPageCount": {
                                        "type": "number",
                                        "format": "double"
                                    }
                                },
                                "required": ["totalResults", "totalPageCount"],
                                "type": "object"
                            }
                        ]
                    },
                    "data": {
                        "$ref": "#/components/schemas/ApiMetricsCatalogResults"
                    }
                },
                "required": ["data"],
                "type": "object"
            },
            "ApiMetricsCatalog": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/KnexPaginatedData_ApiMetricsCatalogResults_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiSortDirection": {
                "type": "string",
                "enum": ["asc", "desc"]
            },
            "Record_string.Record_string.string-or-string-Array__": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "FieldType.METRIC": {
                "enum": ["metric"],
                "type": "string"
            },
            "MetricType": {
                "enum": [
                    "percentile",
                    "average",
                    "count",
                    "count_distinct",
                    "sum",
                    "min",
                    "max",
                    "number",
                    "median",
                    "string",
                    "date",
                    "timestamp",
                    "boolean"
                ],
                "type": "string"
            },
            "ConditionalOperator": {
                "enum": [
                    "isNull",
                    "notNull",
                    "equals",
                    "notEquals",
                    "startsWith",
                    "endsWith",
                    "include",
                    "doesNotInclude",
                    "lessThan",
                    "lessThanOrEqual",
                    "greaterThan",
                    "greaterThanOrEqual",
                    "inThePast",
                    "notInThePast",
                    "inTheNext",
                    "inTheCurrent",
                    "notInTheCurrent",
                    "inBetween"
                ],
                "type": "string"
            },
            "MetricFilterRule": {
                "properties": {
                    "values": {
                        "items": {},
                        "type": "array"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/ConditionalOperator"
                    },
                    "id": {
                        "type": "string"
                    },
                    "target": {
                        "properties": {
                            "fieldRef": {
                                "type": "string"
                            }
                        },
                        "required": ["fieldRef"],
                        "type": "object"
                    },
                    "settings": {},
                    "disabled": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    }
                },
                "required": ["operator", "id", "target"],
                "type": "object",
                "additionalProperties": true
            },
            "CustomFormatType": {
                "enum": [
                    "default",
                    "percent",
                    "currency",
                    "number",
                    "id",
                    "date",
                    "timestamp"
                ],
                "type": "string"
            },
            "NumberSeparator": {
                "enum": [
                    "default",
                    "commaPeriod",
                    "spacePeriod",
                    "periodComma",
                    "noSeparatorPeriod"
                ],
                "type": "string"
            },
            "Compact": {
                "enum": ["thousands", "millions", "billions", "trillions"],
                "type": "string"
            },
            "CompactOrAlias": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/Compact"
                    },
                    {
                        "type": "string",
                        "enum": [
                            "K",
                            "thousand",
                            "M",
                            "million",
                            "B",
                            "billion",
                            "T",
                            "trillion"
                        ]
                    }
                ]
            },
            "TimeFrames": {
                "enum": [
                    "RAW",
                    "YEAR",
                    "QUARTER",
                    "MONTH",
                    "WEEK",
                    "DAY",
                    "HOUR",
                    "MINUTE",
                    "SECOND",
                    "MILLISECOND",
                    "DAY_OF_WEEK_INDEX",
                    "DAY_OF_MONTH_NUM",
                    "DAY_OF_YEAR_NUM",
                    "WEEK_NUM",
                    "MONTH_NUM",
                    "QUARTER_NUM",
                    "YEAR_NUM",
                    "DAY_OF_WEEK_NAME",
                    "MONTH_NAME",
                    "QUARTER_NAME",
                    "HOUR_OF_DAY_NUM",
                    "MINUTE_OF_HOUR_NUM"
                ],
                "type": "string"
            },
            "CustomFormat": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/CustomFormatType"
                    },
                    "round": {
                        "type": "number",
                        "format": "double"
                    },
                    "separator": {
                        "$ref": "#/components/schemas/NumberSeparator"
                    },
                    "currency": {
                        "type": "string"
                    },
                    "compact": {
                        "$ref": "#/components/schemas/CompactOrAlias"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "suffix": {
                        "type": "string"
                    },
                    "timeInterval": {
                        "$ref": "#/components/schemas/TimeFrames"
                    }
                },
                "required": ["type"],
                "type": "object",
                "additionalProperties": true
            },
            "SourcePosition": {
                "properties": {
                    "character": {
                        "type": "number",
                        "format": "double"
                    },
                    "line": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["character", "line"],
                "type": "object"
            },
            "Source": {
                "properties": {
                    "content": {
                        "type": "string"
                    },
                    "highlight": {
                        "properties": {
                            "end": {
                                "$ref": "#/components/schemas/SourcePosition"
                            },
                            "start": {
                                "$ref": "#/components/schemas/SourcePosition"
                            }
                        },
                        "required": ["end", "start"],
                        "type": "object"
                    },
                    "range": {
                        "properties": {
                            "end": {
                                "$ref": "#/components/schemas/SourcePosition"
                            },
                            "start": {
                                "$ref": "#/components/schemas/SourcePosition"
                            }
                        },
                        "required": ["end", "start"],
                        "type": "object"
                    },
                    "path": {
                        "type": "string"
                    }
                },
                "required": ["content", "range", "path"],
                "type": "object"
            },
            "Format": {
                "enum": ["km", "mi", "usd", "gbp", "eur", "id", "percent"],
                "type": "string"
            },
            "FieldUrl": {
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": ["label", "url"],
                "type": "object"
            },
            "CompiledMetric": {
                "properties": {
                    "fieldType": {
                        "$ref": "#/components/schemas/FieldType.METRIC"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MetricType"
                    },
                    "name": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "table": {
                        "type": "string"
                    },
                    "tableLabel": {
                        "type": "string"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "source": {
                        "$ref": "#/components/schemas/Source"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "compact": {
                        "$ref": "#/components/schemas/CompactOrAlias"
                    },
                    "round": {
                        "type": "number",
                        "format": "double"
                    },
                    "format": {
                        "$ref": "#/components/schemas/Format"
                    },
                    "groupLabel": {
                        "type": "string",
                        "deprecated": true
                    },
                    "groups": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "urls": {
                        "items": {
                            "$ref": "#/components/schemas/FieldUrl"
                        },
                        "type": "array"
                    },
                    "index": {
                        "type": "number",
                        "format": "double"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "isAutoGenerated": {
                        "type": "boolean"
                    },
                    "showUnderlyingValues": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/components/schemas/MetricFilterRule"
                        },
                        "type": "array"
                    },
                    "percentile": {
                        "type": "number",
                        "format": "double"
                    },
                    "formatOptions": {
                        "$ref": "#/components/schemas/CustomFormat"
                    },
                    "dimensionReference": {
                        "type": "string"
                    },
                    "requiredAttributes": {
                        "$ref": "#/components/schemas/Record_string.string-or-string-Array_"
                    },
                    "compiledSql": {
                        "type": "string"
                    },
                    "tablesReferences": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tablesRequiredAttributes": {
                        "$ref": "#/components/schemas/Record_string.Record_string.string-or-string-Array__"
                    }
                },
                "required": [
                    "fieldType",
                    "type",
                    "name",
                    "label",
                    "table",
                    "tableLabel",
                    "sql",
                    "hidden",
                    "isAutoGenerated",
                    "compiledSql"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "Pick_CompiledTable.defaultTimeDimension_": {
                "properties": {
                    "defaultTimeDimension": {
                        "properties": {
                            "interval": {
                                "$ref": "#/components/schemas/TimeFrames"
                            },
                            "field": {
                                "type": "string"
                            }
                        },
                        "required": ["interval", "field"],
                        "type": "object"
                    }
                },
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "MetricWithAssociatedTimeDimension": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CompiledMetric"
                    },
                    {
                        "$ref": "#/components/schemas/Pick_CompiledTable.defaultTimeDimension_"
                    }
                ]
            },
            "ApiGetMetricPeek": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/MetricWithAssociatedTimeDimension"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiSuccessEmpty": {
                "properties": {
                    "results": {},
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            },
            "ApiCreateComment": {
                "properties": {
                    "results": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Comment.text-or-replyTo-or-mentions-or-textHtml_": {
                "properties": {
                    "text": {
                        "type": "string"
                    },
                    "replyTo": {
                        "type": "string"
                    },
                    "mentions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "textHtml": {
                        "type": "string"
                    }
                },
                "required": ["text", "mentions", "textHtml"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Comment": {
                "properties": {
                    "mentions": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "canRemove": {
                        "type": "boolean"
                    },
                    "resolved": {
                        "type": "boolean"
                    },
                    "replies": {
                        "items": {
                            "$ref": "#/components/schemas/Comment"
                        },
                        "type": "array"
                    },
                    "replyTo": {
                        "type": "string"
                    },
                    "user": {
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        },
                        "required": ["name"],
                        "type": "object"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "textHtml": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "commentId": {
                        "type": "string"
                    }
                },
                "required": [
                    "mentions",
                    "canRemove",
                    "resolved",
                    "user",
                    "createdAt",
                    "textHtml",
                    "text",
                    "commentId"
                ],
                "type": "object"
            },
            "ApiGetComments": {
                "properties": {
                    "results": {
                        "properties": {},
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/Comment"
                            },
                            "type": "array"
                        },
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiResolveComment": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            },
            "ApiCsvUrlResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "truncated": {
                                "type": "boolean"
                            },
                            "status": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            }
                        },
                        "required": ["truncated", "status", "url"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "DashboardTileTypes": {
                "enum": [
                    "saved_chart",
                    "sql_chart",
                    "semantic_viewer_chart",
                    "markdown",
                    "loom"
                ],
                "type": "string"
            },
            "Required_CreateDashboardTileBase_": {
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes"
                    },
                    "x": {
                        "type": "number",
                        "format": "double"
                    },
                    "y": {
                        "type": "number",
                        "format": "double"
                    },
                    "h": {
                        "type": "number",
                        "format": "double"
                    },
                    "w": {
                        "type": "number",
                        "format": "double"
                    },
                    "tabUuid": {
                        "type": "string"
                    }
                },
                "required": ["uuid", "type", "x", "y", "h", "w"],
                "type": "object",
                "description": "Make all properties in T required"
            },
            "DashboardTileBase": {
                "$ref": "#/components/schemas/Required_CreateDashboardTileBase_"
            },
            "DashboardTileTypes.SAVED_CHART": {
                "enum": ["saved_chart"],
                "type": "string"
            },
            "DashboardChartTileProperties": {
                "properties": {
                    "properties": {
                        "properties": {
                            "lastVersionChartKind": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/ChartKind"
                                    }
                                ],
                                "nullable": true
                            },
                            "chartName": {
                                "type": "string",
                                "nullable": true
                            },
                            "belongsToDashboard": {
                                "type": "boolean"
                            },
                            "savedChartUuid": {
                                "type": "string",
                                "nullable": true
                            },
                            "hideTitle": {
                                "type": "boolean"
                            },
                            "title": {
                                "type": "string"
                            }
                        },
                        "required": ["savedChartUuid"],
                        "type": "object"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes.SAVED_CHART"
                    }
                },
                "required": ["properties", "type"],
                "type": "object"
            },
            "DashboardChartTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardChartTileProperties"
                    }
                ]
            },
            "DashboardTileTypes.MARKDOWN": {
                "enum": ["markdown"],
                "type": "string"
            },
            "DashboardMarkdownTileProperties": {
                "properties": {
                    "properties": {
                        "properties": {
                            "content": {
                                "type": "string"
                            },
                            "title": {
                                "type": "string"
                            }
                        },
                        "required": ["content", "title"],
                        "type": "object"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes.MARKDOWN"
                    }
                },
                "required": ["properties", "type"],
                "type": "object"
            },
            "DashboardMarkdownTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardMarkdownTileProperties"
                    }
                ]
            },
            "DashboardTileTypes.LOOM": {
                "enum": ["loom"],
                "type": "string"
            },
            "DashboardLoomTileProperties": {
                "properties": {
                    "properties": {
                        "properties": {
                            "url": {
                                "type": "string"
                            },
                            "hideTitle": {
                                "type": "boolean"
                            },
                            "title": {
                                "type": "string"
                            }
                        },
                        "required": ["url", "title"],
                        "type": "object"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes.LOOM"
                    }
                },
                "required": ["properties", "type"],
                "type": "object"
            },
            "DashboardLoomTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardLoomTileProperties"
                    }
                ]
            },
            "DashboardTileTypes.SQL_CHART": {
                "enum": ["sql_chart"],
                "type": "string"
            },
            "DashboardSqlChartTileProperties": {
                "properties": {
                    "properties": {
                        "properties": {
                            "hideTitle": {
                                "type": "boolean"
                            },
                            "chartName": {
                                "type": "string"
                            },
                            "savedSqlUuid": {
                                "type": "string",
                                "nullable": true
                            },
                            "title": {
                                "type": "string"
                            }
                        },
                        "required": ["chartName", "savedSqlUuid"],
                        "type": "object"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes.SQL_CHART"
                    }
                },
                "required": ["properties", "type"],
                "type": "object"
            },
            "DashboardSqlChartTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardSqlChartTileProperties"
                    }
                ]
            },
            "DashboardTileTypes.SEMANTIC_VIEWER_CHART": {
                "enum": ["semantic_viewer_chart"],
                "type": "string"
            },
            "DashboardSemanticViewerChartTileProperties": {
                "properties": {
                    "properties": {
                        "properties": {
                            "hideTitle": {
                                "type": "boolean"
                            },
                            "chartName": {
                                "type": "string"
                            },
                            "savedSemanticViewerChartUuid": {
                                "type": "string",
                                "nullable": true
                            },
                            "title": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "chartName",
                            "savedSemanticViewerChartUuid"
                        ],
                        "type": "object"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes.SEMANTIC_VIEWER_CHART"
                    }
                },
                "required": ["properties", "type"],
                "type": "object"
            },
            "DashboardSemanticViewerChartTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardSemanticViewerChartTileProperties"
                    }
                ]
            },
            "DashboardTile": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/DashboardChartTile"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardMarkdownTile"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardLoomTile"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardSqlChartTile"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardSemanticViewerChartTile"
                    }
                ]
            },
            "DashboardFieldTarget": {
                "properties": {
                    "tableName": {
                        "type": "string"
                    },
                    "fieldId": {
                        "type": "string"
                    }
                },
                "required": ["tableName", "fieldId"],
                "type": "object"
            },
            "FilterRule_ConditionalOperator.T.V.any_": {
                "properties": {
                    "values": {
                        "items": {},
                        "type": "array"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/ConditionalOperator"
                    },
                    "id": {
                        "type": "string"
                    },
                    "target": {
                        "$ref": "#/components/schemas/DashboardFieldTarget"
                    },
                    "settings": {},
                    "disabled": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    }
                },
                "required": ["operator", "id", "target"],
                "type": "object",
                "additionalProperties": true
            },
            "Record_string.DashboardTileTarget_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "DashboardFilterRule": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FilterRule_ConditionalOperator.T.V.any_"
                    },
                    {
                        "properties": {
                            "label": {
                                "type": "string"
                            },
                            "tileTargets": {
                                "$ref": "#/components/schemas/Record_string.DashboardTileTarget_"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "DashboardFilters": {
                "properties": {
                    "tableCalculations": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardFilterRule"
                        },
                        "type": "array"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardFilterRule"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardFilterRule"
                        },
                        "type": "array"
                    }
                },
                "required": ["tableCalculations", "metrics", "dimensions"],
                "type": "object"
            },
            "UpdatedByUser": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    }
                },
                "required": ["userUuid", "firstName", "lastName"],
                "type": "object",
                "additionalProperties": true
            },
            "DashboardTab": {
                "properties": {
                    "order": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": ["order", "name", "uuid"],
                "type": "object"
            },
            "Pick_Dashboard.Exclude_keyofDashboard.isPrivate-or-access__": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceName": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "dashboardVersionId": {
                        "type": "number",
                        "format": "double"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tiles": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardTile"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "$ref": "#/components/schemas/DashboardFilters"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "tabs": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardTab"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceName",
                    "spaceUuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "slug",
                    "dashboardVersionId",
                    "updatedAt",
                    "tiles",
                    "filters",
                    "views",
                    "firstViewedAt",
                    "pinnedListOrder",
                    "tabs"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_Dashboard.isPrivate-or-access_": {
                "$ref": "#/components/schemas/Pick_Dashboard.Exclude_keyofDashboard.isPrivate-or-access__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "DashboardDAO": {
                "$ref": "#/components/schemas/Omit_Dashboard.isPrivate-or-access_"
            },
            "ApiPromoteDashboardResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/DashboardDAO"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "PromotionAction": {
                "enum": ["no changes", "create", "update", "delete"],
                "type": "string"
            },
            "Pick_SpaceSummary.Exclude_keyofSpaceSummary.userAccess__": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "access": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "chartCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "dashboardCount": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "slug",
                    "isPrivate",
                    "access",
                    "pinnedListOrder",
                    "chartCount",
                    "dashboardCount"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_SpaceSummary.userAccess_": {
                "$ref": "#/components/schemas/Pick_SpaceSummary.Exclude_keyofSpaceSummary.userAccess__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "PromotedSpace": {
                "$ref": "#/components/schemas/Omit_SpaceSummary.userAccess_"
            },
            "PromotedDashboard": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardDAO"
                    },
                    {
                        "properties": {
                            "spaceSlug": {
                                "type": "string"
                            }
                        },
                        "required": ["spaceSlug"],
                        "type": "object"
                    }
                ]
            },
            "FieldId": {
                "type": "string"
            },
            "FilterGroup": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OrFilterGroup"
                    },
                    {
                        "$ref": "#/components/schemas/AndFilterGroup"
                    }
                ]
            },
            "FieldTarget": {
                "properties": {
                    "fieldId": {
                        "type": "string"
                    }
                },
                "required": ["fieldId"],
                "type": "object"
            },
            "FilterRule": {
                "properties": {
                    "values": {
                        "items": {},
                        "type": "array"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/ConditionalOperator"
                    },
                    "id": {
                        "type": "string"
                    },
                    "target": {
                        "$ref": "#/components/schemas/FieldTarget"
                    },
                    "settings": {},
                    "disabled": {
                        "type": "boolean"
                    },
                    "required": {
                        "type": "boolean"
                    }
                },
                "required": ["operator", "id", "target"],
                "type": "object",
                "additionalProperties": true
            },
            "FilterGroupItem": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/FilterGroup"
                    },
                    {
                        "$ref": "#/components/schemas/FilterRule"
                    }
                ]
            },
            "OrFilterGroup": {
                "properties": {
                    "or": {
                        "items": {
                            "$ref": "#/components/schemas/FilterGroupItem"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": ["or", "id"],
                "type": "object"
            },
            "AndFilterGroup": {
                "properties": {
                    "and": {
                        "items": {
                            "$ref": "#/components/schemas/FilterGroupItem"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": ["and", "id"],
                "type": "object"
            },
            "Filters": {
                "properties": {
                    "tableCalculations": {
                        "$ref": "#/components/schemas/FilterGroup"
                    },
                    "metrics": {
                        "$ref": "#/components/schemas/FilterGroup"
                    },
                    "dimensions": {
                        "$ref": "#/components/schemas/FilterGroup"
                    }
                },
                "type": "object"
            },
            "SortField": {
                "properties": {
                    "descending": {
                        "type": "boolean"
                    },
                    "fieldId": {
                        "type": "string"
                    }
                },
                "required": ["descending", "fieldId"],
                "type": "object"
            },
            "TableCalculationType": {
                "enum": ["number", "string", "date", "timestamp", "boolean"],
                "type": "string"
            },
            "TableCalculation": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/TableCalculationType"
                    },
                    "format": {
                        "$ref": "#/components/schemas/CustomFormat"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "index": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["sql", "displayName", "name"],
                "type": "object"
            },
            "AdditionalMetric": {
                "properties": {
                    "label": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/MetricType"
                    },
                    "description": {
                        "type": "string"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "round": {
                        "type": "number",
                        "format": "double"
                    },
                    "compact": {
                        "$ref": "#/components/schemas/CompactOrAlias"
                    },
                    "format": {
                        "$ref": "#/components/schemas/Format"
                    },
                    "table": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "index": {
                        "type": "number",
                        "format": "double"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/components/schemas/MetricFilterRule"
                        },
                        "type": "array"
                    },
                    "baseDimensionName": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "percentile": {
                        "type": "number",
                        "format": "double"
                    },
                    "formatOptions": {
                        "$ref": "#/components/schemas/CustomFormat"
                    }
                },
                "required": ["type", "sql", "table", "name"],
                "type": "object",
                "additionalProperties": true
            },
            "CustomDimensionType.BIN": {
                "enum": ["bin"],
                "type": "string"
            },
            "BinType": {
                "enum": ["fixed_number", "fixed_width", "custom_range"],
                "type": "string"
            },
            "BinRange": {
                "properties": {
                    "to": {
                        "type": "number",
                        "format": "double"
                    },
                    "from": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "type": "object"
            },
            "CustomDimensionType": {
                "enum": ["bin", "sql"],
                "type": "string"
            },
            "CustomBinDimension": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "table": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomDimensionType.BIN"
                    },
                    "dimensionId": {
                        "$ref": "#/components/schemas/FieldId"
                    },
                    "binType": {
                        "$ref": "#/components/schemas/BinType"
                    },
                    "binNumber": {
                        "type": "number",
                        "format": "double"
                    },
                    "binWidth": {
                        "type": "number",
                        "format": "double"
                    },
                    "customRange": {
                        "items": {
                            "$ref": "#/components/schemas/BinRange"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "table",
                    "type",
                    "dimensionId",
                    "binType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CustomDimensionType.SQL": {
                "enum": ["sql"],
                "type": "string"
            },
            "DimensionType": {
                "enum": ["string", "number", "timestamp", "date", "boolean"],
                "type": "string"
            },
            "CustomSqlDimension": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "table": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CustomDimensionType.SQL"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "dimensionType": {
                        "$ref": "#/components/schemas/DimensionType"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "table",
                    "type",
                    "sql",
                    "dimensionType"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "CustomDimension": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/CustomBinDimension"
                    },
                    {
                        "$ref": "#/components/schemas/CustomSqlDimension"
                    }
                ]
            },
            "Pick_CompiledDimension.label-or-name_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "required": ["name", "label"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "MetricQuery": {
                "properties": {
                    "metadata": {
                        "properties": {
                            "hasADateDimension": {
                                "$ref": "#/components/schemas/Pick_CompiledDimension.label-or-name_"
                            }
                        },
                        "required": ["hasADateDimension"],
                        "type": "object"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "customDimensions": {
                        "items": {
                            "$ref": "#/components/schemas/CustomDimension"
                        },
                        "type": "array"
                    },
                    "additionalMetrics": {
                        "items": {
                            "$ref": "#/components/schemas/AdditionalMetric"
                        },
                        "type": "array"
                    },
                    "tableCalculations": {
                        "items": {
                            "$ref": "#/components/schemas/TableCalculation"
                        },
                        "type": "array"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sorts": {
                        "items": {
                            "$ref": "#/components/schemas/SortField"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "$ref": "#/components/schemas/Filters"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "exploreName": {
                        "type": "string"
                    }
                },
                "required": [
                    "tableCalculations",
                    "limit",
                    "sorts",
                    "filters",
                    "metrics",
                    "dimensions",
                    "exploreName"
                ],
                "type": "object"
            },
            "ChartType.BIG_NUMBER": {
                "enum": ["big_number"],
                "type": "string"
            },
            "ComparisonFormatTypes": {
                "enum": ["raw", "percentage"],
                "type": "string"
            },
            "BigNumber": {
                "properties": {
                    "comparisonLabel": {
                        "type": "string"
                    },
                    "flipColors": {
                        "type": "boolean"
                    },
                    "comparisonFormat": {
                        "$ref": "#/components/schemas/ComparisonFormatTypes"
                    },
                    "showComparison": {
                        "type": "boolean"
                    },
                    "showBigNumberLabel": {
                        "type": "boolean"
                    },
                    "selectedField": {
                        "type": "string"
                    },
                    "style": {
                        "$ref": "#/components/schemas/CompactOrAlias"
                    },
                    "label": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BigNumberConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/BigNumber"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType.BIG_NUMBER"
                    }
                },
                "required": ["type"],
                "type": "object"
            },
            "ChartType.CARTESIAN": {
                "enum": ["cartesian"],
                "type": "string"
            },
            "Partial_CompleteCartesianChartLayout_": {
                "properties": {
                    "xField": {
                        "type": "string"
                    },
                    "yField": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "flipAxes": {
                        "type": "boolean"
                    },
                    "showGridX": {
                        "type": "boolean"
                    },
                    "showGridY": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "CartesianChartLayout": {
                "$ref": "#/components/schemas/Partial_CompleteCartesianChartLayout_"
            },
            "EchartsLegend": {
                "properties": {
                    "icon": {
                        "type": "string",
                        "enum": [
                            "circle",
                            "rect",
                            "roundRect",
                            "triangle",
                            "diamond",
                            "pin",
                            "arrow",
                            "none"
                        ]
                    },
                    "align": {
                        "type": "string",
                        "enum": ["auto", "left", "right"]
                    },
                    "height": {
                        "type": "string"
                    },
                    "width": {
                        "type": "string"
                    },
                    "left": {
                        "type": "string"
                    },
                    "bottom": {
                        "type": "string"
                    },
                    "right": {
                        "type": "string"
                    },
                    "top": {
                        "type": "string"
                    },
                    "orient": {
                        "type": "string",
                        "enum": ["horizontal", "vertical"]
                    },
                    "type": {
                        "type": "string",
                        "enum": ["plain", "scroll"]
                    },
                    "show": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "EchartsGrid": {
                "properties": {
                    "height": {
                        "type": "string"
                    },
                    "width": {
                        "type": "string"
                    },
                    "left": {
                        "type": "string"
                    },
                    "bottom": {
                        "type": "string"
                    },
                    "right": {
                        "type": "string"
                    },
                    "top": {
                        "type": "string"
                    },
                    "containLabel": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PivotValue": {
                "properties": {
                    "value": {},
                    "field": {
                        "type": "string"
                    }
                },
                "required": ["value", "field"],
                "type": "object"
            },
            "PivotReference": {
                "properties": {
                    "pivotValues": {
                        "items": {
                            "$ref": "#/components/schemas/PivotValue"
                        },
                        "type": "array"
                    },
                    "field": {
                        "type": "string"
                    }
                },
                "required": ["field"],
                "type": "object"
            },
            "CartesianSeriesType": {
                "enum": ["line", "bar", "scatter", "area"],
                "type": "string"
            },
            "MarkLineData": {
                "properties": {
                    "dynamicValue": {
                        "type": "string",
                        "enum": ["average"],
                        "nullable": false
                    },
                    "label": {
                        "properties": {
                            "position": {
                                "type": "string",
                                "enum": ["start", "middle", "end"]
                            },
                            "formatter": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "lineStyle": {
                        "properties": {
                            "color": {
                                "type": "string"
                            }
                        },
                        "required": ["color"],
                        "type": "object"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "xAxis": {
                        "type": "string"
                    },
                    "yAxis": {
                        "type": "string"
                    }
                },
                "required": ["uuid"],
                "type": "object"
            },
            "MarkLine": {
                "properties": {
                    "label": {
                        "properties": {
                            "formatter": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "lineStyle": {
                        "properties": {
                            "type": {
                                "type": "string"
                            },
                            "width": {
                                "type": "number",
                                "format": "double"
                            },
                            "color": {
                                "type": "string"
                            }
                        },
                        "required": ["type", "width", "color"],
                        "type": "object"
                    },
                    "symbol": {
                        "type": "string"
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/MarkLineData"
                        },
                        "type": "array"
                    }
                },
                "required": ["data"],
                "type": "object"
            },
            "Series": {
                "properties": {
                    "markLine": {
                        "$ref": "#/components/schemas/MarkLine"
                    },
                    "smooth": {
                        "type": "boolean"
                    },
                    "showSymbol": {
                        "type": "boolean"
                    },
                    "areaStyle": {
                        "properties": {},
                        "type": "object"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "label": {
                        "properties": {
                            "position": {
                                "type": "string",
                                "enum": [
                                    "left",
                                    "top",
                                    "right",
                                    "bottom",
                                    "inside"
                                ]
                            },
                            "show": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "yAxisIndex": {
                        "type": "number",
                        "format": "double"
                    },
                    "color": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "stackLabel": {
                        "properties": {
                            "show": {
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "stack": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/CartesianSeriesType"
                    },
                    "encode": {
                        "properties": {
                            "y": {
                                "type": "string"
                            },
                            "x": {
                                "type": "string"
                            },
                            "yRef": {
                                "$ref": "#/components/schemas/PivotReference"
                            },
                            "xRef": {
                                "$ref": "#/components/schemas/PivotReference"
                            }
                        },
                        "required": ["yRef", "xRef"],
                        "type": "object"
                    }
                },
                "required": ["type", "encode"],
                "type": "object"
            },
            "Axis": {
                "properties": {
                    "rotate": {
                        "type": "number",
                        "format": "double"
                    },
                    "inverse": {
                        "type": "boolean"
                    },
                    "maxOffset": {
                        "type": "string"
                    },
                    "minOffset": {
                        "type": "string"
                    },
                    "max": {
                        "type": "string"
                    },
                    "min": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Partial_CompleteEChartsConfig_": {
                "properties": {
                    "legend": {
                        "$ref": "#/components/schemas/EchartsLegend"
                    },
                    "grid": {
                        "$ref": "#/components/schemas/EchartsGrid"
                    },
                    "series": {
                        "items": {
                            "$ref": "#/components/schemas/Series"
                        },
                        "type": "array"
                    },
                    "xAxis": {
                        "items": {
                            "$ref": "#/components/schemas/Axis"
                        },
                        "type": "array"
                    },
                    "yAxis": {
                        "items": {
                            "$ref": "#/components/schemas/Axis"
                        },
                        "type": "array"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "EChartsConfig": {
                "$ref": "#/components/schemas/Partial_CompleteEChartsConfig_"
            },
            "Record_string.SeriesMetadata_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "CartesianChart": {
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/Record_string.SeriesMetadata_"
                    },
                    "eChartsConfig": {
                        "$ref": "#/components/schemas/EChartsConfig"
                    },
                    "layout": {
                        "$ref": "#/components/schemas/CartesianChartLayout"
                    }
                },
                "required": ["eChartsConfig", "layout"],
                "type": "object"
            },
            "CartesianChartConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/CartesianChart"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType.CARTESIAN"
                    }
                },
                "required": ["type"],
                "type": "object"
            },
            "ChartType.CUSTOM": {
                "enum": ["custom"],
                "type": "string"
            },
            "CustomVis": {
                "properties": {
                    "spec": {
                        "additionalProperties": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CustomVisConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/CustomVis"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType.CUSTOM"
                    }
                },
                "required": ["type"],
                "type": "object"
            },
            "ChartType.PIE": {
                "enum": ["pie"],
                "type": "string"
            },
            "PieChartValueLabel": {
                "type": "string",
                "enum": ["hidden", "inside", "outside"],
                "nullable": false
            },
            "Record_string.string_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Record_string.Partial_PieChartValueOptions__": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "PieChartLegendPosition": {
                "type": "string",
                "enum": ["horizontal", "vertical"],
                "nullable": false
            },
            "PieChart": {
                "properties": {
                    "metadata": {
                        "$ref": "#/components/schemas/Record_string.SeriesMetadata_"
                    },
                    "legendPosition": {
                        "$ref": "#/components/schemas/PieChartLegendPosition"
                    },
                    "showLegend": {
                        "type": "boolean"
                    },
                    "groupSortOverrides": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "groupValueOptionOverrides": {
                        "$ref": "#/components/schemas/Record_string.Partial_PieChartValueOptions__"
                    },
                    "groupColorOverrides": {
                        "$ref": "#/components/schemas/Record_string.string_"
                    },
                    "groupLabelOverrides": {
                        "$ref": "#/components/schemas/Record_string.string_"
                    },
                    "showPercentage": {
                        "type": "boolean"
                    },
                    "showValue": {
                        "type": "boolean"
                    },
                    "valueLabel": {
                        "$ref": "#/components/schemas/PieChartValueLabel"
                    },
                    "isDonut": {
                        "type": "boolean"
                    },
                    "metricId": {
                        "type": "string"
                    },
                    "groupFieldIds": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "PieChartConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/PieChart"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType.PIE"
                    }
                },
                "required": ["type"],
                "type": "object"
            },
            "ChartType.FUNNEL": {
                "enum": ["funnel"],
                "type": "string"
            },
            "FunnelChartDataInput": {
                "enum": ["row", "column"],
                "type": "string"
            },
            "FunnelChartLabelPosition": {
                "enum": ["inside", "left", "right", "hidden"],
                "type": "string"
            },
            "FunnelChartLegendPosition": {
                "enum": ["horizontal", "vertical"],
                "type": "string"
            },
            "FunnelChart": {
                "properties": {
                    "legendPosition": {
                        "$ref": "#/components/schemas/FunnelChartLegendPosition"
                    },
                    "showLegend": {
                        "type": "boolean"
                    },
                    "labels": {
                        "properties": {
                            "showPercentage": {
                                "type": "boolean"
                            },
                            "showValue": {
                                "type": "boolean"
                            },
                            "position": {
                                "$ref": "#/components/schemas/FunnelChartLabelPosition"
                            }
                        },
                        "type": "object"
                    },
                    "colorOverrides": {
                        "$ref": "#/components/schemas/Record_string.string_"
                    },
                    "labelOverrides": {
                        "$ref": "#/components/schemas/Record_string.string_"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Record_string.SeriesMetadata_"
                    },
                    "fieldId": {
                        "type": "string"
                    },
                    "dataInput": {
                        "$ref": "#/components/schemas/FunnelChartDataInput"
                    }
                },
                "type": "object"
            },
            "FunnelChartConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/FunnelChart"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType.FUNNEL"
                    }
                },
                "required": ["type"],
                "type": "object"
            },
            "ChartType.TABLE": {
                "enum": ["table"],
                "type": "string"
            },
            "Record_string.ColumnProperties_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "ConditionalRule_ConditionalOperator.number_": {
                "properties": {
                    "values": {
                        "items": {
                            "type": "number",
                            "format": "double"
                        },
                        "type": "array"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/ConditionalOperator"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": ["operator", "id"],
                "type": "object"
            },
            "ConditionalFormattingWithConditionalOperator": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ConditionalRule_ConditionalOperator.number_"
                    },
                    {
                        "properties": {
                            "values": {
                                "items": {
                                    "type": "number",
                                    "format": "double"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["values"],
                        "type": "object"
                    }
                ]
            },
            "ConditionalFormattingConfigWithSingleColor": {
                "properties": {
                    "rules": {
                        "items": {
                            "$ref": "#/components/schemas/ConditionalFormattingWithConditionalOperator"
                        },
                        "type": "array"
                    },
                    "color": {
                        "type": "string"
                    },
                    "target": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FieldTarget"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": ["rules", "color", "target"],
                "type": "object"
            },
            "ConditionalFormattingWithRange": {
                "properties": {
                    "max": {
                        "type": "number",
                        "format": "double"
                    },
                    "min": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["max", "min"],
                "type": "object"
            },
            "ConditionalFormattingConfigWithColorRange": {
                "properties": {
                    "rule": {
                        "$ref": "#/components/schemas/ConditionalFormattingWithRange"
                    },
                    "color": {
                        "properties": {
                            "steps": {
                                "type": "number",
                                "enum": [5],
                                "nullable": false
                            },
                            "end": {
                                "type": "string"
                            },
                            "start": {
                                "type": "string"
                            }
                        },
                        "required": ["steps", "end", "start"],
                        "type": "object"
                    },
                    "target": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FieldTarget"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": ["rule", "color", "target"],
                "type": "object"
            },
            "ConditionalFormattingConfig": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ConditionalFormattingConfigWithSingleColor"
                    },
                    {
                        "$ref": "#/components/schemas/ConditionalFormattingConfigWithColorRange"
                    }
                ]
            },
            "TableChart": {
                "properties": {
                    "metricsAsRows": {
                        "type": "boolean"
                    },
                    "conditionalFormattings": {
                        "items": {
                            "$ref": "#/components/schemas/ConditionalFormattingConfig"
                        },
                        "type": "array"
                    },
                    "columns": {
                        "$ref": "#/components/schemas/Record_string.ColumnProperties_"
                    },
                    "showSubtotals": {
                        "type": "boolean"
                    },
                    "showResultsTotal": {
                        "type": "boolean"
                    },
                    "hideRowNumbers": {
                        "type": "boolean"
                    },
                    "showTableNames": {
                        "type": "boolean"
                    },
                    "showRowCalculation": {
                        "type": "boolean"
                    },
                    "showColumnCalculation": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "TableChartConfig": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/TableChart"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType.TABLE"
                    }
                },
                "required": ["type"],
                "type": "object"
            },
            "ChartConfig": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/BigNumberConfig"
                    },
                    {
                        "$ref": "#/components/schemas/CartesianChartConfig"
                    },
                    {
                        "$ref": "#/components/schemas/CustomVisConfig"
                    },
                    {
                        "$ref": "#/components/schemas/PieChartConfig"
                    },
                    {
                        "$ref": "#/components/schemas/FunnelChartConfig"
                    },
                    {
                        "$ref": "#/components/schemas/TableChartConfig"
                    }
                ]
            },
            "Pick_SavedChart.Exclude_keyofSavedChart.isPrivate-or-access__": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceName": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "dashboardName": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "tableName": {
                        "type": "string"
                    },
                    "metricQuery": {
                        "$ref": "#/components/schemas/MetricQuery"
                    },
                    "pivotConfig": {
                        "properties": {
                            "columns": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["columns"],
                        "type": "object"
                    },
                    "chartConfig": {
                        "$ref": "#/components/schemas/ChartConfig"
                    },
                    "tableConfig": {
                        "properties": {
                            "columnOrder": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["columnOrder"],
                        "type": "object"
                    },
                    "colorPalette": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceName",
                    "spaceUuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "dashboardUuid",
                    "dashboardName",
                    "slug",
                    "updatedAt",
                    "pinnedListOrder",
                    "tableName",
                    "metricQuery",
                    "chartConfig",
                    "tableConfig",
                    "colorPalette"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_SavedChart.isPrivate-or-access_": {
                "$ref": "#/components/schemas/Pick_SavedChart.Exclude_keyofSavedChart.isPrivate-or-access__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "SavedChartDAO": {
                "$ref": "#/components/schemas/Omit_SavedChart.isPrivate-or-access_"
            },
            "PromotedChart": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SavedChartDAO"
                    },
                    {
                        "properties": {
                            "oldUuid": {
                                "type": "string"
                            },
                            "spaceSlug": {
                                "type": "string"
                            }
                        },
                        "required": ["oldUuid", "spaceSlug"],
                        "type": "object"
                    }
                ]
            },
            "PromotionChanges": {
                "properties": {
                    "charts": {
                        "items": {
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/PromotedChart"
                                },
                                "action": {
                                    "$ref": "#/components/schemas/PromotionAction"
                                }
                            },
                            "required": ["data", "action"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "dashboards": {
                        "items": {
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/PromotedDashboard"
                                },
                                "action": {
                                    "$ref": "#/components/schemas/PromotionAction"
                                }
                            },
                            "required": ["data", "action"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "spaces": {
                        "items": {
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/PromotedSpace"
                                },
                                "action": {
                                    "$ref": "#/components/schemas/PromotionAction"
                                }
                            },
                            "required": ["data", "action"],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": ["charts", "dashboards", "spaces"],
                "type": "object"
            },
            "ApiPromotionChangesResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/PromotionChanges"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ExploreType": {
                "enum": ["virtual", "default"],
                "type": "string"
            },
            "Pick_Explore.SummaryExploreFields_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "groupLabel": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ExploreType"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": ["name", "label", "tags"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "SummaryExtraFields": {
                "properties": {
                    "databaseName": {
                        "type": "string"
                    },
                    "schemaName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                },
                "required": ["databaseName", "schemaName"],
                "type": "object"
            },
            "Pick_ExploreError.SummaryExploreErrorFields_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "groupLabel": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ExploreType"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "errors": {
                        "items": {
                            "$ref": "#/components/schemas/InlineError"
                        },
                        "type": "array"
                    }
                },
                "required": ["name", "label", "tags", "errors"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Partial_SummaryExtraFields_": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "schemaName": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "SummaryExplore": {
                "anyOf": [
                    {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_Explore.SummaryExploreFields_"
                            },
                            {
                                "$ref": "#/components/schemas/SummaryExtraFields"
                            }
                        ]
                    },
                    {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_ExploreError.SummaryExploreErrorFields_"
                            },
                            {
                                "$ref": "#/components/schemas/Partial_SummaryExtraFields_"
                            }
                        ]
                    }
                ]
            },
            "ApiExploresResults": {
                "items": {
                    "$ref": "#/components/schemas/SummaryExplore"
                },
                "type": "array"
            },
            "OrderFieldsByStrategy": {
                "enum": ["LABEL", "INDEX"],
                "type": "string"
            },
            "Record_string.GroupType_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "TableBase": {
                "properties": {
                    "defaultTimeDimension": {
                        "properties": {
                            "interval": {
                                "$ref": "#/components/schemas/TimeFrames"
                            },
                            "field": {
                                "type": "string"
                            }
                        },
                        "required": ["interval", "field"],
                        "type": "object"
                    },
                    "groupDetails": {
                        "$ref": "#/components/schemas/Record_string.GroupType_"
                    },
                    "requiredAttributes": {
                        "$ref": "#/components/schemas/Record_string.string-or-string-Array_"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "requiredFilters": {
                        "items": {
                            "$ref": "#/components/schemas/MetricFilterRule"
                        },
                        "type": "array"
                    },
                    "sqlWhere": {
                        "type": "string"
                    },
                    "groupLabel": {
                        "type": "string"
                    },
                    "orderFieldsBy": {
                        "$ref": "#/components/schemas/OrderFieldsByStrategy"
                    },
                    "sqlTable": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "database": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "originalName": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["sqlTable", "schema", "database", "label", "name"],
                "type": "object"
            },
            "Record_string.CompiledDimension_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Record_string.CompiledMetric_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Record_string.LineageNodeDependency-Array_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "LineageGraph": {
                "$ref": "#/components/schemas/Record_string.LineageNodeDependency-Array_"
            },
            "CompiledTable": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TableBase"
                    },
                    {
                        "properties": {
                            "uncompiledSqlWhere": {
                                "type": "string"
                            },
                            "source": {
                                "$ref": "#/components/schemas/Source"
                            },
                            "lineageGraph": {
                                "$ref": "#/components/schemas/LineageGraph"
                            },
                            "metrics": {
                                "$ref": "#/components/schemas/Record_string.CompiledMetric_"
                            },
                            "dimensions": {
                                "$ref": "#/components/schemas/Record_string.CompiledDimension_"
                            }
                        },
                        "required": ["lineageGraph", "metrics", "dimensions"],
                        "type": "object"
                    }
                ]
            },
            "SupportedDbtAdapter": {
                "enum": [
                    "bigquery",
                    "databricks",
                    "snowflake",
                    "redshift",
                    "postgres",
                    "trino"
                ],
                "type": "string"
            },
            "Explore": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ExploreType"
                    },
                    "sqlPath": {
                        "type": "string"
                    },
                    "ymlPath": {
                        "type": "string"
                    },
                    "warehouse": {
                        "type": "string"
                    },
                    "targetDatabase": {
                        "$ref": "#/components/schemas/SupportedDbtAdapter"
                    },
                    "tables": {
                        "properties": {},
                        "additionalProperties": {
                            "$ref": "#/components/schemas/CompiledTable"
                        },
                        "type": "object"
                    },
                    "joinedTables": {
                        "items": {
                            "$ref": "#/components/schemas/CompiledExploreJoin"
                        },
                        "type": "array"
                    },
                    "baseTable": {
                        "type": "string"
                    },
                    "groupLabel": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "targetDatabase",
                    "tables",
                    "joinedTables",
                    "baseTable",
                    "tags",
                    "label",
                    "name"
                ],
                "type": "object"
            },
            "ApiExploreResults": {
                "$ref": "#/components/schemas/Explore"
            },
            "ApiCompiledQueryResults": {
                "type": "string"
            },
            "GitRepo": {
                "properties": {
                    "ownerLogin": {
                        "type": "string"
                    },
                    "fullName": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["ownerLogin", "fullName", "name"],
                "type": "object"
            },
            "GitIntegrationConfiguration": {
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    }
                },
                "required": ["enabled"],
                "type": "object"
            },
            "PullRequestCreated": {
                "properties": {
                    "prUrl": {
                        "type": "string"
                    },
                    "prTitle": {
                        "type": "string"
                    }
                },
                "required": ["prUrl", "prTitle"],
                "type": "object"
            },
            "ApiGdriveAccessTokenResponse": {
                "properties": {
                    "results": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiJobScheduledResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "jobId": {
                                "type": "string"
                            }
                        },
                        "required": ["jobId"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "FilterGroupResponse": {
                "anyOf": [
                    {
                        "properties": {
                            "or": {
                                "items": {},
                                "type": "array"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "required": ["or", "id"],
                        "type": "object"
                    },
                    {
                        "properties": {
                            "and": {
                                "items": {},
                                "type": "array"
                            },
                            "id": {
                                "type": "string"
                            }
                        },
                        "required": ["and", "id"],
                        "type": "object"
                    }
                ]
            },
            "FiltersResponse": {
                "properties": {
                    "tableCalculations": {
                        "$ref": "#/components/schemas/FilterGroupResponse"
                    },
                    "metrics": {
                        "$ref": "#/components/schemas/FilterGroupResponse"
                    },
                    "dimensions": {
                        "$ref": "#/components/schemas/FilterGroupResponse"
                    }
                },
                "type": "object"
            },
            "MetricQueryResponse": {
                "properties": {
                    "metadata": {
                        "properties": {
                            "hasADateDimension": {
                                "$ref": "#/components/schemas/Pick_CompiledDimension.label-or-name_"
                            }
                        },
                        "required": ["hasADateDimension"],
                        "type": "object"
                    },
                    "customDimensions": {
                        "items": {
                            "$ref": "#/components/schemas/CustomDimension"
                        },
                        "type": "array"
                    },
                    "additionalMetrics": {
                        "items": {
                            "$ref": "#/components/schemas/AdditionalMetric"
                        },
                        "type": "array"
                    },
                    "tableCalculations": {
                        "items": {
                            "$ref": "#/components/schemas/TableCalculation"
                        },
                        "type": "array"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sorts": {
                        "items": {
                            "$ref": "#/components/schemas/SortField"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "$ref": "#/components/schemas/FiltersResponse"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "exploreName": {
                        "type": "string"
                    }
                },
                "required": [
                    "tableCalculations",
                    "limit",
                    "sorts",
                    "filters",
                    "metrics",
                    "dimensions",
                    "exploreName"
                ],
                "type": "object"
            },
            "CustomLabel": {
                "properties": {},
                "additionalProperties": {
                    "type": "string"
                },
                "type": "object"
            },
            "UploadMetricGsheet": {
                "properties": {
                    "hiddenFields": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "customLabels": {
                        "$ref": "#/components/schemas/CustomLabel"
                    },
                    "columnOrder": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "showTableNames": {
                        "type": "boolean"
                    },
                    "metricQuery": {
                        "$ref": "#/components/schemas/MetricQueryResponse"
                    },
                    "exploreId": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "columnOrder",
                    "showTableNames",
                    "metricQuery",
                    "exploreId",
                    "projectUuid"
                ],
                "type": "object"
            },
            "Group": {
                "properties": {
                    "organizationUuid": {
                        "type": "string",
                        "description": "The UUID of the organization that the group belongs to"
                    },
                    "updatedByUserUuid": {
                        "type": "string",
                        "nullable": true,
                        "description": "The UUID of the user that last updated the group"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the group was last updated"
                    },
                    "createdByUserUuid": {
                        "type": "string",
                        "nullable": true,
                        "description": "The UUID of the user that created the group"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The time that the group was created"
                    },
                    "name": {
                        "type": "string",
                        "description": "A friendly name for the group"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The group's UUID"
                    }
                },
                "required": [
                    "organizationUuid",
                    "updatedByUserUuid",
                    "updatedAt",
                    "createdByUserUuid",
                    "createdAt",
                    "name",
                    "uuid"
                ],
                "type": "object"
            },
            "GroupMember": {
                "properties": {
                    "lastName": {
                        "type": "string",
                        "description": "The user's last name"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The user's first name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Primary email address for the user"
                    },
                    "userUuid": {
                        "type": "string",
                        "description": "Unique id for the user",
                        "format": "uuid"
                    }
                },
                "required": ["lastName", "firstName", "email", "userUuid"],
                "type": "object",
                "description": "A summary for a Lightdash user within a group"
            },
            "GroupWithMembers": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Group"
                    },
                    {
                        "properties": {
                            "memberUuids": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "members": {
                                "items": {
                                    "$ref": "#/components/schemas/GroupMember"
                                },
                                "type": "array",
                                "description": "A list of the group's members."
                            }
                        },
                        "required": ["memberUuids", "members"],
                        "type": "object"
                    }
                ],
                "description": "Details for a group including a list of the group's members."
            },
            "ApiGroupResponse": {
                "properties": {
                    "results": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            },
                            {
                                "$ref": "#/components/schemas/GroupWithMembers"
                            }
                        ]
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiGroupMembersResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/GroupMember"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_GroupMember.userUuid_": {
                "properties": {
                    "userUuid": {
                        "type": "string",
                        "description": "Unique id for the user",
                        "format": "uuid"
                    }
                },
                "required": ["userUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdateGroupWithMembers": {
                "properties": {
                    "members": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_GroupMember.userUuid_"
                        },
                        "type": "array"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProjectMemberRole": {
                "enum": [
                    "viewer",
                    "interactive_viewer",
                    "editor",
                    "developer",
                    "admin"
                ],
                "type": "string"
            },
            "ProjectGroupAccess": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "groupUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    }
                },
                "required": ["role", "groupUuid", "projectUuid"],
                "type": "object"
            },
            "ApiCreateProjectGroupAccess": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ProjectGroupAccess"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_CreateDBProjectGroupAccess.role_": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    }
                },
                "required": ["role"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ApiUpdateProjectGroupAccess": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ProjectGroupAccess"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_DBProjectGroupAccess.role_": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    }
                },
                "required": ["role"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdateDBProjectGroupAccess": {
                "$ref": "#/components/schemas/Pick_DBProjectGroupAccess.role_"
            },
            "Record_string._value-ResultValue--__": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "ResultRow": {
                "$ref": "#/components/schemas/Record_string._value-ResultValue--__"
            },
            "Record_string.Field-or-TableCalculation-or-CustomDimension-or-Metric_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "ItemsMap": {
                "$ref": "#/components/schemas/Record_string.Field-or-TableCalculation-or-CustomDimension-or-Metric_"
            },
            "MetricsExplorerQueryResults": {
                "properties": {
                    "fields": {
                        "$ref": "#/components/schemas/ItemsMap"
                    },
                    "comparisonRows": {
                        "items": {
                            "$ref": "#/components/schemas/ResultRow"
                        },
                        "type": "array"
                    },
                    "rows": {
                        "items": {
                            "$ref": "#/components/schemas/ResultRow"
                        },
                        "type": "array"
                    }
                },
                "required": ["fields", "rows"],
                "type": "object"
            },
            "ApiMetricsExplorerQueryResults": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/MetricsExplorerQueryResults"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "NotificationBase": {
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "resourceUuid": {
                        "type": "string"
                    },
                    "viewed": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "notificationId": {
                        "type": "string"
                    }
                },
                "required": ["viewed", "createdAt", "notificationId"],
                "type": "object"
            },
            "ApiNotificationResourceType.DashboardComments": {
                "enum": ["dashboardComments"],
                "type": "string"
            },
            "NotificationDashboardTileCommentMetadata": {
                "properties": {
                    "dashboardUuid": {
                        "type": "string"
                    },
                    "dashboardName": {
                        "type": "string"
                    },
                    "dashboardTileUuid": {
                        "type": "string"
                    },
                    "dashboardTileName": {
                        "type": "string"
                    }
                },
                "required": [
                    "dashboardUuid",
                    "dashboardName",
                    "dashboardTileUuid",
                    "dashboardTileName"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "NotificationDashboardComment": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/NotificationBase"
                    },
                    {
                        "properties": {
                            "metadata": {
                                "$ref": "#/components/schemas/NotificationDashboardTileCommentMetadata"
                            },
                            "resourceType": {
                                "$ref": "#/components/schemas/ApiNotificationResourceType.DashboardComments"
                            }
                        },
                        "required": ["resourceType"],
                        "type": "object"
                    }
                ]
            },
            "Notification": {
                "$ref": "#/components/schemas/NotificationDashboardComment"
            },
            "ApiNotificationsResults": {
                "items": {
                    "$ref": "#/components/schemas/Notification"
                },
                "type": "array"
            },
            "ApiGetNotifications": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ApiNotificationsResults"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiNotificationResourceType": {
                "enum": ["dashboardComments"],
                "type": "string"
            },
            "Pick_Notification.viewed_": {
                "properties": {
                    "viewed": {
                        "type": "boolean"
                    }
                },
                "required": ["viewed"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ApiNotificationUpdateParams": {
                "$ref": "#/components/schemas/Pick_Notification.viewed_"
            },
            "Organization": {
                "properties": {
                    "defaultProjectUuid": {
                        "type": "string",
                        "description": "The project a user sees when they first log in to the organization"
                    },
                    "needsProject": {
                        "type": "boolean",
                        "description": "The organization needs a project if it doesn't have at least one project."
                    },
                    "chartColors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "The default color palette for all projects in the organization"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the organization"
                    },
                    "organizationUuid": {
                        "type": "string",
                        "description": "The unique identifier of the organization",
                        "format": "uuid"
                    }
                },
                "required": ["name", "organizationUuid"],
                "type": "object",
                "description": "Details of a user's Organization"
            },
            "ApiOrganization": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Organization"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Organization.name_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateOrganization": {
                "$ref": "#/components/schemas/Pick_Organization.name_"
            },
            "Partial_Omit_Organization.organizationUuid-or-needsProject__": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the organization"
                    },
                    "chartColors": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "description": "The default color palette for all projects in the organization"
                    },
                    "defaultProjectUuid": {
                        "type": "string",
                        "description": "The project a user sees when they first log in to the organization"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "UpdateOrganization": {
                "$ref": "#/components/schemas/Partial_Omit_Organization.organizationUuid-or-needsProject__"
            },
            "ProjectType": {
                "enum": ["DEFAULT", "PREVIEW"],
                "type": "string"
            },
            "WarehouseTypes": {
                "enum": [
                    "bigquery",
                    "postgres",
                    "redshift",
                    "snowflake",
                    "databricks",
                    "trino"
                ],
                "type": "string"
            },
            "OrganizationProject": {
                "properties": {
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "warehouseType": {
                        "$ref": "#/components/schemas/WarehouseTypes"
                    },
                    "upstreamProjectUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdByUserUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "type": {
                        "$ref": "#/components/schemas/ProjectType"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string",
                        "description": "The unique identifier of the project",
                        "format": "uuid"
                    }
                },
                "required": [
                    "requireUserCredentials",
                    "warehouseType",
                    "upstreamProjectUuid",
                    "createdByUserUuid",
                    "type",
                    "name",
                    "projectUuid"
                ],
                "type": "object",
                "description": "Summary of a project under an organization"
            },
            "ApiOrganizationProjects": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/OrganizationProject"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object",
                "description": "List of projects in the current organization"
            },
            "OrganizationMemberRole": {
                "enum": [
                    "member",
                    "viewer",
                    "interactive_viewer",
                    "editor",
                    "developer",
                    "admin"
                ],
                "type": "string"
            },
            "OrganizationMemberProfile": {
                "properties": {
                    "isPending": {
                        "type": "boolean",
                        "description": "Whether the user doesn't have an authentication method (password or openId)"
                    },
                    "isInviteExpired": {
                        "type": "boolean",
                        "description": "Whether the user's invite to the organization has expired"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the user can login"
                    },
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole",
                        "description": "The role of the user in the organization"
                    },
                    "organizationUuid": {
                        "type": "string",
                        "description": "Unique identifier for the organization the user is a member of"
                    },
                    "email": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "userUpdatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "userCreatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "userUuid": {
                        "type": "string",
                        "description": "Unique identifier for the user",
                        "format": "uuid"
                    }
                },
                "required": [
                    "isActive",
                    "role",
                    "organizationUuid",
                    "email",
                    "lastName",
                    "firstName",
                    "userUpdatedAt",
                    "userCreatedAt",
                    "userUuid"
                ],
                "type": "object",
                "description": "Profile for a user's membership in an organization"
            },
            "KnexPaginatedData_OrganizationMemberProfile-Array_": {
                "properties": {
                    "pagination": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/KnexPaginateArgs"
                            },
                            {
                                "properties": {
                                    "totalResults": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "totalPageCount": {
                                        "type": "number",
                                        "format": "double"
                                    }
                                },
                                "required": ["totalResults", "totalPageCount"],
                                "type": "object"
                            }
                        ]
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/OrganizationMemberProfile"
                        },
                        "type": "array"
                    }
                },
                "required": ["data"],
                "type": "object"
            },
            "ApiOrganizationMemberProfiles": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/KnexPaginatedData_OrganizationMemberProfile-Array_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiOrganizationMemberProfile": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/OrganizationMemberProfile"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "UUID": {
                "type": "string",
                "format": "uuid",
                "description": "Stringified UUIDv4.\nSee [RFC 4112](https://tools.ietf.org/html/rfc4122)",
                "pattern": "[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}"
            },
            "OrganizationMemberProfileUpdate": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole"
                    }
                },
                "required": ["role"],
                "type": "object"
            },
            "OrganizationMemberRole.EDITOR": {
                "enum": ["editor"],
                "type": "string"
            },
            "OrganizationMemberRole.INTERACTIVE_VIEWER": {
                "enum": ["interactive_viewer"],
                "type": "string"
            },
            "OrganizationMemberRole.VIEWER": {
                "enum": ["viewer"],
                "type": "string"
            },
            "OrganizationMemberRole.MEMBER": {
                "enum": ["member"],
                "type": "string"
            },
            "AllowedEmailDomainsRole": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OrganizationMemberRole.EDITOR"
                    },
                    {
                        "$ref": "#/components/schemas/OrganizationMemberRole.INTERACTIVE_VIEWER"
                    },
                    {
                        "$ref": "#/components/schemas/OrganizationMemberRole.VIEWER"
                    },
                    {
                        "$ref": "#/components/schemas/OrganizationMemberRole.MEMBER"
                    }
                ]
            },
            "ProjectMemberRole.EDITOR": {
                "enum": ["editor"],
                "type": "string"
            },
            "ProjectMemberRole.INTERACTIVE_VIEWER": {
                "enum": ["interactive_viewer"],
                "type": "string"
            },
            "ProjectMemberRole.VIEWER": {
                "enum": ["viewer"],
                "type": "string"
            },
            "AllowedEmailDomainProjectsRole": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ProjectMemberRole.EDITOR"
                    },
                    {
                        "$ref": "#/components/schemas/ProjectMemberRole.INTERACTIVE_VIEWER"
                    },
                    {
                        "$ref": "#/components/schemas/ProjectMemberRole.VIEWER"
                    }
                ]
            },
            "AllowedEmailDomains": {
                "properties": {
                    "projects": {
                        "items": {
                            "properties": {
                                "role": {
                                    "$ref": "#/components/schemas/AllowedEmailDomainProjectsRole"
                                },
                                "projectUuid": {
                                    "type": "string"
                                }
                            },
                            "required": ["role", "projectUuid"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "role": {
                        "$ref": "#/components/schemas/AllowedEmailDomainsRole"
                    },
                    "emailDomains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "projects",
                    "role",
                    "emailDomains",
                    "organizationUuid"
                ],
                "type": "object"
            },
            "ApiOrganizationAllowedEmailDomains": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/AllowedEmailDomains"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_AllowedEmailDomains.Exclude_keyofAllowedEmailDomains.organizationUuid__": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/AllowedEmailDomainsRole"
                    },
                    "emailDomains": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "projects": {
                        "items": {
                            "properties": {
                                "role": {
                                    "$ref": "#/components/schemas/AllowedEmailDomainProjectsRole"
                                },
                                "projectUuid": {
                                    "type": "string"
                                }
                            },
                            "required": ["role", "projectUuid"],
                            "type": "object"
                        },
                        "type": "array"
                    }
                },
                "required": ["role", "emailDomains", "projects"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_AllowedEmailDomains.organizationUuid_": {
                "$ref": "#/components/schemas/Pick_AllowedEmailDomains.Exclude_keyofAllowedEmailDomains.organizationUuid__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "UpdateAllowedEmailDomains": {
                "$ref": "#/components/schemas/Omit_AllowedEmailDomains.organizationUuid_"
            },
            "ApiCreateGroupResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/GroupWithMembers"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Group.name_": {
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A friendly name for the group"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateGroup": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Group.name_"
                    },
                    {
                        "properties": {
                            "members": {
                                "items": {
                                    "$ref": "#/components/schemas/Pick_GroupMember.userUuid_"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "KnexPaginatedData_Group-Array-or-GroupWithMembers-Array_": {
                "properties": {
                    "pagination": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/KnexPaginateArgs"
                            },
                            {
                                "properties": {
                                    "totalResults": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "totalPageCount": {
                                        "type": "number",
                                        "format": "double"
                                    }
                                },
                                "required": ["totalResults", "totalPageCount"],
                                "type": "object"
                            }
                        ]
                    },
                    "data": {
                        "anyOf": [
                            {
                                "items": {
                                    "$ref": "#/components/schemas/Group"
                                },
                                "type": "array"
                            },
                            {
                                "items": {
                                    "$ref": "#/components/schemas/GroupWithMembers"
                                },
                                "type": "array"
                            }
                        ]
                    }
                },
                "required": ["data"],
                "type": "object"
            },
            "ApiGroupListResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/KnexPaginatedData_Group-Array-or-GroupWithMembers-Array_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ResourceViewItemType.DASHBOARD": {
                "enum": ["dashboard"],
                "type": "string"
            },
            "Pick_ValidationResponse.error-or-createdAt-or-validationId_": {
                "properties": {
                    "validationId": {
                        "type": "number",
                        "format": "double"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "string"
                    }
                },
                "required": ["validationId", "createdAt", "error"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ValidationSummary": {
                "$ref": "#/components/schemas/Pick_ValidationResponse.error-or-createdAt-or-validationId_"
            },
            "Pick_DashboardBasicDetails.uuid-or-spaceUuid-or-description-or-name-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder-or-updatedAt-or-updatedByUser-or-validationErrors_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "validationErrors": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationSummary"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceUuid",
                    "pinnedListUuid",
                    "updatedAt",
                    "views",
                    "firstViewedAt",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ResourceItemCategory": {
                "enum": ["mostPopular", "recentlyUpdated", "pinned"],
                "type": "string"
            },
            "ResourceViewDashboardItem": {
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/ResourceItemCategory"
                    },
                    "data": {
                        "$ref": "#/components/schemas/Pick_DashboardBasicDetails.uuid-or-spaceUuid-or-description-or-name-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder-or-updatedAt-or-updatedByUser-or-validationErrors_"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType.DASHBOARD"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "ResourceViewItemType.CHART": {
                "enum": ["chart"],
                "type": "string"
            },
            "ChartType": {
                "enum": [
                    "cartesian",
                    "table",
                    "big_number",
                    "pie",
                    "funnel",
                    "custom"
                ],
                "type": "string"
            },
            "Pick_SpaceQuery.uuid-or-name-or-chartType-or-chartKind-or-firstViewedAt-or-views-or-pinnedListUuid-or-pinnedListOrder-or-spaceUuid-or-description-or-updatedAt-or-updatedByUser-or-validationErrors-or-slug_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "chartKind": {
                        "$ref": "#/components/schemas/ChartKind"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "validationErrors": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationSummary"
                        },
                        "type": "array"
                    },
                    "chartType": {
                        "$ref": "#/components/schemas/ChartType"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceUuid",
                    "pinnedListUuid",
                    "slug",
                    "updatedAt",
                    "views",
                    "firstViewedAt",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ChartSourceType": {
                "enum": ["dbt_explore", "sql", "semantic_layer"],
                "type": "string"
            },
            "ResourceViewChartItem": {
                "properties": {
                    "category": {
                        "$ref": "#/components/schemas/ResourceItemCategory"
                    },
                    "data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_SpaceQuery.uuid-or-name-or-chartType-or-chartKind-or-firstViewedAt-or-views-or-pinnedListUuid-or-pinnedListOrder-or-spaceUuid-or-description-or-updatedAt-or-updatedByUser-or-validationErrors-or-slug_"
                            },
                            {
                                "properties": {
                                    "source": {
                                        "$ref": "#/components/schemas/ChartSourceType"
                                    }
                                },
                                "type": "object"
                            }
                        ]
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType.CHART"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "ResourceViewItemType.SPACE": {
                "enum": ["space"],
                "type": "string"
            },
            "Pick_Space.projectUuid-or-uuid-or-name-or-isPrivate-or-pinnedListUuid-or-pinnedListOrder-or-organizationUuid_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "isPrivate",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ResourceViewSpaceItem": {
                "properties": {
                    "data": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_Space.projectUuid-or-uuid-or-name-or-isPrivate-or-pinnedListUuid-or-pinnedListOrder-or-organizationUuid_"
                            },
                            {
                                "properties": {
                                    "chartCount": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "dashboardCount": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "accessListLength": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "access": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "chartCount",
                                    "dashboardCount",
                                    "accessListLength",
                                    "access"
                                ],
                                "type": "object"
                            }
                        ]
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType.SPACE"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "PinnedItems": {
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#/components/schemas/ResourceViewDashboardItem"
                        },
                        {
                            "$ref": "#/components/schemas/ResourceViewChartItem"
                        },
                        {
                            "$ref": "#/components/schemas/ResourceViewSpaceItem"
                        }
                    ]
                },
                "type": "array"
            },
            "ApiPinnedItems": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/PinnedItems"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ResourceViewItemType": {
                "enum": ["chart", "dashboard", "space"],
                "type": "string"
            },
            "Pick_ResourceViewItem-at-data.uuid-or-pinnedListOrder_": {
                "properties": {
                    "uuid": {
                        "type": "string"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": ["uuid", "pinnedListOrder"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdatePinnedItemOrder": {
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Pick_ResourceViewItem-at-data.uuid-or-pinnedListOrder_"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ResourceViewItemType"
                    }
                },
                "required": ["data", "type"],
                "type": "object"
            },
            "DbtProjectType.DBT": {
                "enum": ["dbt"],
                "type": "string"
            },
            "DbtProjectEnvironmentVariable": {
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                },
                "required": ["value", "key"],
                "type": "object"
            },
            "DbtProjectType": {
                "enum": [
                    "dbt",
                    "dbt_cloud_ide",
                    "github",
                    "gitlab",
                    "bitbucket",
                    "azure_devops",
                    "none"
                ],
                "type": "string"
            },
            "DbtLocalProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.DBT"
                    },
                    "target": {
                        "type": "string"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/components/schemas/DbtProjectEnvironmentVariable"
                        },
                        "type": "array"
                    },
                    "profiles_dir": {
                        "type": "string"
                    },
                    "project_dir": {
                        "type": "string"
                    }
                },
                "required": ["type"],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectType.DBT_CLOUD_IDE": {
                "enum": ["dbt_cloud_ide"],
                "type": "string"
            },
            "DbtCloudIDEProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.DBT_CLOUD_IDE"
                    },
                    "api_key": {
                        "type": "string"
                    },
                    "environment_id": {
                        "type": "string"
                    }
                },
                "required": ["type", "api_key", "environment_id"],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectType.GITHUB": {
                "enum": ["github"],
                "type": "string"
            },
            "DbtGithubProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.GITHUB"
                    },
                    "target": {
                        "type": "string"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/components/schemas/DbtProjectEnvironmentVariable"
                        },
                        "type": "array"
                    },
                    "personal_access_token": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "project_sub_path": {
                        "type": "string"
                    },
                    "host_domain": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "personal_access_token",
                    "repository",
                    "branch",
                    "project_sub_path"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectType.BITBUCKET": {
                "enum": ["bitbucket"],
                "type": "string"
            },
            "DbtBitBucketProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.BITBUCKET"
                    },
                    "target": {
                        "type": "string"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/components/schemas/DbtProjectEnvironmentVariable"
                        },
                        "type": "array"
                    },
                    "username": {
                        "type": "string"
                    },
                    "personal_access_token": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "project_sub_path": {
                        "type": "string"
                    },
                    "host_domain": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "username",
                    "personal_access_token",
                    "repository",
                    "branch",
                    "project_sub_path"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectType.GITLAB": {
                "enum": ["gitlab"],
                "type": "string"
            },
            "DbtGitlabProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.GITLAB"
                    },
                    "target": {
                        "type": "string"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/components/schemas/DbtProjectEnvironmentVariable"
                        },
                        "type": "array"
                    },
                    "personal_access_token": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "project_sub_path": {
                        "type": "string"
                    },
                    "host_domain": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "personal_access_token",
                    "repository",
                    "branch",
                    "project_sub_path"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectType.AZURE_DEVOPS": {
                "enum": ["azure_devops"],
                "type": "string"
            },
            "DbtAzureDevOpsProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.AZURE_DEVOPS"
                    },
                    "target": {
                        "type": "string"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/components/schemas/DbtProjectEnvironmentVariable"
                        },
                        "type": "array"
                    },
                    "personal_access_token": {
                        "type": "string"
                    },
                    "organization": {
                        "type": "string"
                    },
                    "project": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "branch": {
                        "type": "string"
                    },
                    "project_sub_path": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "personal_access_token",
                    "organization",
                    "project",
                    "repository",
                    "branch",
                    "project_sub_path"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectType.NONE": {
                "enum": ["none"],
                "type": "string"
            },
            "DbtNoneProjectConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DbtProjectType.NONE"
                    },
                    "target": {
                        "type": "string"
                    },
                    "environment": {
                        "items": {
                            "$ref": "#/components/schemas/DbtProjectEnvironmentVariable"
                        },
                        "type": "array"
                    },
                    "hideRefreshButton": {
                        "type": "boolean"
                    }
                },
                "required": ["type"],
                "type": "object",
                "additionalProperties": true
            },
            "DbtProjectConfig": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/DbtLocalProjectConfig"
                    },
                    {
                        "$ref": "#/components/schemas/DbtCloudIDEProjectConfig"
                    },
                    {
                        "$ref": "#/components/schemas/DbtGithubProjectConfig"
                    },
                    {
                        "$ref": "#/components/schemas/DbtBitBucketProjectConfig"
                    },
                    {
                        "$ref": "#/components/schemas/DbtGitlabProjectConfig"
                    },
                    {
                        "$ref": "#/components/schemas/DbtAzureDevOpsProjectConfig"
                    },
                    {
                        "$ref": "#/components/schemas/DbtNoneProjectConfig"
                    }
                ]
            },
            "WarehouseTypes.SNOWFLAKE": {
                "enum": ["snowflake"],
                "type": "string"
            },
            "WeekDay": {
                "enum": [0, 1, 2, 3, 4, 5, 6],
                "type": "number"
            },
            "Pick_CreateSnowflakeCredentials.Exclude_keyofCreateSnowflakeCredentials.SensitiveCredentialsFieldNames__": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.SNOWFLAKE"
                    },
                    "warehouse": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    },
                    "account": {
                        "type": "string"
                    },
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "threads": {
                        "type": "number",
                        "format": "double"
                    },
                    "clientSessionKeepAlive": {
                        "type": "boolean"
                    },
                    "queryTag": {
                        "type": "string"
                    },
                    "accessUrl": {
                        "type": "string"
                    },
                    "startOfWeek": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "nullable": true
                    },
                    "quotedIdentifiersIgnoreCase": {
                        "type": "boolean"
                    },
                    "override": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "warehouse",
                    "account",
                    "database",
                    "schema"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_CreateSnowflakeCredentials.SensitiveCredentialsFieldNames_": {
                "$ref": "#/components/schemas/Pick_CreateSnowflakeCredentials.Exclude_keyofCreateSnowflakeCredentials.SensitiveCredentialsFieldNames__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "SnowflakeCredentials": {
                "$ref": "#/components/schemas/Omit_CreateSnowflakeCredentials.SensitiveCredentialsFieldNames_"
            },
            "WarehouseTypes.REDSHIFT": {
                "enum": ["redshift"],
                "type": "string"
            },
            "Pick_CreateRedshiftCredentials.Exclude_keyofCreateRedshiftCredentials.SensitiveCredentialsFieldNames__": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.REDSHIFT"
                    },
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "threads": {
                        "type": "number",
                        "format": "double"
                    },
                    "startOfWeek": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "nullable": true
                    },
                    "useSshTunnel": {
                        "type": "boolean"
                    },
                    "sshTunnelHost": {
                        "type": "string"
                    },
                    "sshTunnelPort": {
                        "type": "number",
                        "format": "double"
                    },
                    "sshTunnelUser": {
                        "type": "string"
                    },
                    "sshTunnelPublicKey": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "port": {
                        "type": "number",
                        "format": "double"
                    },
                    "dbname": {
                        "type": "string"
                    },
                    "keepalivesIdle": {
                        "type": "number",
                        "format": "double"
                    },
                    "sslmode": {
                        "type": "string"
                    },
                    "ra3Node": {
                        "type": "boolean"
                    }
                },
                "required": ["type", "schema", "host", "port", "dbname"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_CreateRedshiftCredentials.SensitiveCredentialsFieldNames_": {
                "$ref": "#/components/schemas/Pick_CreateRedshiftCredentials.Exclude_keyofCreateRedshiftCredentials.SensitiveCredentialsFieldNames__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "RedshiftCredentials": {
                "$ref": "#/components/schemas/Omit_CreateRedshiftCredentials.SensitiveCredentialsFieldNames_"
            },
            "WarehouseTypes.POSTGRES": {
                "enum": ["postgres"],
                "type": "string"
            },
            "Pick_CreatePostgresCredentials.Exclude_keyofCreatePostgresCredentials.SensitiveCredentialsFieldNames__": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.POSTGRES"
                    },
                    "role": {
                        "type": "string"
                    },
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "threads": {
                        "type": "number",
                        "format": "double"
                    },
                    "startOfWeek": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "nullable": true
                    },
                    "useSshTunnel": {
                        "type": "boolean"
                    },
                    "sshTunnelHost": {
                        "type": "string"
                    },
                    "sshTunnelPort": {
                        "type": "number",
                        "format": "double"
                    },
                    "sshTunnelUser": {
                        "type": "string"
                    },
                    "sshTunnelPublicKey": {
                        "type": "string"
                    },
                    "host": {
                        "type": "string"
                    },
                    "port": {
                        "type": "number",
                        "format": "double"
                    },
                    "dbname": {
                        "type": "string"
                    },
                    "keepalivesIdle": {
                        "type": "number",
                        "format": "double"
                    },
                    "sslmode": {
                        "type": "string"
                    },
                    "searchPath": {
                        "type": "string"
                    }
                },
                "required": ["type", "schema", "host", "port", "dbname"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_CreatePostgresCredentials.SensitiveCredentialsFieldNames_": {
                "$ref": "#/components/schemas/Pick_CreatePostgresCredentials.Exclude_keyofCreatePostgresCredentials.SensitiveCredentialsFieldNames__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "PostgresCredentials": {
                "$ref": "#/components/schemas/Omit_CreatePostgresCredentials.SensitiveCredentialsFieldNames_"
            },
            "WarehouseTypes.BIGQUERY": {
                "enum": ["bigquery"],
                "type": "string"
            },
            "Pick_CreateBigqueryCredentials.Exclude_keyofCreateBigqueryCredentials.SensitiveCredentialsFieldNames__": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.BIGQUERY"
                    },
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "threads": {
                        "type": "number",
                        "format": "double"
                    },
                    "startOfWeek": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "nullable": true
                    },
                    "project": {
                        "type": "string"
                    },
                    "dataset": {
                        "type": "string"
                    },
                    "timeoutSeconds": {
                        "type": "number",
                        "format": "double"
                    },
                    "priority": {
                        "type": "string",
                        "enum": ["interactive", "batch"]
                    },
                    "retries": {
                        "type": "number",
                        "format": "double"
                    },
                    "location": {
                        "type": "string"
                    },
                    "maximumBytesBilled": {
                        "type": "number",
                        "format": "double"
                    },
                    "executionProject": {
                        "type": "string"
                    }
                },
                "required": ["type", "project", "dataset"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_CreateBigqueryCredentials.SensitiveCredentialsFieldNames_": {
                "$ref": "#/components/schemas/Pick_CreateBigqueryCredentials.Exclude_keyofCreateBigqueryCredentials.SensitiveCredentialsFieldNames__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "BigqueryCredentials": {
                "$ref": "#/components/schemas/Omit_CreateBigqueryCredentials.SensitiveCredentialsFieldNames_"
            },
            "WarehouseTypes.DATABRICKS": {
                "enum": ["databricks"],
                "type": "string"
            },
            "Pick_CreateDatabricksCredentials.Exclude_keyofCreateDatabricksCredentials.SensitiveCredentialsFieldNames__": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.DATABRICKS"
                    },
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "database": {
                        "type": "string"
                    },
                    "startOfWeek": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "nullable": true
                    },
                    "catalog": {
                        "type": "string"
                    },
                    "serverHostName": {
                        "type": "string"
                    },
                    "httpPath": {
                        "type": "string"
                    }
                },
                "required": ["type", "database", "serverHostName", "httpPath"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_CreateDatabricksCredentials.SensitiveCredentialsFieldNames_": {
                "$ref": "#/components/schemas/Pick_CreateDatabricksCredentials.Exclude_keyofCreateDatabricksCredentials.SensitiveCredentialsFieldNames__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "DatabricksCredentials": {
                "$ref": "#/components/schemas/Omit_CreateDatabricksCredentials.SensitiveCredentialsFieldNames_"
            },
            "WarehouseTypes.TRINO": {
                "enum": ["trino"],
                "type": "string"
            },
            "Pick_CreateTrinoCredentials.Exclude_keyofCreateTrinoCredentials.SensitiveCredentialsFieldNames__": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.TRINO"
                    },
                    "requireUserCredentials": {
                        "type": "boolean"
                    },
                    "schema": {
                        "type": "string"
                    },
                    "startOfWeek": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/WeekDay"
                            }
                        ],
                        "nullable": true
                    },
                    "host": {
                        "type": "string"
                    },
                    "port": {
                        "type": "number",
                        "format": "double"
                    },
                    "dbname": {
                        "type": "string"
                    },
                    "http_scheme": {
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "schema",
                    "host",
                    "port",
                    "dbname",
                    "http_scheme"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_CreateTrinoCredentials.SensitiveCredentialsFieldNames_": {
                "$ref": "#/components/schemas/Pick_CreateTrinoCredentials.Exclude_keyofCreateTrinoCredentials.SensitiveCredentialsFieldNames__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "TrinoCredentials": {
                "$ref": "#/components/schemas/Omit_CreateTrinoCredentials.SensitiveCredentialsFieldNames_"
            },
            "WarehouseCredentials": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/SnowflakeCredentials"
                    },
                    {
                        "$ref": "#/components/schemas/RedshiftCredentials"
                    },
                    {
                        "$ref": "#/components/schemas/PostgresCredentials"
                    },
                    {
                        "$ref": "#/components/schemas/BigqueryCredentials"
                    },
                    {
                        "$ref": "#/components/schemas/DatabricksCredentials"
                    },
                    {
                        "$ref": "#/components/schemas/TrinoCredentials"
                    }
                ]
            },
            "SupportedDbtVersions": {
                "enum": ["v1.4", "v1.5", "v1.6", "v1.7", "v1.8"],
                "type": "string"
            },
            "SemanticLayerType.DBT": {
                "enum": ["DBT"],
                "type": "string"
            },
            "DbtSemanticLayerConnection": {
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/SemanticLayerType.DBT"
                    }
                },
                "required": ["token", "domain", "environmentId", "type"],
                "type": "object"
            },
            "SemanticLayerType.CUBE": {
                "enum": ["CUBE"],
                "type": "string"
            },
            "CubeSemanticLayerConnection": {
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/SemanticLayerType.CUBE"
                    }
                },
                "required": ["token", "domain", "type"],
                "type": "object"
            },
            "SemanticLayerConnection": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/DbtSemanticLayerConnection"
                    },
                    {
                        "$ref": "#/components/schemas/CubeSemanticLayerConnection"
                    }
                ]
            },
            "Project": {
                "properties": {
                    "createdByUserUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "schedulerTimezone": {
                        "type": "string"
                    },
                    "semanticLayerConnection": {
                        "$ref": "#/components/schemas/SemanticLayerConnection"
                    },
                    "dbtVersion": {
                        "$ref": "#/components/schemas/SupportedDbtVersions"
                    },
                    "upstreamProjectUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string"
                    },
                    "warehouseConnection": {
                        "$ref": "#/components/schemas/WarehouseCredentials"
                    },
                    "dbtConnection": {
                        "$ref": "#/components/schemas/DbtProjectConfig"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ProjectType"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdByUserUuid",
                    "schedulerTimezone",
                    "dbtVersion",
                    "dbtConnection",
                    "type",
                    "name",
                    "projectUuid",
                    "organizationUuid"
                ],
                "type": "object"
            },
            "ApiProjectResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Project"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_SavedChart.uuid-or-name-or-description-or-spaceName-or-spaceUuid-or-projectUuid-or-organizationUuid-or-pinnedListUuid-or-dashboardUuid-or-dashboardName-or-slug_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceName": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "dashboardName": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceName",
                    "spaceUuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "dashboardUuid",
                    "dashboardName",
                    "slug"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ChartSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_SavedChart.uuid-or-name-or-description-or-spaceName-or-spaceUuid-or-projectUuid-or-organizationUuid-or-pinnedListUuid-or-dashboardUuid-or-dashboardName-or-slug_"
                    },
                    {
                        "properties": {
                            "source": {
                                "$ref": "#/components/schemas/ChartSourceType"
                            },
                            "chartKind": {
                                "$ref": "#/components/schemas/ChartKind"
                            },
                            "chartType": {
                                "$ref": "#/components/schemas/ChartType"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Pick_SavedChart.updatedAt-or-updatedByUser-or-pinnedListOrder_": {
                "properties": {
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": ["updatedAt", "pinnedListOrder"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ViewStatistics": {
                "properties": {
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": ["firstViewedAt", "views"],
                "type": "object"
            },
            "SpaceQuery": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ChartSummary"
                    },
                    {
                        "$ref": "#/components/schemas/Pick_SavedChart.updatedAt-or-updatedByUser-or-pinnedListOrder_"
                    },
                    {
                        "$ref": "#/components/schemas/ViewStatistics"
                    },
                    {
                        "properties": {
                            "validationErrors": {
                                "items": {
                                    "$ref": "#/components/schemas/ValidationSummary"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ApiChartListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceQuery"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiChartSummaryListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ChartSummary"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Space.organizationUuid-or-projectUuid-or-uuid-or-name-or-isPrivate-or-pinnedListUuid-or-pinnedListOrder-or-slug_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "slug",
                    "isPrivate",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "SpaceMemberRole": {
                "enum": ["viewer", "editor", "admin"],
                "type": "string"
            },
            "SpaceShare": {
                "properties": {
                    "inheritedFrom": {
                        "type": "string",
                        "enum": [
                            "organization",
                            "project",
                            "group",
                            "space_group"
                        ]
                    },
                    "inheritedRole": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/OrganizationMemberRole"
                            },
                            {
                                "$ref": "#/components/schemas/ProjectMemberRole"
                            }
                        ]
                    },
                    "projectRole": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "hasDirectAccess": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/SpaceMemberRole"
                    },
                    "email": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "hasDirectAccess",
                    "role",
                    "email",
                    "lastName",
                    "firstName",
                    "userUuid"
                ],
                "type": "object"
            },
            "SpaceSummary": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Space.organizationUuid-or-projectUuid-or-uuid-or-name-or-isPrivate-or-pinnedListUuid-or-pinnedListOrder-or-slug_"
                    },
                    {
                        "properties": {
                            "dashboardCount": {
                                "type": "number",
                                "format": "double"
                            },
                            "chartCount": {
                                "type": "number",
                                "format": "double"
                            },
                            "access": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "userAccess": {
                                "$ref": "#/components/schemas/SpaceShare"
                            }
                        },
                        "required": ["dashboardCount", "chartCount", "access"],
                        "type": "object"
                    }
                ]
            },
            "ApiSpaceSummaryListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceSummary"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ProjectMemberProfile": {
                "properties": {
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "lastName",
                    "firstName",
                    "email",
                    "role",
                    "projectUuid",
                    "userUuid"
                ],
                "type": "object"
            },
            "ApiProjectAccessListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ProjectMemberProfile"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiGetProjectMemberResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ProjectMemberProfile"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "CreateProjectMember": {
                "properties": {
                    "sendEmail": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "required": ["sendEmail", "role", "email"],
                "type": "object"
            },
            "UpdateProjectMember": {
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/ProjectMemberRole"
                    }
                },
                "required": ["role"],
                "type": "object"
            },
            "ApiGetProjectGroupAccesses": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ProjectGroupAccess"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Record_string._type-DimensionType--__": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Record_string.unknown_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "ApiSqlQueryResults": {
                "properties": {
                    "rows": {
                        "items": {
                            "$ref": "#/components/schemas/Record_string.unknown_"
                        },
                        "type": "array"
                    },
                    "fields": {
                        "$ref": "#/components/schemas/Record_string._type-DimensionType--__"
                    }
                },
                "required": ["rows", "fields"],
                "type": "object"
            },
            "Record_string.number_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "ApiCalculateTotalResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Record_string.number_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "DateGranularity": {
                "enum": ["Day", "Week", "Month", "Quarter", "Year"],
                "type": "string"
            },
            "MetricQueryRequest": {
                "properties": {
                    "timezone": {
                        "type": "string"
                    },
                    "metadata": {
                        "properties": {
                            "hasADateDimension": {
                                "$ref": "#/components/schemas/Pick_CompiledDimension.label-or-name_"
                            }
                        },
                        "required": ["hasADateDimension"],
                        "type": "object"
                    },
                    "granularity": {
                        "$ref": "#/components/schemas/DateGranularity"
                    },
                    "customDimensions": {
                        "items": {
                            "$ref": "#/components/schemas/CustomDimension"
                        },
                        "type": "array"
                    },
                    "csvLimit": {
                        "type": "number",
                        "format": "double"
                    },
                    "additionalMetrics": {
                        "items": {
                            "$ref": "#/components/schemas/AdditionalMetric"
                        },
                        "type": "array"
                    },
                    "tableCalculations": {
                        "items": {
                            "$ref": "#/components/schemas/TableCalculation"
                        },
                        "type": "array"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sorts": {
                        "items": {
                            "$ref": "#/components/schemas/SortField"
                        },
                        "type": "array"
                    },
                    "filters": {
                        "properties": {
                            "tableCalculations": {},
                            "metrics": {},
                            "dimensions": {}
                        },
                        "type": "object"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/FieldId"
                        },
                        "type": "array"
                    },
                    "exploreName": {
                        "type": "string"
                    }
                },
                "required": [
                    "tableCalculations",
                    "limit",
                    "sorts",
                    "filters",
                    "metrics",
                    "dimensions",
                    "exploreName"
                ],
                "type": "object"
            },
            "CalculateTotalFromQuery": {
                "properties": {
                    "explore": {
                        "type": "string"
                    },
                    "metricQuery": {
                        "$ref": "#/components/schemas/MetricQueryRequest"
                    }
                },
                "required": ["explore", "metricQuery"],
                "type": "object"
            },
            "Record_string.DbtExposure_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "Pick_CreateRedshiftCredentials-or-CreatePostgresCredentials-or-CreateSnowflakeCredentials-or-CreateTrinoCredentials.type-or-user_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.SNOWFLAKE"
                    },
                    "user": {
                        "type": "string"
                    }
                },
                "required": ["type", "user"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreateBigqueryCredentials.type_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.BIGQUERY"
                    }
                },
                "required": ["type"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreateDatabricksCredentials.type_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.DATABRICKS"
                    }
                },
                "required": ["type"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UserWarehouseCredentials": {
                "properties": {
                    "credentials": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Pick_CreateRedshiftCredentials-or-CreatePostgresCredentials-or-CreateSnowflakeCredentials-or-CreateTrinoCredentials.type-or-user_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreateBigqueryCredentials.type_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreateDatabricksCredentials.type_"
                            }
                        ]
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "name": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "credentials",
                    "updatedAt",
                    "createdAt",
                    "name",
                    "userUuid",
                    "uuid"
                ],
                "type": "object"
            },
            "UpdateMetadata": {
                "properties": {
                    "upstreamProjectUuid": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "type": "object"
            },
            "Partial_DbtSemanticLayerConnection_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SemanticLayerType.DBT"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "Partial_CubeSemanticLayerConnection_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/SemanticLayerType.CUBE"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "SemanticLayerConnectionUpdate": {
                "anyOf": [
                    {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Partial_DbtSemanticLayerConnection_"
                            },
                            {
                                "properties": {
                                    "type": {
                                        "$ref": "#/components/schemas/SemanticLayerType.DBT"
                                    }
                                },
                                "required": ["type"],
                                "type": "object"
                            }
                        ]
                    },
                    {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Partial_CubeSemanticLayerConnection_"
                            },
                            {
                                "properties": {
                                    "type": {
                                        "$ref": "#/components/schemas/SemanticLayerType.CUBE"
                                    }
                                },
                                "required": ["type"],
                                "type": "object"
                            }
                        ]
                    }
                ]
            },
            "Pick_Dashboard.uuid-or-name-or-description-or-updatedAt-or-projectUuid-or-updatedByUser-or-organizationUuid-or-spaceUuid-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "uuid",
                    "spaceUuid",
                    "projectUuid",
                    "organizationUuid",
                    "pinnedListUuid",
                    "updatedAt",
                    "views",
                    "firstViewedAt",
                    "pinnedListOrder"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "DashboardBasicDetails": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_Dashboard.uuid-or-name-or-description-or-updatedAt-or-projectUuid-or-updatedByUser-or-organizationUuid-or-spaceUuid-or-views-or-firstViewedAt-or-pinnedListUuid-or-pinnedListOrder_"
                    },
                    {
                        "properties": {
                            "validationErrors": {
                                "items": {
                                    "$ref": "#/components/schemas/ValidationSummary"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "DashboardBasicDetailsWithTileTypes": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardBasicDetails"
                    },
                    {
                        "properties": {
                            "tileTypes": {
                                "items": {
                                    "$ref": "#/components/schemas/DashboardTileTypes"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["tileTypes"],
                        "type": "object"
                    }
                ]
            },
            "ApiGetDashboardsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardBasicDetailsWithTileTypes"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Dashboard": {
                "properties": {
                    "slug": {
                        "type": "string"
                    },
                    "access": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceShare"
                        },
                        "type": "array",
                        "nullable": true
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "nullable": true
                    },
                    "tabs": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardTab"
                        },
                        "type": "array"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "firstViewedAt": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "date-time"
                            },
                            {
                                "type": "string"
                            }
                        ],
                        "nullable": true
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "spaceName": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "filters": {
                        "$ref": "#/components/schemas/DashboardFilters"
                    },
                    "tiles": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardTile"
                        },
                        "type": "array"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "dashboardVersionId": {
                        "type": "number",
                        "format": "double"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "slug",
                    "access",
                    "isPrivate",
                    "tabs",
                    "pinnedListOrder",
                    "pinnedListUuid",
                    "firstViewedAt",
                    "views",
                    "spaceName",
                    "spaceUuid",
                    "filters",
                    "tiles",
                    "updatedAt",
                    "name",
                    "uuid",
                    "dashboardVersionId",
                    "projectUuid",
                    "organizationUuid"
                ],
                "type": "object"
            },
            "ApiCreateDashboardResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Dashboard"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "DuplicateDashboardParams": {
                "properties": {
                    "dashboardDesc": {
                        "type": "string"
                    },
                    "dashboardName": {
                        "type": "string"
                    }
                },
                "required": ["dashboardDesc", "dashboardName"],
                "type": "object"
            },
            "CreateDashboardTileBase": {
                "properties": {
                    "tabUuid": {
                        "type": "string"
                    },
                    "w": {
                        "type": "number",
                        "format": "double"
                    },
                    "h": {
                        "type": "number",
                        "format": "double"
                    },
                    "y": {
                        "type": "number",
                        "format": "double"
                    },
                    "x": {
                        "type": "number",
                        "format": "double"
                    },
                    "type": {
                        "$ref": "#/components/schemas/DashboardTileTypes"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": ["w", "h", "y", "x", "type"],
                "type": "object"
            },
            "CreateDashboardChartTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateDashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardChartTileProperties"
                    }
                ]
            },
            "CreateDashboardMarkdownTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateDashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardMarkdownTileProperties"
                    }
                ]
            },
            "CreateDashboardLoomTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateDashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardLoomTileProperties"
                    }
                ]
            },
            "CreateDashboardSqlChartTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateDashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardSqlChartTileProperties"
                    }
                ]
            },
            "CreateDashboardSemanticViewerChartTile": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateDashboardTileBase"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardSemanticViewerChartTileProperties"
                    }
                ]
            },
            "Pick_UpdatedByUser.userUuid_": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": ["userUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateDashboard": {
                "properties": {
                    "tabs": {
                        "items": {
                            "$ref": "#/components/schemas/DashboardTab"
                        },
                        "type": "array"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/Pick_UpdatedByUser.userUuid_"
                    },
                    "filters": {
                        "$ref": "#/components/schemas/DashboardFilters"
                    },
                    "tiles": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/CreateDashboardChartTile"
                                },
                                {
                                    "$ref": "#/components/schemas/CreateDashboardMarkdownTile"
                                },
                                {
                                    "$ref": "#/components/schemas/CreateDashboardLoomTile"
                                },
                                {
                                    "$ref": "#/components/schemas/CreateDashboardSqlChartTile"
                                },
                                {
                                    "$ref": "#/components/schemas/CreateDashboardSemanticViewerChartTile"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["tabs", "tiles", "name"],
                "type": "object"
            },
            "ApiUpdateDashboardsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/Dashboard"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Dashboard.uuid-or-name-or-description-or-spaceUuid_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    }
                },
                "required": ["name", "uuid", "spaceUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpdateMultipleDashboards": {
                "$ref": "#/components/schemas/Pick_Dashboard.uuid-or-name-or-description-or-spaceUuid_"
            },
            "UpdateSchedulerSettings": {
                "properties": {
                    "schedulerTimezone": {
                        "type": "string"
                    }
                },
                "required": ["schedulerTimezone"],
                "type": "object"
            },
            "ApiCreateTagResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "tagUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["tagUuid"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_Tag.name-or-color_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    }
                },
                "required": ["name", "color"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Partial_Pick_DbTag.name-or-color__": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "color": {
                        "type": "string"
                    }
                },
                "type": "object",
                "description": "Make all properties in T optional"
            },
            "DbTagUpdate": {
                "$ref": "#/components/schemas/Partial_Pick_DbTag.name-or-color__"
            },
            "Pick_LightdashUser.userUuid-or-firstName-or-lastName_": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    }
                },
                "required": ["userUuid", "firstName", "lastName"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Tag": {
                "properties": {
                    "createdBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "color": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "tagUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "createdBy",
                    "createdAt",
                    "color",
                    "name",
                    "projectUuid",
                    "tagUuid"
                ],
                "type": "object"
            },
            "ApiGetTagsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_SavedChart.name-or-description-or-tableName-or-metricQuery-or-chartConfig-or-tableConfig-or-slug-or-dashboardUuid-or-colorPalette-or-updatedAt_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tableName": {
                        "type": "string"
                    },
                    "metricQuery": {
                        "$ref": "#/components/schemas/MetricQuery"
                    },
                    "chartConfig": {
                        "$ref": "#/components/schemas/ChartConfig"
                    },
                    "tableConfig": {
                        "properties": {
                            "columnOrder": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["columnOrder"],
                        "type": "object"
                    },
                    "colorPalette": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "dashboardUuid",
                    "slug",
                    "updatedAt",
                    "tableName",
                    "metricQuery",
                    "chartConfig",
                    "tableConfig",
                    "colorPalette"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ChartAsCode": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_SavedChart.name-or-description-or-tableName-or-metricQuery-or-chartConfig-or-tableConfig-or-slug-or-dashboardUuid-or-colorPalette-or-updatedAt_"
                    },
                    {
                        "properties": {
                            "spaceSlug": {
                                "type": "string"
                            },
                            "version": {
                                "type": "number",
                                "format": "double"
                            }
                        },
                        "required": ["spaceSlug", "version"],
                        "type": "object"
                    }
                ]
            },
            "ApiChartAsCodeListResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ChartAsCode"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiChartAsCodeUpsertResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "created": {
                                "type": "boolean"
                            },
                            "chart": {
                                "$ref": "#/components/schemas/ChartAsCode"
                            }
                        },
                        "required": ["created", "chart"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_ChartAsCode.Exclude_keyofChartAsCode.metricQuery-or-chartConfig__": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "slug": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tableName": {
                        "type": "string"
                    },
                    "tableConfig": {
                        "properties": {
                            "columnOrder": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["columnOrder"],
                        "type": "object"
                    },
                    "colorPalette": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "version": {
                        "type": "number",
                        "format": "double"
                    },
                    "spaceSlug": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "dashboardUuid",
                    "slug",
                    "updatedAt",
                    "tableName",
                    "tableConfig",
                    "colorPalette",
                    "version",
                    "spaceSlug"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_ChartAsCode.metricQuery-or-chartConfig_": {
                "$ref": "#/components/schemas/Pick_ChartAsCode.Exclude_keyofChartAsCode.metricQuery-or-chartConfig__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "CacheMetadata": {
                "properties": {
                    "cacheHit": {
                        "type": "boolean"
                    },
                    "cacheUpdatedTime": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": ["cacheHit"],
                "type": "object"
            },
            "Record_string.Item-or-AdditionalMetric_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "ApiRunQueryResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "fields": {
                                "$ref": "#/components/schemas/Record_string.Item-or-AdditionalMetric_"
                            },
                            "rows": {
                                "items": {},
                                "type": "array"
                            },
                            "cacheMetadata": {
                                "$ref": "#/components/schemas/CacheMetadata"
                            },
                            "metricQuery": {
                                "$ref": "#/components/schemas/MetricQueryResponse"
                            }
                        },
                        "required": ["rows", "cacheMetadata", "metricQuery"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_ChartVersion.chartUuid-or-versionUuid-or-createdAt-or-createdBy_": {
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "chartUuid": {
                        "type": "string"
                    },
                    "versionUuid": {
                        "type": "string"
                    },
                    "createdBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "createdAt",
                    "chartUuid",
                    "versionUuid",
                    "createdBy"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ChartVersionSummary": {
                "$ref": "#/components/schemas/Pick_ChartVersion.chartUuid-or-versionUuid-or-createdAt-or-createdBy_"
            },
            "ChartHistory": {
                "properties": {
                    "history": {
                        "items": {
                            "$ref": "#/components/schemas/ChartVersionSummary"
                        },
                        "type": "array"
                    }
                },
                "required": ["history"],
                "type": "object"
            },
            "ApiGetChartHistoryResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ChartHistory"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SavedChart": {
                "properties": {
                    "slug": {
                        "type": "string"
                    },
                    "access": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceShare"
                        },
                        "type": "array"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "colorPalette": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "dashboardName": {
                        "type": "string",
                        "nullable": true
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "spaceName": {
                        "type": "string"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "updatedByUser": {
                        "$ref": "#/components/schemas/UpdatedByUser"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tableConfig": {
                        "properties": {
                            "columnOrder": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["columnOrder"],
                        "type": "object"
                    },
                    "chartConfig": {
                        "$ref": "#/components/schemas/ChartConfig"
                    },
                    "pivotConfig": {
                        "properties": {
                            "columns": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["columns"],
                        "type": "object"
                    },
                    "metricQuery": {
                        "$ref": "#/components/schemas/MetricQuery"
                    },
                    "tableName": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "slug",
                    "access",
                    "isPrivate",
                    "colorPalette",
                    "dashboardName",
                    "dashboardUuid",
                    "pinnedListOrder",
                    "pinnedListUuid",
                    "spaceName",
                    "spaceUuid",
                    "organizationUuid",
                    "updatedAt",
                    "tableConfig",
                    "chartConfig",
                    "metricQuery",
                    "tableName",
                    "name",
                    "projectUuid",
                    "uuid"
                ],
                "type": "object"
            },
            "ChartVersion": {
                "properties": {
                    "chart": {
                        "$ref": "#/components/schemas/SavedChart"
                    },
                    "createdBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "versionUuid": {
                        "type": "string"
                    },
                    "chartUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "chart",
                    "createdBy",
                    "createdAt",
                    "versionUuid",
                    "chartUuid"
                ],
                "type": "object"
            },
            "ApiGetChartVersionResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ChartVersion"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiPromoteChartResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SavedChartDAO"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SchedulerFormat": {
                "enum": ["csv", "image", "gsheets"],
                "type": "string"
            },
            "SchedulerCsvOptions": {
                "properties": {
                    "limit": {
                        "anyOf": [
                            {
                                "type": "number",
                                "format": "double"
                            },
                            {
                                "type": "string",
                                "enum": ["table", "all"]
                            }
                        ]
                    },
                    "formatted": {
                        "type": "boolean"
                    }
                },
                "required": ["limit", "formatted"],
                "type": "object"
            },
            "SchedulerImageOptions": {
                "properties": {
                    "withPdf": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SchedulerGsheetsOptions": {
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "gdriveOrganizationName": {
                        "type": "string"
                    },
                    "gdriveName": {
                        "type": "string"
                    },
                    "gdriveId": {
                        "type": "string"
                    }
                },
                "required": [
                    "url",
                    "gdriveOrganizationName",
                    "gdriveName",
                    "gdriveId"
                ],
                "type": "object"
            },
            "SchedulerOptions": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/SchedulerCsvOptions"
                    },
                    {
                        "$ref": "#/components/schemas/SchedulerImageOptions"
                    },
                    {
                        "$ref": "#/components/schemas/SchedulerGsheetsOptions"
                    }
                ]
            },
            "ThresholdOperator": {
                "enum": [
                    "greaterThan",
                    "lessThan",
                    "increasedBy",
                    "decreasedBy"
                ],
                "type": "string"
            },
            "ThresholdOptions": {
                "properties": {
                    "value": {
                        "type": "number",
                        "format": "double"
                    },
                    "fieldId": {
                        "type": "string"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/ThresholdOperator"
                    }
                },
                "required": ["value", "fieldId", "operator"],
                "type": "object"
            },
            "NotificationFrequency": {
                "enum": ["always", "once"],
                "type": "string"
            },
            "SchedulerBase": {
                "properties": {
                    "includeLinks": {
                        "type": "boolean"
                    },
                    "notificationFrequency": {
                        "$ref": "#/components/schemas/NotificationFrequency"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "thresholds": {
                        "items": {
                            "$ref": "#/components/schemas/ThresholdOptions"
                        },
                        "type": "array"
                    },
                    "options": {
                        "$ref": "#/components/schemas/SchedulerOptions"
                    },
                    "dashboardUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "savedChartUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "cron": {
                        "type": "string"
                    },
                    "format": {
                        "$ref": "#/components/schemas/SchedulerFormat"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "message": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "includeLinks",
                    "enabled",
                    "options",
                    "dashboardUuid",
                    "savedChartUuid",
                    "cron",
                    "format",
                    "createdBy",
                    "updatedAt",
                    "createdAt",
                    "name",
                    "schedulerUuid"
                ],
                "type": "object"
            },
            "ChartScheduler": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SchedulerBase"
                    },
                    {
                        "properties": {
                            "dashboardUuid": {
                                "type": "number",
                                "enum": [null],
                                "nullable": true
                            },
                            "savedChartUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["dashboardUuid", "savedChartUuid"],
                        "type": "object"
                    }
                ]
            },
            "SchedulerFilterRule": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DashboardFilterRule"
                    },
                    {
                        "properties": {
                            "tileTargets": {}
                        },
                        "type": "object"
                    }
                ]
            },
            "DashboardScheduler": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SchedulerBase"
                    },
                    {
                        "properties": {
                            "selectedTabs": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "customViewportWidth": {
                                "type": "number",
                                "format": "double"
                            },
                            "filters": {
                                "items": {
                                    "$ref": "#/components/schemas/SchedulerFilterRule"
                                },
                                "type": "array"
                            },
                            "dashboardUuid": {
                                "type": "string"
                            },
                            "savedChartUuid": {
                                "type": "number",
                                "enum": [null],
                                "nullable": true
                            }
                        },
                        "required": ["dashboardUuid", "savedChartUuid"],
                        "type": "object"
                    }
                ]
            },
            "Scheduler": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ChartScheduler"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardScheduler"
                    }
                ]
            },
            "SchedulerSlackTarget": {
                "properties": {
                    "channel": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "schedulerSlackTargetUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "channel",
                    "schedulerUuid",
                    "updatedAt",
                    "createdAt",
                    "schedulerSlackTargetUuid"
                ],
                "type": "object"
            },
            "SchedulerEmailTarget": {
                "properties": {
                    "recipient": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "schedulerEmailTargetUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "recipient",
                    "schedulerUuid",
                    "updatedAt",
                    "createdAt",
                    "schedulerEmailTargetUuid"
                ],
                "type": "object"
            },
            "SchedulerAndTargets": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Scheduler"
                    },
                    {
                        "properties": {
                            "targets": {
                                "items": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/SchedulerSlackTarget"
                                        },
                                        {
                                            "$ref": "#/components/schemas/SchedulerEmailTarget"
                                        }
                                    ]
                                },
                                "type": "array"
                            }
                        },
                        "required": ["targets"],
                        "type": "object"
                    }
                ]
            },
            "SchedulerJobStatus": {
                "enum": ["scheduled", "started", "completed", "error"],
                "type": "string"
            },
            "Record_string.any_": {
                "properties": {},
                "type": "object",
                "description": "Construct a type with a set of properties K of type T"
            },
            "SchedulerLog": {
                "properties": {
                    "details": {
                        "$ref": "#/components/schemas/Record_string.any_"
                    },
                    "targetType": {
                        "type": "string",
                        "enum": ["email", "slack", "gsheets"]
                    },
                    "target": {
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/SchedulerJobStatus"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "scheduledTime": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "jobGroup": {
                        "type": "string"
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "schedulerUuid": {
                        "type": "string"
                    },
                    "task": {
                        "type": "string",
                        "enum": [
                            "handleScheduledDelivery",
                            "sendEmailNotification",
                            "sendSlackNotification",
                            "uploadGsheets",
                            "downloadCsv",
                            "uploadGsheetFromQuery",
                            "createProjectWithCompile",
                            "compileProject",
                            "testAndCompileProject",
                            "validateProject",
                            "sqlRunner",
                            "sqlRunnerPivotQuery",
                            "semanticLayer",
                            "indexCatalog"
                        ]
                    }
                },
                "required": [
                    "status",
                    "createdAt",
                    "scheduledTime",
                    "jobId",
                    "task"
                ],
                "type": "object"
            },
            "SchedulerWithLogs": {
                "properties": {
                    "logs": {
                        "items": {
                            "$ref": "#/components/schemas/SchedulerLog"
                        },
                        "type": "array"
                    },
                    "dashboards": {
                        "items": {
                            "properties": {
                                "dashboardUuid": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": ["dashboardUuid", "name"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "charts": {
                        "items": {
                            "properties": {
                                "savedChartUuid": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": ["savedChartUuid", "name"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "users": {
                        "items": {
                            "properties": {
                                "userUuid": {
                                    "type": "string"
                                },
                                "lastName": {
                                    "type": "string"
                                },
                                "firstName": {
                                    "type": "string"
                                }
                            },
                            "required": ["userUuid", "lastName", "firstName"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "schedulers": {
                        "items": {
                            "$ref": "#/components/schemas/SchedulerAndTargets"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "logs",
                    "dashboards",
                    "charts",
                    "users",
                    "schedulers"
                ],
                "type": "object"
            },
            "ApiSchedulerLogsResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SchedulerWithLogs"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiSchedulerAndTargetsResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SchedulerAndTargets"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ScheduledJobs": {
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "date": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": ["id", "date"],
                "type": "object"
            },
            "ApiScheduledJobsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ScheduledJobs"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiJobStatusResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "details": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Record_string.any_"
                                    }
                                ],
                                "nullable": true
                            },
                            "status": {
                                "$ref": "#/components/schemas/SchedulerJobStatus"
                            }
                        },
                        "required": ["details", "status"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiTestSchedulerResponse": {
                "properties": {
                    "results": {
                        "properties": {
                            "jobId": {
                                "type": "string"
                            }
                        },
                        "required": ["jobId"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ShareUrl": {
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "shareUrl": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "createdByUserUuid": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "params": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "description": "The URL path of the full URL"
                    },
                    "nanoid": {
                        "type": "string",
                        "description": "Unique shareable id"
                    }
                },
                "required": ["params", "path", "nanoid"],
                "type": "object",
                "description": "A ShareUrl maps a short shareable id to a full URL\nin the Lightdash UI. This allows very long URLs\nto be represented by short ids."
            },
            "ApiShareResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/ShareUrl"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_ShareUrl.path-or-params_": {
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The URL path of the full URL"
                    },
                    "params": {
                        "type": "string"
                    }
                },
                "required": ["path", "params"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateShareUrl": {
                "$ref": "#/components/schemas/Pick_ShareUrl.path-or-params_",
                "description": "Contains the detail of a full URL to generate a short URL id"
            },
            "SlackChannel": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "required": ["name", "id"],
                "type": "object"
            },
            "ApiSlackChannelsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/SlackChannel"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            },
            "ApiSlackCustomSettingsResponse": {
                "properties": {
                    "results": {},
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SlackChannelProjectMapping": {
                "properties": {
                    "slackChannelId": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    }
                },
                "required": ["slackChannelId", "projectUuid"],
                "type": "object"
            },
            "SlackAppCustomSettings": {
                "properties": {
                    "slackChannelProjectMappings": {
                        "items": {
                            "$ref": "#/components/schemas/SlackChannelProjectMapping"
                        },
                        "type": "array"
                    },
                    "appProfilePhotoUrl": {
                        "type": "string",
                        "nullable": true
                    },
                    "notificationChannel": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["appProfilePhotoUrl", "notificationChannel"],
                "type": "object"
            },
            "SpaceDashboard": {
                "$ref": "#/components/schemas/DashboardBasicDetails"
            },
            "SpaceGroup": {
                "properties": {
                    "spaceRole": {
                        "$ref": "#/components/schemas/SpaceMemberRole"
                    },
                    "groupName": {
                        "type": "string"
                    },
                    "groupUuid": {
                        "type": "string"
                    }
                },
                "required": ["spaceRole", "groupName", "groupUuid"],
                "type": "object"
            },
            "Space": {
                "properties": {
                    "slug": {
                        "type": "string"
                    },
                    "pinnedListOrder": {
                        "type": "number",
                        "format": "double",
                        "nullable": true
                    },
                    "pinnedListUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "groupsAccess": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceGroup"
                        },
                        "type": "array"
                    },
                    "access": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceShare"
                        },
                        "type": "array"
                    },
                    "dashboards": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceDashboard"
                        },
                        "type": "array"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "queries": {
                        "items": {
                            "$ref": "#/components/schemas/SpaceQuery"
                        },
                        "type": "array"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "slug",
                    "pinnedListOrder",
                    "pinnedListUuid",
                    "groupsAccess",
                    "access",
                    "dashboards",
                    "projectUuid",
                    "queries",
                    "isPrivate",
                    "name",
                    "uuid",
                    "organizationUuid"
                ],
                "type": "object"
            },
            "ApiSpaceResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Space"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_SpaceShare.userUuid-or-role_": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    },
                    "role": {
                        "$ref": "#/components/schemas/SpaceMemberRole"
                    }
                },
                "required": ["userUuid", "role"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "CreateSpace": {
                "properties": {
                    "access": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SpaceShare.userUuid-or-role_"
                        },
                        "type": "array"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["name"],
                "type": "object"
            },
            "UpdateSpace": {
                "properties": {
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["isPrivate", "name"],
                "type": "object"
            },
            "AddSpaceUserAccess": {
                "properties": {
                    "spaceRole": {
                        "$ref": "#/components/schemas/SpaceMemberRole"
                    },
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": ["spaceRole", "userUuid"],
                "type": "object"
            },
            "AddSpaceGroupAccess": {
                "properties": {
                    "spaceRole": {
                        "$ref": "#/components/schemas/SpaceMemberRole"
                    },
                    "groupUuid": {
                        "type": "string"
                    }
                },
                "required": ["spaceRole", "groupUuid"],
                "type": "object"
            },
            "PartitionType": {
                "enum": ["DATE", "RANGE"],
                "type": "string"
            },
            "PartitionColumn": {
                "properties": {
                    "field": {
                        "type": "string"
                    },
                    "partitionType": {
                        "$ref": "#/components/schemas/PartitionType"
                    }
                },
                "required": ["field", "partitionType"],
                "type": "object"
            },
            "WarehouseTablesCatalog": {
                "properties": {},
                "additionalProperties": {
                    "properties": {},
                    "additionalProperties": {
                        "properties": {},
                        "additionalProperties": {
                            "properties": {
                                "partitionColumn": {
                                    "$ref": "#/components/schemas/PartitionColumn"
                                }
                            },
                            "type": "object"
                        },
                        "type": "object"
                    },
                    "type": "object"
                },
                "type": "object"
            },
            "ApiWarehouseTablesCatalog": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/WarehouseTablesCatalog"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "WarehouseTableSchema": {
                "properties": {},
                "additionalProperties": {
                    "$ref": "#/components/schemas/DimensionType"
                },
                "type": "object"
            },
            "ApiWarehouseTableFields": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/WarehouseTableSchema"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SqlRunnerBody": {
                "properties": {
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sql": {
                        "type": "string"
                    }
                },
                "required": ["sql"],
                "type": "object"
            },
            "VizIndexType": {
                "enum": ["time", "category"],
                "type": "string"
            },
            "PivotIndexColum": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/VizIndexType"
                    },
                    "reference": {
                        "type": "string"
                    }
                },
                "required": ["type", "reference"],
                "type": "object"
            },
            "VizAggregationOptions": {
                "enum": ["sum", "count", "avg", "min", "max", "any"],
                "type": "string"
            },
            "SortByDirection": {
                "enum": ["ASC", "DESC"],
                "type": "string"
            },
            "VizSortBy": {
                "properties": {
                    "direction": {
                        "$ref": "#/components/schemas/SortByDirection"
                    },
                    "reference": {
                        "type": "string"
                    }
                },
                "required": ["direction", "reference"],
                "type": "object"
            },
            "ApiSqlRunnerPivotQueryPayload": {
                "properties": {
                    "sortBy": {
                        "items": {
                            "$ref": "#/components/schemas/VizSortBy"
                        },
                        "type": "array"
                    },
                    "groupByColumns": {
                        "items": {
                            "properties": {
                                "reference": {
                                    "type": "string"
                                }
                            },
                            "required": ["reference"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "valuesColumns": {
                        "items": {
                            "properties": {
                                "aggregation": {
                                    "$ref": "#/components/schemas/VizAggregationOptions"
                                },
                                "reference": {
                                    "type": "string"
                                }
                            },
                            "required": ["aggregation", "reference"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "indexColumn": {
                        "$ref": "#/components/schemas/PivotIndexColum"
                    },
                    "savedSqlUuid": {
                        "type": "string"
                    }
                },
                "required": ["valuesColumns", "indexColumn"],
                "type": "object"
            },
            "SqlRunnerPivotQueryBody": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SqlRunnerBody"
                    },
                    {
                        "$ref": "#/components/schemas/ApiSqlRunnerPivotQueryPayload"
                    }
                ]
            },
            "VizBaseConfig": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/ChartKind"
                    },
                    "metadata": {
                        "properties": {
                            "version": {
                                "type": "number",
                                "format": "double"
                            }
                        },
                        "required": ["version"],
                        "type": "object"
                    }
                },
                "required": ["type", "metadata"],
                "type": "object"
            },
            "ChartKind.VERTICAL_BAR": {
                "enum": ["vertical_bar"],
                "type": "string"
            },
            "ChartKind.LINE": {
                "enum": ["line"],
                "type": "string"
            },
            "PivotChartLayout": {
                "properties": {
                    "sortBy": {
                        "items": {
                            "$ref": "#/components/schemas/VizSortBy"
                        },
                        "type": "array"
                    },
                    "groupBy": {
                        "items": {
                            "properties": {
                                "reference": {
                                    "type": "string"
                                }
                            },
                            "required": ["reference"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "y": {
                        "items": {
                            "properties": {
                                "aggregation": {
                                    "$ref": "#/components/schemas/VizAggregationOptions"
                                },
                                "reference": {
                                    "type": "string"
                                }
                            },
                            "required": ["aggregation", "reference"],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "x": {
                        "properties": {
                            "type": {
                                "$ref": "#/components/schemas/VizIndexType"
                            },
                            "reference": {
                                "type": "string"
                            }
                        },
                        "required": ["type", "reference"],
                        "type": "object"
                    }
                },
                "required": ["y"],
                "type": "object"
            },
            "CartesianSeriesType.LINE": {
                "enum": ["line"],
                "type": "string"
            },
            "CartesianSeriesType.BAR": {
                "enum": ["bar"],
                "type": "string"
            },
            "ValueLabelPositionOptions": {
                "enum": ["hidden", "top", "bottom", "left", "right", "inside"],
                "type": "string"
            },
            "CartesianChartDisplay": {
                "properties": {
                    "stack": {
                        "type": "boolean"
                    },
                    "legend": {
                        "properties": {
                            "align": {
                                "type": "string",
                                "enum": ["start", "center", "end"]
                            },
                            "position": {
                                "type": "string",
                                "enum": ["top", "bottom", "left", "right"]
                            }
                        },
                        "required": ["align", "position"],
                        "type": "object"
                    },
                    "series": {
                        "properties": {},
                        "additionalProperties": {
                            "properties": {
                                "valueLabelPosition": {
                                    "$ref": "#/components/schemas/ValueLabelPositionOptions"
                                },
                                "type": {
                                    "anyOf": [
                                        {
                                            "$ref": "#/components/schemas/CartesianSeriesType.LINE"
                                        },
                                        {
                                            "$ref": "#/components/schemas/CartesianSeriesType.BAR"
                                        }
                                    ]
                                },
                                "color": {
                                    "type": "string"
                                },
                                "yAxisIndex": {
                                    "type": "number",
                                    "format": "double"
                                },
                                "format": {
                                    "$ref": "#/components/schemas/Format"
                                },
                                "label": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "object"
                    },
                    "yAxis": {
                        "items": {
                            "properties": {
                                "format": {
                                    "$ref": "#/components/schemas/Format"
                                },
                                "position": {
                                    "type": "string"
                                },
                                "label": {
                                    "type": "string"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "xAxis": {
                        "properties": {
                            "type": {
                                "$ref": "#/components/schemas/VizIndexType"
                            },
                            "label": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "VizCartesianChartConfig": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VizBaseConfig"
                    },
                    {
                        "properties": {
                            "display": {
                                "$ref": "#/components/schemas/CartesianChartDisplay"
                            },
                            "fieldConfig": {
                                "$ref": "#/components/schemas/PivotChartLayout"
                            },
                            "type": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/ChartKind.VERTICAL_BAR"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ChartKind.LINE"
                                    }
                                ]
                            }
                        },
                        "required": ["type"],
                        "type": "object"
                    }
                ]
            },
            "ChartKind.PIE": {
                "enum": ["pie"],
                "type": "string"
            },
            "VizPieChartDisplay": {
                "properties": {
                    "isDonut": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "VizPieChartConfig": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VizBaseConfig"
                    },
                    {
                        "properties": {
                            "display": {
                                "$ref": "#/components/schemas/VizPieChartDisplay"
                            },
                            "fieldConfig": {
                                "$ref": "#/components/schemas/PivotChartLayout"
                            },
                            "type": {
                                "$ref": "#/components/schemas/ChartKind.PIE"
                            }
                        },
                        "required": ["type"],
                        "type": "object"
                    }
                ]
            },
            "ChartKind.TABLE": {
                "enum": ["table"],
                "type": "string"
            },
            "VizColumnConfig": {
                "properties": {
                    "aggregation": {
                        "$ref": "#/components/schemas/VizAggregationOptions"
                    },
                    "order": {
                        "type": "number",
                        "format": "double"
                    },
                    "frozen": {
                        "type": "boolean"
                    },
                    "label": {
                        "type": "string"
                    },
                    "reference": {
                        "type": "string"
                    },
                    "visible": {
                        "type": "boolean"
                    }
                },
                "required": ["frozen", "label", "reference", "visible"],
                "type": "object"
            },
            "VizColumnsConfig": {
                "properties": {},
                "additionalProperties": {
                    "$ref": "#/components/schemas/VizColumnConfig"
                },
                "type": "object"
            },
            "VizTableDisplay": {
                "properties": {},
                "type": "object"
            },
            "VizTableConfig": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VizBaseConfig"
                    },
                    {
                        "properties": {
                            "display": {
                                "$ref": "#/components/schemas/VizTableDisplay"
                            },
                            "columns": {
                                "$ref": "#/components/schemas/VizColumnsConfig"
                            },
                            "type": {
                                "$ref": "#/components/schemas/ChartKind.TABLE"
                            }
                        },
                        "required": ["columns", "type"],
                        "type": "object"
                    }
                ]
            },
            "Pick_SpaceSummary.uuid-or-name-or-isPrivate-or-userAccess_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "isPrivate": {
                        "type": "boolean"
                    },
                    "userAccess": {
                        "$ref": "#/components/schemas/SpaceShare"
                    }
                },
                "required": ["name", "uuid", "isPrivate"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_Dashboard.uuid-or-name_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": ["name", "uuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_Project.projectUuid_": {
                "properties": {
                    "projectUuid": {
                        "type": "string"
                    }
                },
                "required": ["projectUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_Organization.organizationUuid_": {
                "properties": {
                    "organizationUuid": {
                        "type": "string",
                        "description": "The unique identifier of the organization",
                        "format": "uuid"
                    }
                },
                "required": ["organizationUuid"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "SqlChart": {
                "properties": {
                    "lastViewedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "firstViewedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/Pick_Organization.organizationUuid_"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Pick_Project.projectUuid_"
                    },
                    "dashboard": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_Dashboard.uuid-or-name_"
                            }
                        ],
                        "nullable": true
                    },
                    "space": {
                        "$ref": "#/components/schemas/Pick_SpaceSummary.uuid-or-name-or-isPrivate-or-userAccess_"
                    },
                    "lastUpdatedBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "chartKind": {
                        "$ref": "#/components/schemas/ChartKind"
                    },
                    "config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VizBaseConfig"
                            },
                            {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/VizCartesianChartConfig"
                                    },
                                    {
                                        "$ref": "#/components/schemas/VizPieChartConfig"
                                    },
                                    {
                                        "$ref": "#/components/schemas/VizTableConfig"
                                    }
                                ]
                            }
                        ]
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "savedSqlUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "lastViewedAt",
                    "firstViewedAt",
                    "views",
                    "organization",
                    "project",
                    "dashboard",
                    "space",
                    "lastUpdatedBy",
                    "lastUpdatedAt",
                    "createdBy",
                    "createdAt",
                    "chartKind",
                    "config",
                    "limit",
                    "sql",
                    "slug",
                    "description",
                    "name",
                    "savedSqlUuid"
                ],
                "type": "object"
            },
            "ApiSqlChart": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SqlChart"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiCreateSqlChart": {
                "properties": {
                    "results": {
                        "properties": {
                            "slug": {
                                "type": "string"
                            },
                            "savedSqlUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["slug", "savedSqlUuid"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "VizBarChartConfig": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VizBaseConfig"
                    },
                    {
                        "properties": {
                            "display": {
                                "$ref": "#/components/schemas/CartesianChartDisplay"
                            },
                            "fieldConfig": {
                                "$ref": "#/components/schemas/PivotChartLayout"
                            },
                            "type": {
                                "$ref": "#/components/schemas/ChartKind.VERTICAL_BAR"
                            }
                        },
                        "required": ["type"],
                        "type": "object"
                    }
                ]
            },
            "VizLineChartConfig": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/VizBaseConfig"
                    },
                    {
                        "properties": {
                            "display": {
                                "$ref": "#/components/schemas/CartesianChartDisplay"
                            },
                            "fieldConfig": {
                                "$ref": "#/components/schemas/PivotChartLayout"
                            },
                            "type": {
                                "$ref": "#/components/schemas/ChartKind.LINE"
                            }
                        },
                        "required": ["type"],
                        "type": "object"
                    }
                ]
            },
            "AllVizChartConfig": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/VizBarChartConfig"
                    },
                    {
                        "$ref": "#/components/schemas/VizLineChartConfig"
                    },
                    {
                        "$ref": "#/components/schemas/VizPieChartConfig"
                    },
                    {
                        "$ref": "#/components/schemas/VizTableConfig"
                    }
                ]
            },
            "CreateSqlChart": {
                "properties": {
                    "spaceUuid": {
                        "type": "string"
                    },
                    "config": {
                        "$ref": "#/components/schemas/AllVizChartConfig"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "spaceUuid",
                    "config",
                    "limit",
                    "sql",
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "ApiUpdateSqlChart": {
                "properties": {
                    "results": {
                        "properties": {
                            "savedSqlVersionUuid": {
                                "type": "string",
                                "nullable": true
                            },
                            "savedSqlUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["savedSqlVersionUuid", "savedSqlUuid"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "UpdateUnversionedSqlChart": {
                "properties": {
                    "spaceUuid": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["spaceUuid", "description", "name"],
                "type": "object"
            },
            "UpdateVersionedSqlChart": {
                "properties": {
                    "config": {
                        "$ref": "#/components/schemas/AllVizChartConfig"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sql": {
                        "type": "string"
                    }
                },
                "required": ["config", "limit", "sql"],
                "type": "object"
            },
            "UpdateSqlChart": {
                "properties": {
                    "versionedData": {
                        "$ref": "#/components/schemas/UpdateVersionedSqlChart"
                    },
                    "unversionedData": {
                        "$ref": "#/components/schemas/UpdateUnversionedSqlChart"
                    }
                },
                "type": "object"
            },
            "Pick_Explore.name_": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ApiCreateVirtualView": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Pick_Explore.name_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "VizColumn": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/DimensionType"
                    },
                    "reference": {
                        "type": "string"
                    }
                },
                "required": ["reference"],
                "type": "object"
            },
            "CreateVirtualViewPayload": {
                "properties": {
                    "columns": {
                        "items": {
                            "$ref": "#/components/schemas/VizColumn"
                        },
                        "type": "array"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["columns", "sql", "name"],
                "type": "object"
            },
            "UpdateVirtualViewPayload": {
                "$ref": "#/components/schemas/CreateVirtualViewPayload"
            },
            "ApiGithubDbtWritePreview": {
                "properties": {
                    "results": {
                        "properties": {
                            "owner": {
                                "type": "string"
                            },
                            "files": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "path": {
                                "type": "string"
                            },
                            "repo": {
                                "type": "string"
                            },
                            "url": {
                                "type": "string"
                            }
                        },
                        "required": ["owner", "files", "path", "repo", "url"],
                        "type": "object"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiGithubDbtWriteBack": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/PullRequestCreated"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_SshKeyPair.publicKey_": {
                "properties": {
                    "publicKey": {
                        "type": "string"
                    }
                },
                "required": ["publicKey"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "ApiSshKeyPairResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/Pick_SshKeyPair.publicKey_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "UserAttributeValue": {
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "userUuid": {
                        "type": "string"
                    }
                },
                "required": ["value", "email", "userUuid"],
                "type": "object"
            },
            "GroupAttributeValue": {
                "properties": {
                    "value": {
                        "type": "string"
                    },
                    "groupUuid": {
                        "type": "string"
                    }
                },
                "required": ["value", "groupUuid"],
                "type": "object"
            },
            "UserAttribute": {
                "properties": {
                    "attributeDefault": {
                        "type": "string",
                        "nullable": true
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/GroupAttributeValue"
                        },
                        "type": "array"
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/UserAttributeValue"
                        },
                        "type": "array"
                    },
                    "description": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "attributeDefault",
                    "groups",
                    "users",
                    "organizationUuid",
                    "name",
                    "createdAt",
                    "uuid"
                ],
                "type": "object"
            },
            "ApiUserAttributesResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/UserAttribute"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiCreateUserAttributeResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/UserAttribute"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_UserAttribute.name-or-description-or-attributeDefault_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "attributeDefault": {
                        "type": "string",
                        "nullable": true
                    }
                },
                "required": ["name", "attributeDefault"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_UserAttributeValue.Exclude_keyofUserAttributeValue.email__": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "required": ["userUuid", "value"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_UserAttributeValue.email_": {
                "$ref": "#/components/schemas/Pick_UserAttributeValue.Exclude_keyofUserAttributeValue.email__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "CreateUserAttributeValue": {
                "$ref": "#/components/schemas/Omit_UserAttributeValue.email_"
            },
            "CreateGroupAttributeValue": {
                "$ref": "#/components/schemas/GroupAttributeValue"
            },
            "CreateUserAttribute": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_UserAttribute.name-or-description-or-attributeDefault_"
                    },
                    {
                        "properties": {
                            "groups": {
                                "items": {
                                    "$ref": "#/components/schemas/CreateGroupAttributeValue"
                                },
                                "type": "array"
                            },
                            "users": {
                                "items": {
                                    "$ref": "#/components/schemas/CreateUserAttributeValue"
                                },
                                "type": "array"
                            }
                        },
                        "required": ["groups", "users"],
                        "type": "object"
                    }
                ]
            },
            "LightdashUser": {
                "properties": {
                    "userUuid": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    },
                    "organizationName": {
                        "type": "string"
                    },
                    "organizationCreatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isTrackingAnonymized": {
                        "type": "boolean"
                    },
                    "isMarketingOptedIn": {
                        "type": "boolean"
                    },
                    "isSetupComplete": {
                        "type": "boolean"
                    },
                    "role": {
                        "$ref": "#/components/schemas/OrganizationMemberRole"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "isActive": {
                        "type": "boolean",
                        "description": "Whether the user can login"
                    },
                    "isPending": {
                        "type": "boolean",
                        "description": "Whether the user doesn't have an authentication method (password or openId)"
                    }
                },
                "required": [
                    "userUuid",
                    "firstName",
                    "lastName",
                    "isTrackingAnonymized",
                    "isMarketingOptedIn",
                    "isSetupComplete",
                    "createdAt",
                    "updatedAt",
                    "isActive"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ApiGetAuthenticatedUserResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/LightdashUser"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object",
                "description": "Shows the authenticated user"
            },
            "ApiRegisterUserResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/LightdashUser"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ActivateUser": {
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    }
                },
                "required": ["password", "lastName", "firstName"],
                "type": "object"
            },
            "ActivateUserWithInviteCode": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ActivateUser"
                    },
                    {
                        "properties": {
                            "inviteCode": {
                                "type": "string"
                            }
                        },
                        "required": ["inviteCode"],
                        "type": "object"
                    }
                ]
            },
            "Email": {
                "type": "string",
                "description": "Email",
                "pattern": "^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"
            },
            "CreateUserArgs": {
                "properties": {
                    "password": {
                        "type": "string"
                    },
                    "email": {
                        "$ref": "#/components/schemas/Email"
                    },
                    "lastName": {
                        "type": "string"
                    },
                    "firstName": {
                        "type": "string"
                    }
                },
                "required": ["password", "email", "lastName", "firstName"],
                "type": "object"
            },
            "RegisterOrActivateUser": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ActivateUserWithInviteCode"
                    },
                    {
                        "$ref": "#/components/schemas/CreateUserArgs"
                    }
                ]
            },
            "EmailOneTimePassword": {
                "properties": {
                    "numberOfAttempts": {
                        "type": "number",
                        "format": "double",
                        "description": "Number of times the passcode has been attempted"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Time that the passcode was created"
                    }
                },
                "required": ["numberOfAttempts", "createdAt"],
                "type": "object"
            },
            "EmailStatus": {
                "properties": {
                    "otp": {
                        "$ref": "#/components/schemas/EmailOneTimePassword"
                    },
                    "isVerified": {
                        "type": "boolean"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "required": ["isVerified", "email"],
                "type": "object"
            },
            "EmailOneTimePasswordExpiring": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmailOneTimePassword"
                    },
                    {
                        "properties": {
                            "isMaxAttempts": {
                                "type": "boolean"
                            },
                            "isExpired": {
                                "type": "boolean"
                            },
                            "expiresAt": {
                                "type": "string",
                                "format": "date-time"
                            }
                        },
                        "required": ["isMaxAttempts", "isExpired", "expiresAt"],
                        "type": "object"
                    }
                ]
            },
            "EmailStatusExpiring": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/EmailStatus"
                    },
                    {
                        "properties": {
                            "otp": {
                                "$ref": "#/components/schemas/EmailOneTimePasswordExpiring",
                                "description": "One time passcode information\nIf there is no active passcode, this will be undefined"
                            }
                        },
                        "type": "object"
                    }
                ],
                "description": "Verification status of an email address"
            },
            "ApiEmailStatusResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/EmailStatusExpiring"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object",
                "description": "Shows the current verification status of an email address"
            },
            "UserAllowedOrganization": {
                "properties": {
                    "membersCount": {
                        "type": "number",
                        "format": "double"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationUuid": {
                        "type": "string"
                    }
                },
                "required": ["membersCount", "name", "organizationUuid"],
                "type": "object"
            },
            "ApiUserAllowedOrganizationsResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/UserAllowedOrganization"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "Pick_CreateRedshiftCredentials.type-or-user-or-password_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.REDSHIFT"
                    },
                    "user": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": ["type", "user", "password"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreatePostgresCredentials.type-or-user-or-password_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.POSTGRES"
                    },
                    "user": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": ["type", "user", "password"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreateSnowflakeCredentials.type-or-user-or-password_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.SNOWFLAKE"
                    },
                    "user": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": ["type", "user"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreateTrinoCredentials.type-or-user-or-password_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.TRINO"
                    },
                    "user": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "required": ["type", "user", "password"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreateBigqueryCredentials.type-or-keyfileContents_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.BIGQUERY"
                    },
                    "keyfileContents": {
                        "$ref": "#/components/schemas/Record_string.string_"
                    }
                },
                "required": ["type", "keyfileContents"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_CreateDatabricksCredentials.type-or-personalAccessToken_": {
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/WarehouseTypes.DATABRICKS"
                    },
                    "personalAccessToken": {
                        "type": "string"
                    }
                },
                "required": ["type", "personalAccessToken"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "UpsertUserWarehouseCredentials": {
                "properties": {
                    "credentials": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/Pick_CreateRedshiftCredentials.type-or-user-or-password_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreatePostgresCredentials.type-or-user-or-password_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreateSnowflakeCredentials.type-or-user-or-password_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreateTrinoCredentials.type-or-user-or-password_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreateBigqueryCredentials.type-or-keyfileContents_"
                            },
                            {
                                "$ref": "#/components/schemas/Pick_CreateDatabricksCredentials.type-or-personalAccessToken_"
                            }
                        ]
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["credentials", "name"],
                "type": "object"
            },
            "OpenIdIdentityIssuerType": {
                "enum": ["google", "okta", "oneLogin", "azuread", "oidc"],
                "type": "string"
            },
            "LocalIssuerTypes": {
                "enum": ["email", "apiToken"],
                "type": "string"
            },
            "LoginOptionTypes": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OpenIdIdentityIssuerType"
                    },
                    {
                        "$ref": "#/components/schemas/LocalIssuerTypes"
                    }
                ]
            },
            "LoginOptions": {
                "properties": {
                    "redirectUri": {
                        "type": "string"
                    },
                    "forceRedirect": {
                        "type": "boolean"
                    },
                    "showOptions": {
                        "items": {
                            "$ref": "#/components/schemas/LoginOptionTypes"
                        },
                        "type": "array"
                    }
                },
                "required": ["showOptions"],
                "type": "object"
            },
            "ApiGetLoginOptionsResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/LoginOptions"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "PersonalAccessToken": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "rotatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "lastUsedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "description",
                    "expiresAt",
                    "rotatedAt",
                    "lastUsedAt",
                    "createdAt",
                    "uuid"
                ],
                "type": "object"
            },
            "PersonalAccessTokenWithToken": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PersonalAccessToken"
                    },
                    {
                        "properties": {
                            "token": {
                                "type": "string"
                            }
                        },
                        "required": ["token"],
                        "type": "object"
                    }
                ]
            },
            "ContentType.CHART": {
                "enum": ["chart"],
                "type": "string"
            },
            "ContentType": {
                "enum": ["chart", "dashboard"],
                "type": "string"
            },
            "ChartContent": {
                "properties": {
                    "contentType": {
                        "$ref": "#/components/schemas/ContentType.CHART"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "properties": {
                            "lastName": {
                                "type": "string"
                            },
                            "firstName": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["lastName", "firstName", "uuid"],
                        "type": "object",
                        "nullable": true
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "lastUpdatedBy": {
                        "properties": {
                            "lastName": {
                                "type": "string"
                            },
                            "firstName": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["lastName", "firstName", "uuid"],
                        "type": "object",
                        "nullable": true
                    },
                    "project": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object"
                    },
                    "organization": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object"
                    },
                    "space": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object"
                    },
                    "pinnedList": {
                        "properties": {
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["uuid"],
                        "type": "object",
                        "nullable": true
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "source": {
                        "$ref": "#/components/schemas/ChartSourceType"
                    },
                    "chartKind": {
                        "$ref": "#/components/schemas/ChartKind"
                    },
                    "dashboard": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object",
                        "nullable": true
                    }
                },
                "required": [
                    "contentType",
                    "uuid",
                    "slug",
                    "name",
                    "description",
                    "createdAt",
                    "createdBy",
                    "lastUpdatedAt",
                    "lastUpdatedBy",
                    "project",
                    "organization",
                    "space",
                    "pinnedList",
                    "views",
                    "firstViewedAt",
                    "source",
                    "chartKind",
                    "dashboard"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "ContentType.DASHBOARD": {
                "enum": ["dashboard"],
                "type": "string"
            },
            "DashboardContent": {
                "properties": {
                    "contentType": {
                        "$ref": "#/components/schemas/ContentType.DASHBOARD"
                    },
                    "uuid": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "properties": {
                            "lastName": {
                                "type": "string"
                            },
                            "firstName": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["lastName", "firstName", "uuid"],
                        "type": "object",
                        "nullable": true
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    },
                    "lastUpdatedBy": {
                        "properties": {
                            "lastName": {
                                "type": "string"
                            },
                            "firstName": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["lastName", "firstName", "uuid"],
                        "type": "object",
                        "nullable": true
                    },
                    "project": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object"
                    },
                    "organization": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object"
                    },
                    "space": {
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["name", "uuid"],
                        "type": "object"
                    },
                    "pinnedList": {
                        "properties": {
                            "uuid": {
                                "type": "string"
                            }
                        },
                        "required": ["uuid"],
                        "type": "object",
                        "nullable": true
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "firstViewedAt": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": true
                    }
                },
                "required": [
                    "contentType",
                    "uuid",
                    "slug",
                    "name",
                    "description",
                    "createdAt",
                    "createdBy",
                    "lastUpdatedAt",
                    "lastUpdatedBy",
                    "project",
                    "organization",
                    "space",
                    "pinnedList",
                    "views",
                    "firstViewedAt"
                ],
                "type": "object",
                "additionalProperties": true
            },
            "SummaryContent": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ChartContent"
                    },
                    {
                        "$ref": "#/components/schemas/DashboardContent"
                    }
                ]
            },
            "KnexPaginatedData_SummaryContent-Array_": {
                "properties": {
                    "pagination": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/KnexPaginateArgs"
                            },
                            {
                                "properties": {
                                    "totalResults": {
                                        "type": "number",
                                        "format": "double"
                                    },
                                    "totalPageCount": {
                                        "type": "number",
                                        "format": "double"
                                    }
                                },
                                "required": ["totalResults", "totalPageCount"],
                                "type": "object"
                            }
                        ]
                    },
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/SummaryContent"
                        },
                        "type": "array"
                    }
                },
                "required": ["data"],
                "type": "object"
            },
            "ApiContentResponse": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/KnexPaginatedData_SummaryContent-Array_"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SemanticLayerClientInfo": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "features": {
                        "properties": {
                            "views": {
                                "type": "boolean"
                            }
                        },
                        "required": ["views"],
                        "type": "object"
                    },
                    "config": {
                        "properties": {
                            "maxQueryLimit": {
                                "type": "number",
                                "format": "double"
                            }
                        },
                        "required": ["maxQueryLimit"],
                        "type": "object"
                    }
                },
                "required": ["name", "features", "config"],
                "type": "object",
                "additionalProperties": true
            },
            "ApiSemanticLayerClientInfo": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    },
                    "results": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SemanticLayerClientInfo"
                            }
                        ],
                        "nullable": true
                    }
                },
                "required": ["status", "results"],
                "type": "object",
                "additionalProperties": true
            },
            "SemanticLayerView": {
                "properties": {
                    "visible": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["visible", "label", "name"],
                "type": "object"
            },
            "SemanticLayerFieldType": {
                "enum": ["time", "number", "string", "boolean"],
                "type": "string"
            },
            "SemanticLayerTimeGranularity": {
                "enum": [
                    "NANOSECOND",
                    "MICROSECOND",
                    "MILLISECOND",
                    "SECOND",
                    "MINUTE",
                    "HOUR",
                    "DAY",
                    "WEEK",
                    "MONTH",
                    "QUARTER",
                    "YEAR"
                ],
                "type": "string"
            },
            "SemanticLayerFilterBaseOperator": {
                "enum": ["IS", "IS_NOT"],
                "type": "string"
            },
            "SemanticLayerField": {
                "properties": {
                    "availableOperators": {
                        "items": {
                            "$ref": "#/components/schemas/SemanticLayerFilterBaseOperator"
                        },
                        "type": "array"
                    },
                    "availableGranularities": {
                        "items": {
                            "$ref": "#/components/schemas/SemanticLayerTimeGranularity"
                        },
                        "type": "array"
                    },
                    "aggType": {
                        "$ref": "#/components/schemas/VizAggregationOptions"
                    },
                    "visible": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/FieldType"
                    },
                    "type": {
                        "$ref": "#/components/schemas/SemanticLayerFieldType"
                    },
                    "label": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "availableOperators",
                    "availableGranularities",
                    "visible",
                    "kind",
                    "type",
                    "label",
                    "name"
                ],
                "type": "object"
            },
            "Pick_SemanticLayerField.name_": {
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_SemanticLayerTimeDimension.name-or-granularity_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "granularity": {
                        "$ref": "#/components/schemas/SemanticLayerTimeGranularity"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_SemanticLayerQuery.dimensions-or-timeDimensions-or-metrics_": {
                "properties": {
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SemanticLayerField.name_"
                        },
                        "type": "array"
                    },
                    "timeDimensions": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SemanticLayerTimeDimension.name-or-granularity_"
                        },
                        "type": "array"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SemanticLayerField.name_"
                        },
                        "type": "array"
                    }
                },
                "required": ["dimensions", "timeDimensions", "metrics"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Pick_SemanticLayerField.name-or-kind_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "kind": {
                        "$ref": "#/components/schemas/FieldType"
                    }
                },
                "required": ["name", "kind"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "SemanticLayerSortBy": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Pick_SemanticLayerField.name-or-kind_"
                    },
                    {
                        "properties": {
                            "direction": {
                                "$ref": "#/components/schemas/SortByDirection"
                            }
                        },
                        "required": ["direction"],
                        "type": "object"
                    }
                ]
            },
            "SemanticLayerPivot": {
                "properties": {
                    "values": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "index": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "on": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": ["values", "index", "on"],
                "type": "object"
            },
            "SemanticLayerFilterBase": {
                "properties": {
                    "fieldType": {
                        "$ref": "#/components/schemas/SemanticLayerFieldType"
                    },
                    "fieldKind": {
                        "$ref": "#/components/schemas/FieldType"
                    },
                    "fieldRef": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string"
                    }
                },
                "required": ["fieldType", "fieldKind", "fieldRef", "uuid"],
                "type": "object"
            },
            "SemanticLayerFieldType.STRING": {
                "enum": ["string"],
                "type": "string"
            },
            "SemanticLayerStringFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SemanticLayerFilterBase"
                    },
                    {
                        "properties": {
                            "values": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            "operator": {
                                "$ref": "#/components/schemas/SemanticLayerFilterBaseOperator"
                            },
                            "fieldType": {
                                "$ref": "#/components/schemas/SemanticLayerFieldType.STRING"
                            }
                        },
                        "required": ["values", "operator", "fieldType"],
                        "type": "object"
                    }
                ]
            },
            "SemanticLayerFieldType.TIME": {
                "enum": ["time"],
                "type": "string"
            },
            "SemanticLayerExactTimeFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SemanticLayerFilterBase"
                    },
                    {
                        "properties": {
                            "values": {
                                "properties": {
                                    "time": {
                                        "type": "string"
                                    }
                                },
                                "required": ["time"],
                                "type": "object"
                            },
                            "operator": {
                                "$ref": "#/components/schemas/SemanticLayerFilterBaseOperator"
                            },
                            "fieldType": {
                                "$ref": "#/components/schemas/SemanticLayerFieldType.TIME"
                            }
                        },
                        "required": ["values", "operator", "fieldType"],
                        "type": "object"
                    }
                ]
            },
            "SemanticLayerFilterRelativeTimeValue": {
                "enum": ["TODAY", "YESTERDAY", "LAST_7_DAYS", "LAST_30_DAYS"],
                "type": "string"
            },
            "SemanticLayerRelativeTimeFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SemanticLayerFilterBase"
                    },
                    {
                        "properties": {
                            "values": {
                                "properties": {
                                    "relativeTime": {
                                        "$ref": "#/components/schemas/SemanticLayerFilterRelativeTimeValue"
                                    }
                                },
                                "required": ["relativeTime"],
                                "type": "object"
                            },
                            "operator": {
                                "$ref": "#/components/schemas/SemanticLayerFilterBaseOperator"
                            },
                            "fieldType": {
                                "$ref": "#/components/schemas/SemanticLayerFieldType.TIME"
                            }
                        },
                        "required": ["values", "operator", "fieldType"],
                        "type": "object"
                    }
                ]
            },
            "SemanticLayerTimeFilter": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/SemanticLayerExactTimeFilter"
                    },
                    {
                        "$ref": "#/components/schemas/SemanticLayerRelativeTimeFilter"
                    }
                ]
            },
            "SemanticLayerFilterTypes": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/SemanticLayerStringFilter"
                    },
                    {
                        "$ref": "#/components/schemas/SemanticLayerTimeFilter"
                    }
                ]
            },
            "SemanticLayerFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/SemanticLayerFilterTypes"
                    },
                    {
                        "properties": {
                            "or": {
                                "items": {
                                    "$ref": "#/components/schemas/SemanticLayerFilter"
                                },
                                "type": "array"
                            },
                            "and": {
                                "items": {
                                    "$ref": "#/components/schemas/SemanticLayerFilter"
                                },
                                "type": "array"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "Pick_SemanticLayerField.name-or-aggType_": {
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "aggType": {
                        "$ref": "#/components/schemas/VizAggregationOptions"
                    }
                },
                "required": ["name"],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "SemanticLayerQuery": {
                "properties": {
                    "customMetrics": {
                        "items": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/Pick_SemanticLayerField.name-or-aggType_"
                                },
                                {
                                    "properties": {
                                        "baseDimension": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "type": "array"
                    },
                    "sql": {
                        "type": "string"
                    },
                    "filters": {
                        "items": {
                            "$ref": "#/components/schemas/SemanticLayerFilter"
                        },
                        "type": "array"
                    },
                    "pivot": {
                        "$ref": "#/components/schemas/SemanticLayerPivot"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "limit": {
                        "type": "number",
                        "format": "double"
                    },
                    "sortBy": {
                        "items": {
                            "$ref": "#/components/schemas/SemanticLayerSortBy"
                        },
                        "type": "array"
                    },
                    "metrics": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SemanticLayerField.name_"
                        },
                        "type": "array"
                    },
                    "timeDimensions": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SemanticLayerTimeDimension.name-or-granularity_"
                        },
                        "type": "array"
                    },
                    "dimensions": {
                        "items": {
                            "$ref": "#/components/schemas/Pick_SemanticLayerField.name_"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "filters",
                    "sortBy",
                    "metrics",
                    "timeDimensions",
                    "dimensions"
                ],
                "type": "object"
            },
            "SemanticViewerChartCreateResult": {
                "properties": {
                    "slug": {
                        "type": "string"
                    },
                    "savedSemanticViewerChartUuid": {
                        "type": "string"
                    }
                },
                "required": ["slug", "savedSemanticViewerChartUuid"],
                "type": "object"
            },
            "ApiSemanticViewerChartCreate": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SemanticViewerChartCreateResult"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SemanticViewerChartCreate": {
                "properties": {
                    "spaceUuid": {
                        "type": "string"
                    },
                    "config": {
                        "$ref": "#/components/schemas/AllVizChartConfig"
                    },
                    "semanticLayerQuery": {
                        "$ref": "#/components/schemas/SemanticLayerQuery"
                    },
                    "semanticLayerView": {
                        "type": "string",
                        "nullable": true
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "required": [
                    "spaceUuid",
                    "config",
                    "semanticLayerQuery",
                    "semanticLayerView",
                    "description",
                    "name"
                ],
                "type": "object"
            },
            "SavedSemanticViewerChart": {
                "properties": {
                    "lastViewedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "firstViewedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "views": {
                        "type": "number",
                        "format": "double"
                    },
                    "organization": {
                        "$ref": "#/components/schemas/Pick_Organization.organizationUuid_"
                    },
                    "project": {
                        "$ref": "#/components/schemas/Pick_Project.projectUuid_"
                    },
                    "dashboard": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_Dashboard.uuid-or-name_"
                            }
                        ],
                        "nullable": true
                    },
                    "space": {
                        "$ref": "#/components/schemas/Pick_SpaceSummary.uuid-or-name-or-isPrivate-or-userAccess_"
                    },
                    "lastUpdatedBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    },
                    "lastUpdatedAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdBy": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Pick_LightdashUser.userUuid-or-firstName-or-lastName_"
                            }
                        ],
                        "nullable": true
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "chartKind": {
                        "$ref": "#/components/schemas/ChartKind"
                    },
                    "semanticLayerQuery": {
                        "$ref": "#/components/schemas/SemanticLayerQuery"
                    },
                    "semanticLayerView": {
                        "type": "string",
                        "nullable": true
                    },
                    "config": {
                        "$ref": "#/components/schemas/AllVizChartConfig"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "savedSemanticViewerChartUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "lastViewedAt",
                    "firstViewedAt",
                    "views",
                    "organization",
                    "project",
                    "dashboard",
                    "space",
                    "lastUpdatedBy",
                    "lastUpdatedAt",
                    "createdBy",
                    "createdAt",
                    "chartKind",
                    "semanticLayerQuery",
                    "semanticLayerView",
                    "config",
                    "slug",
                    "description",
                    "name",
                    "savedSemanticViewerChartUuid"
                ],
                "type": "object"
            },
            "ApiSemanticViewerChartGet": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SavedSemanticViewerChart"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SemanticViewerChartUpdateResult": {
                "properties": {
                    "savedSemanticViewerChartVersionUuid": {
                        "type": "string",
                        "nullable": true
                    },
                    "savedSemanticViewerChartUuid": {
                        "type": "string"
                    }
                },
                "required": [
                    "savedSemanticViewerChartVersionUuid",
                    "savedSemanticViewerChartUuid"
                ],
                "type": "object"
            },
            "ApiSemanticViewerChartUpdate": {
                "properties": {
                    "results": {
                        "$ref": "#/components/schemas/SemanticViewerChartUpdateResult"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "SemanticViewerChartUpdate": {
                "properties": {
                    "versionedData": {
                        "properties": {
                            "chartKind": {
                                "$ref": "#/components/schemas/ChartKind"
                            },
                            "config": {
                                "$ref": "#/components/schemas/AllVizChartConfig"
                            },
                            "semanticLayerQuery": {
                                "$ref": "#/components/schemas/SemanticLayerQuery"
                            },
                            "semanticLayerView": {
                                "type": "string",
                                "nullable": true
                            }
                        },
                        "required": [
                            "chartKind",
                            "config",
                            "semanticLayerQuery",
                            "semanticLayerView"
                        ],
                        "type": "object"
                    },
                    "unversionedData": {
                        "properties": {
                            "spaceUuid": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string",
                                "nullable": true
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "required": ["spaceUuid", "description", "name"],
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "ValidationTarget": {
                "enum": ["charts", "dashboards", "tables"],
                "type": "string"
            },
            "ValidationErrorType": {
                "enum": [
                    "chart",
                    "sorting",
                    "filter",
                    "metric",
                    "model",
                    "dimension",
                    "custom metric"
                ],
                "type": "string"
            },
            "ValidationSourceType": {
                "enum": ["chart", "dashboard", "table"],
                "type": "string"
            },
            "ValidationResponseBase": {
                "properties": {
                    "source": {
                        "$ref": "#/components/schemas/ValidationSourceType"
                    },
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "errorType": {
                        "$ref": "#/components/schemas/ValidationErrorType"
                    },
                    "error": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "validationId": {
                        "type": "number",
                        "format": "double"
                    }
                },
                "required": [
                    "projectUuid",
                    "errorType",
                    "error",
                    "name",
                    "createdAt",
                    "validationId"
                ],
                "type": "object"
            },
            "ValidationErrorChartResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ValidationResponseBase"
                    },
                    {
                        "properties": {
                            "chartName": {
                                "type": "string"
                            },
                            "chartViews": {
                                "type": "number",
                                "format": "double"
                            },
                            "lastUpdatedAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "lastUpdatedBy": {
                                "type": "string"
                            },
                            "fieldName": {
                                "type": "string"
                            },
                            "chartKind": {
                                "$ref": "#/components/schemas/ChartKind"
                            },
                            "chartUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["chartViews"],
                        "type": "object"
                    }
                ]
            },
            "ValidationErrorDashboardResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ValidationResponseBase"
                    },
                    {
                        "properties": {
                            "dashboardViews": {
                                "type": "number",
                                "format": "double"
                            },
                            "lastUpdatedAt": {
                                "type": "string",
                                "format": "date-time"
                            },
                            "lastUpdatedBy": {
                                "type": "string"
                            },
                            "fieldName": {
                                "type": "string"
                            },
                            "chartName": {
                                "type": "string"
                            },
                            "dashboardUuid": {
                                "type": "string"
                            }
                        },
                        "required": ["dashboardViews"],
                        "type": "object"
                    }
                ]
            },
            "Pick_ValidationResponseBase.Exclude_keyofValidationResponseBase.name__": {
                "properties": {
                    "spaceUuid": {
                        "type": "string"
                    },
                    "projectUuid": {
                        "type": "string"
                    },
                    "validationId": {
                        "type": "number",
                        "format": "double"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "error": {
                        "type": "string"
                    },
                    "errorType": {
                        "$ref": "#/components/schemas/ValidationErrorType"
                    },
                    "source": {
                        "$ref": "#/components/schemas/ValidationSourceType"
                    }
                },
                "required": [
                    "projectUuid",
                    "validationId",
                    "createdAt",
                    "error",
                    "errorType"
                ],
                "type": "object",
                "description": "From T, pick a set of properties whose keys are in the union K"
            },
            "Omit_ValidationResponseBase.name_": {
                "$ref": "#/components/schemas/Pick_ValidationResponseBase.Exclude_keyofValidationResponseBase.name__",
                "description": "Construct a type with the properties of T except for those in type K."
            },
            "ValidationErrorTableResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Omit_ValidationResponseBase.name_"
                    },
                    {
                        "properties": {
                            "name": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ValidationResponse": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ValidationErrorChartResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ValidationErrorDashboardResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ValidationErrorTableResponse"
                    }
                ]
            },
            "ApiValidateResponse": {
                "properties": {
                    "results": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationResponse"
                        },
                        "type": "array"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["results", "status"],
                "type": "object"
            },
            "ApiValidationDismissResponse": {
                "properties": {
                    "status": {
                        "type": "string",
                        "enum": ["ok"],
                        "nullable": false
                    }
                },
                "required": ["status"],
                "type": "object"
            }
        },
        "securitySchemes": {
            "session_cookie": {
                "type": "apiKey",
                "in": "cookie",
                "name": "connect.sid"
            },
            "api_key": {
                "type": "apiKey",
                "in": "header",
                "name": "Authorization",
                "description": "Value should be 'ApiKey <your key>'"
            }
        }
    },
    "info": {
        "title": "Lightdash API",
        "version": "0.1386.3",
        "description": "Open API documentation for all public Lightdash API endpoints.  # Authentication Before you get started, you might need to create a Personal Access Token to authenticate via the API. You can create a token by following this guide: https://docs.lightdash.com/references/personal_tokens\n",
        "license": {
            "name": "MIT"
        },
        "contact": {
            "name": "Lightdash Support",
            "email": "support@lightdash.com",
            "url": "https://docs.lightdash.com/help-and-contact/contact/contact_info/"
        }
    },
    "openapi": "3.0.0",
    "paths": {
        "/api/v1/projects/{projectUuid}/dataCatalog": {
            "get": {
                "operationId": "getCatalog",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiCatalogResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get catalog items",
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "type",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/CatalogType"
                        }
                    },
                    {
                        "in": "query",
                        "name": "filter",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/CatalogFilter"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/{table}/metadata": {
            "get": {
                "operationId": "getMetadata",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiCatalogMetadataResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get catalog metadata for tables",
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Table name to get metadata for",
                        "in": "path",
                        "name": "table",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/{table}/analytics": {
            "get": {
                "operationId": "getAnalytics",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiCatalogAnalyticsResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get catalog analytics for tables",
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Table name to get analytics for",
                        "in": "path",
                        "name": "table",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/{table}/analytics/{field}": {
            "get": {
                "operationId": "getAnalyticsField",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiCatalogAnalyticsResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get catalog analytics for fields",
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Table where this field belongs",
                        "in": "path",
                        "name": "table",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Field name to get analytics for",
                        "in": "path",
                        "name": "field",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/metrics": {
            "get": {
                "operationId": "getMetricsCatalog",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMetricsCatalog"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get metrics catalog",
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/ApiSortDirection"
                        }
                    },
                    {
                        "in": "query",
                        "name": "categories",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/metrics/{tableName}/{metricName}": {
            "get": {
                "operationId": "getMetric",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetMetricPeek"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get metric by table and metric name",
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "tableName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "metricName",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/{catalogSearchUuid}/categories": {
            "post": {
                "operationId": "addCategoryToCatalogItem",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "catalogSearchUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "tagUuid": {
                                        "type": "string"
                                    }
                                },
                                "required": ["tagUuid"],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/{catalogSearchUuid}/categories/{tagUuid}": {
            "delete": {
                "operationId": "removeCategoryFromCatalogItem",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {},
                                        "status": {
                                            "type": "string"
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "catalogSearchUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "tagUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dataCatalog/{catalogSearchUuid}/icon": {
            "patch": {
                "operationId": "updateCatalogItemIcon",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Catalog"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "catalogSearchUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "icon": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/CatalogItemIcon"
                                            }
                                        ],
                                        "nullable": true
                                    }
                                },
                                "required": ["icon"],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/dashboards/{dashboardUuid}/{dashboardTileUuid}": {
            "post": {
                "operationId": "createComment",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateComment"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Creates a comment on a dashboard tile",
                "tags": ["Comments"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the dashboard",
                        "in": "path",
                        "name": "dashboardUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the uuid of the dashboard tile",
                        "in": "path",
                        "name": "dashboardTileUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the comment to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pick_Comment.text-or-replyTo-or-mentions-or-textHtml_",
                                "description": "the comment to create"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/comments/dashboards/{dashboardUuid}": {
            "get": {
                "operationId": "getComments",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetComments"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets all comments for a dashboard",
                "tags": ["Comments"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the dashboard",
                        "in": "path",
                        "name": "dashboardUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/comments/dashboards/{dashboardUuid}/{commentId}": {
            "patch": {
                "operationId": "resolveComment",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResolveComment"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Resolves a comment on a dashboard",
                "tags": ["Comments"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the dashboard",
                        "in": "path",
                        "name": "dashboardUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the uuid of the comment",
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "deleteComment",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResolveComment"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes a comment on a dashboard",
                "tags": ["Comments"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the dashboard",
                        "in": "path",
                        "name": "dashboardUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the uuid of the comment",
                        "in": "path",
                        "name": "commentId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/csv/{jobId}": {
            "get": {
                "operationId": "getCsvUrl",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCsvUrlResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a Csv",
                "tags": ["Exports"],
                "security": [],
                "parameters": [
                    {
                        "description": "the jobId for the CSV",
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/dashboards/{dashboardUuid}/promote": {
            "post": {
                "operationId": "promoteDashboard",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPromoteDashboardResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Promote dashboard to its upstream project",
                "tags": ["Dashboards"],
                "security": [],
                "parameters": [
                    {
                        "description": "dashboardUuid for the dashboard to run",
                        "in": "path",
                        "name": "dashboardUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/dashboards/{dashboardUuid}/promoteDiff": {
            "get": {
                "operationId": "promoteDashboardDiff",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPromotionChangesResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get diff from dashboard to promote",
                "tags": ["Dashboards"],
                "security": [],
                "parameters": [
                    {
                        "description": "dashboardUuid for the dashboard to check diff",
                        "in": "path",
                        "name": "dashboardUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/explores": {
            "put": {
                "operationId": "SetExplores",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {},
                                "type": "array"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetExplores",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiExploresResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}": {
            "get": {
                "operationId": "GetExplore",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiExploreResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}/compileQuery": {
            "post": {
                "operationId": "CompileQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiCompiledQueryResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MetricQuery"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}/downloadCsv": {
            "post": {
                "operationId": "DownloadCsvFromExplore",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "properties": {
                                                "jobId": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": ["jobId"],
                                            "type": "object"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/MetricQuery"
                                    },
                                    {
                                        "properties": {
                                            "pivotColumns": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "chartName": {
                                                "type": "string"
                                            },
                                            "hiddenFields": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "columnOrder": {
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "customLabels": {
                                                "properties": {},
                                                "additionalProperties": {
                                                    "type": "string"
                                                },
                                                "type": "object"
                                            },
                                            "showTableNames": {
                                                "type": "boolean"
                                            },
                                            "csvLimit": {
                                                "type": "number",
                                                "format": "double",
                                                "nullable": true
                                            },
                                            "onlyRaw": {
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "columnOrder",
                                            "showTableNames",
                                            "onlyRaw"
                                        ],
                                        "type": "object"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/github/install": {
            "get": {
                "operationId": "installGithubAppForOrganization",
                "responses": {
                    "302": {
                        "description": "Not found"
                    }
                },
                "description": "Install the Lightdash GitHub App and link to an organization",
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/github/oauth/callback": {
            "get": {
                "operationId": "githubOauthCallback",
                "responses": {
                    "204": {
                        "description": "No content"
                    }
                },
                "description": "Callback URL for GitHub App Authorization also used for GitHub App Installation with combined Authorization",
                "security": [],
                "parameters": [
                    {
                        "description": "authorization code from GitHub",
                        "in": "query",
                        "name": "code",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "oauth state parameter",
                        "in": "query",
                        "name": "state",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "installation id from GitHub",
                        "in": "query",
                        "name": "installation_id",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "setup action from GitHub",
                        "in": "query",
                        "name": "setup_action",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/github/uninstall": {
            "delete": {
                "operationId": "uninstallGithubAppForOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/github/repos/list": {
            "get": {
                "operationId": "getGithubListRepositories",
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "items": {
                                                "$ref": "#/components/schemas/GitRepo"
                                            },
                                            "type": "array"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/projects/{projectUuid}/git-integration": {
            "get": {
                "operationId": "GetConfiguration",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/GitIntegrationConfiguration"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Git Integration"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/git-integration/pull-requests/chart/{chartUuid}/fields": {
            "get": {
                "operationId": "CreatePullRequestForChartFields",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/PullRequestCreated"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Git Integration"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/git-integration/pull-requests/custom-metrics": {
            "post": {
                "operationId": "CreatePullRequestForCustomMetrics",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/PullRequestCreated"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Git Integration"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "quoteChar": {
                                        "type": "string",
                                        "enum": ["\"", "'"]
                                    },
                                    "customMetrics": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": ["quoteChar", "customMetrics"],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/gdrive/get-access-token": {
            "get": {
                "operationId": "getAccessToken",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGdriveAccessTokenResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get access token for google drive",
                "tags": ["Integrations"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/gdrive/upload-gsheet": {
            "post": {
                "operationId": "uploadGsheet",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiJobScheduledResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Upload results from query to Google Sheet",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadMetricGsheet"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/groups/{groupUuid}": {
            "get": {
                "operationId": "getGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get group details",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "unique id of the group",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "number of members to include",
                        "in": "query",
                        "name": "includeMembers",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "offset of members to include",
                        "in": "query",
                        "name": "offset",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "deleteGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "updateGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGroupWithMembers"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/groups/{groupUuid}/members/{userUuid}": {
            "put": {
                "operationId": "addUserToGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Add a Lightdash user to a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to add the user to",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the UUID for the user to add to the group",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "removeUserFromGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user from a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to remove the user from",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the UUID for the user to remove from the group",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/groups/{groupUuid}/members": {
            "get": {
                "operationId": "getGroupMembers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupMembersResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "View members of a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to view the members of",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/groups/{groupUuid}/projects/{projectUuid}": {
            "post": {
                "operationId": "addProjectAccessToGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateProjectGroupAccess"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Add project access to a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pick_CreateDBProjectGroupAccess.role_"
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "updateProjectAccessForGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUpdateProjectGroupAccess"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update project access for a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateDBProjectGroupAccess"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "removeProjectAccessFromGroup",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove project access from a group",
                "tags": ["User Groups"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/metricsExplorer/{explore}/{metric}/runMetricExplorerQuery": {
            "post": {
                "operationId": "runMetricExplorerQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiMetricsExplorerQueryResults"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a metrics explorer query",
                "tags": ["Metrics Explorer", "Metrics", "Explorer"],
                "security": [],
                "parameters": [
                    {
                        "description": "The project UUID",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The explore name",
                        "in": "path",
                        "name": "explore",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The metric name",
                        "in": "path",
                        "name": "metric",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "compareToPreviousPeriod",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "compareToMetric",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "startDate",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "endDate",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/notifications": {
            "get": {
                "operationId": "getNotifications",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetNotifications"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets notifications for a user based on the type",
                "tags": ["Notifications"],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ApiNotificationResourceType"
                        }
                    }
                ]
            }
        },
        "/api/v1/notifications/{notificationId}": {
            "patch": {
                "operationId": "updateNotification",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update notification",
                "tags": ["Notifications"],
                "security": [],
                "parameters": [
                    {
                        "description": "the id of the notification",
                        "in": "path",
                        "name": "notificationId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ApiNotificationUpdateParams"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org": {
            "get": {
                "operationId": "GetMyOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganization"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            },
            "put": {
                "operationId": "CreateOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Creates a new organization, the current user becomes the Admin of the new organization.\nThis is only available to users that are not already in an organization.",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the new organization settings",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganization",
                                "description": "the new organization settings"
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "UpdateMyOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the new organization settings",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateOrganization",
                                "description": "the new organization settings"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/{organizationUuid}": {
            "delete": {
                "operationId": "DeleteMyOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes an organization and all users inside that organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the organization to delete",
                        "in": "path",
                        "name": "organizationUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/org/projects": {
            "get": {
                "operationId": "ListOrganizationProjects",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationProjects"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets all projects of the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/org/users": {
            "get": {
                "operationId": "ListOrganizationMembers",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationMemberProfiles"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets all the members of the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "includeGroups",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "searchQuery",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "filter users who can view this project",
                        "in": "query",
                        "name": "projectUuid",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/org/users/{userUuid}": {
            "get": {
                "operationId": "GetOrganizationMemberByUuid",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationMemberProfile"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get the member profile for a user in the current user's organization by uuid",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the user",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/UUID"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "UpdateOrganizationMember",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationMemberProfile"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Updates the membership profile for a user in the current user's organization",
                "tags": ["Roles & Permissions", "Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the user to update",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the new membership profile",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrganizationMemberProfileUpdate",
                                "description": "the new membership profile"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/user/{userUuid}": {
            "delete": {
                "operationId": "DeleteOrganizationMember",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes a user from the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the user to delete",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/org/allowedEmailDomains": {
            "get": {
                "operationId": "ListOrganizationEmailDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationAllowedEmailDomains"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets the allowed email domains for the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": []
            },
            "patch": {
                "operationId": "UpdateOrganizationEmailDomains",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiOrganizationAllowedEmailDomains"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Updates the allowed email domains for the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the new allowed email domains",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateAllowedEmailDomains",
                                "description": "the new allowed email domains"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/groups": {
            "post": {
                "operationId": "CreateGroupInOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateGroupResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Creates a new group in the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the new group details",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateGroup",
                                "description": "the new group details"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "ListGroupsInOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGroupListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Gets all the groups in the current user's organization",
                "tags": ["Organizations"],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "description": "number of members to include",
                        "in": "query",
                        "name": "includeMembers",
                        "required": false,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    },
                    {
                        "in": "query",
                        "name": "searchQuery",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/pinned-lists/{pinnedListUuid}/items": {
            "get": {
                "operationId": "getPinnedItems",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPinnedItems"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get pinned items",
                "tags": ["Content"],
                "security": [],
                "parameters": [
                    {
                        "description": "project uuid",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the list uuid for the pinned items",
                        "in": "path",
                        "name": "pinnedListUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/pinned-lists/{pinnedListUuid}/items/order": {
            "patch": {
                "operationId": "updatePinnedItemsOrder",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPinnedItems"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update pinned items order",
                "tags": ["Content"],
                "security": [],
                "parameters": [
                    {
                        "description": "project uuid",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the list uuid for the pinned items",
                        "in": "path",
                        "name": "pinnedListUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the new order of the pinned items",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/UpdatePinnedItemOrder"
                                },
                                "type": "array",
                                "description": "the new order of the pinned items"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}": {
            "get": {
                "operationId": "GetProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiProjectResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a project of an organiztion",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/charts": {
            "get": {
                "operationId": "ListChartsInProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiChartListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List all charts in a project",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to get charts for",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/chart-summaries": {
            "get": {
                "operationId": "ListChartSummariesInProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiChartSummaryListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List all charts summaries in a project",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to get charts for",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Whether to exclude charts that are saved in dashboards",
                        "in": "query",
                        "name": "excludeChartsSavedInDashboard",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/spaces": {
            "get": {
                "operationId": "ListSpacesInProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceSummaryListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List all spaces in a project",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to get spaces for",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "CreateSpaceInProject",
                "responses": {
                    "200": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new space inside a project",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSpace"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/access": {
            "get": {
                "operationId": "GetProjectAccessList",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiProjectAccessListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get access list for a project. This is a list of users that have been explictly granted access to the project.\nThere may be other users that have access to the project via their organization membership.",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "GrantProjectAccessToUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Grant a user access to a project",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateProjectMember"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/user/{userUuid}": {
            "get": {
                "operationId": "GetProjectMemberAccess",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetProjectMemberResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a project explicit member's access.\nThere may be users that have access to the project via their organization membership.\n\nNOTE:\nWe don't use the API on the frontend. Instead, we can call the API\nso that we make sure of the user's access to the project.",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/access/{userUuid}": {
            "patch": {
                "operationId": "UpdateProjectAccessForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a user's access to a project",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProjectMember"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "RevokeProjectAccessForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user's access to a project",
                "tags": ["Roles & Permissions", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/groupAccesses": {
            "get": {
                "operationId": "GetProjectGroupAccesses",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetProjectGroupAccesses"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List group access for projects",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/sqlQuery": {
            "post": {
                "operationId": "RunSqlQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/ApiSqlQueryResults"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a raw sql query against the project's warehouse connection",
                "tags": ["Exploring", "Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to run the query against",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The query to run",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "sql": {
                                        "type": "string"
                                    }
                                },
                                "required": ["sql"],
                                "type": "object",
                                "description": "The query to run"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/calculate-total": {
            "post": {
                "operationId": "CalculateTotalFromQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCalculateTotalResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Calculate all metric totals from a metricQuery",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project to get charts for",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The metric query to calculate totals for",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CalculateTotalFromQuery",
                                "description": "The metric query to calculate totals for"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/user-credentials": {
            "get": {
                "operationId": "getUserWarehouseCredentialsPreference",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/UserWarehouseCredentials"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/user-credentials/{userWarehouseCredentialsUuid}": {
            "patch": {
                "operationId": "updateUserWarehouseCredentialsPreference",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "userWarehouseCredentialsUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/custom-metrics": {
            "get": {
                "operationId": "getCustomMetrics",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "items": {
                                                "properties": {
                                                    "chartUrl": {
                                                        "type": "string"
                                                    },
                                                    "chartLabel": {
                                                        "type": "string"
                                                    },
                                                    "yml": {
                                                        "type": "string"
                                                    },
                                                    "modelName": {
                                                        "type": "string"
                                                    },
                                                    "label": {
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "chartUrl",
                                                    "chartLabel",
                                                    "yml",
                                                    "modelName",
                                                    "label",
                                                    "name"
                                                ],
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/metadata": {
            "patch": {
                "operationId": "updateProjectMetadata",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update project metadata like upstreamProjectUuid\nwe don't trigger a compile, so not for updating warehouse or credentials",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateMetadata"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/semantic-layer-connection": {
            "patch": {
                "operationId": "updateProjectSemanticLayerConnection",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SemanticLayerConnectionUpdate"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteProjectSemanticLayerConnection",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/dashboards": {
            "get": {
                "operationId": "getDashboards",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetDashboardsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "post": {
                "operationId": "createDashboard",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateDashboardResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "duplicateFrom",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "anyOf": [
                                    {
                                        "$ref": "#/components/schemas/DuplicateDashboardParams"
                                    },
                                    {
                                        "$ref": "#/components/schemas/CreateDashboard"
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "patch": {
                "operationId": "updateDashboards",
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUpdateDashboardsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/UpdateMultipleDashboards"
                                },
                                "type": "array"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/createPreview": {
            "post": {
                "operationId": "createPreview",
                "responses": {
                    "200": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "copyContent": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "type": "string"
                                    }
                                },
                                "required": ["copyContent", "name"],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/schedulerSettings": {
            "patch": {
                "operationId": "updateSchedulerSettings",
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSchedulerSettings"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/tags": {
            "post": {
                "operationId": "createTag",
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateTagResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pick_Tag.name-or-color_"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "getTags",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetTagsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/tags/{tagUuid}": {
            "delete": {
                "operationId": "deleteTag",
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "tagUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "updateTag",
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "tagUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DbTagUpdate"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/charts/code": {
            "get": {
                "operationId": "getChartsAsCode",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiChartAsCodeListResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Charts as code",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/charts/{slug}/code": {
            "post": {
                "operationId": "upsertChartAsCode",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiChartAsCodeUpsertResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "slug",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/Omit_ChartAsCode.metricQuery-or-chartConfig_"
                                    },
                                    {
                                        "properties": {
                                            "metricQuery": {},
                                            "chartConfig": {}
                                        },
                                        "required": [
                                            "metricQuery",
                                            "chartConfig"
                                        ],
                                        "type": "object"
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}/runUnderlyingDataQuery": {
            "post": {
                "operationId": "postRunUnderlyingDataQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for underlying data results",
                "tags": ["Exploring"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "table name",
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "metricQuery for the chart to run",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MetricQueryRequest",
                                "description": "metricQuery for the chart to run"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/explores/{exploreId}/runQuery": {
            "post": {
                "operationId": "RunMetricQuery",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for explore",
                "tags": ["Exploring"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "table name",
                        "in": "path",
                        "name": "exploreId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "metricQuery for the chart to run",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MetricQueryRequest",
                                "description": "metricQuery for the chart to run"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/saved/{chartUuid}/results": {
            "post": {
                "operationId": "PostChartResults",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for a chart",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to run",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "invalidateCache": {
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/saved/{chartUuid}/chart-and-results": {
            "post": {
                "operationId": "PostDashboardTile",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "autoRefresh": {
                                        "type": "boolean"
                                    },
                                    "granularity": {
                                        "$ref": "#/components/schemas/DateGranularity"
                                    },
                                    "dashboardUuid": {
                                        "type": "string"
                                    },
                                    "dashboardSorts": {
                                        "items": {
                                            "$ref": "#/components/schemas/SortField"
                                        },
                                        "type": "array"
                                    },
                                    "invalidateCache": {
                                        "type": "boolean"
                                    },
                                    "dashboardFilters": {}
                                },
                                "required": [
                                    "dashboardUuid",
                                    "dashboardSorts",
                                    "dashboardFilters"
                                ],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/saved/{chartUuid}/history": {
            "get": {
                "operationId": "GetChartHistory",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetChartHistoryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get chart version history from last 30 days",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/saved/{chartUuid}/version/{versionUuid}": {
            "get": {
                "operationId": "GetChartVersion",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetChartVersionResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get chart version",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "versionUuid for the chart version",
                        "in": "path",
                        "name": "versionUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/saved/{chartUuid}/version/{versionUuid}/results": {
            "post": {
                "operationId": "getChartVersionResults",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRunQueryResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Run a query for a chart version",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to run",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "versionUuid for the chart version",
                        "in": "path",
                        "name": "versionUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/saved/{chartUuid}/rollback/{versionUuid}": {
            "post": {
                "operationId": "postChartVersionRollback",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Rollback chart to version",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to run",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "versionUuid for the chart version",
                        "in": "path",
                        "name": "versionUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/saved/{chartUuid}/calculate-total": {
            "post": {
                "operationId": "CalculateTotalFromSavedChart",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCalculateTotalResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Calculate metric totals from a saved chart",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to run",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "invalidateCache": {
                                        "type": "boolean"
                                    },
                                    "dashboardFilters": {}
                                },
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/saved/{chartUuid}/promote": {
            "post": {
                "operationId": "promoteChart",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPromoteChartResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Promote chart to its upstream project",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to run",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/saved/{chartUuid}/promoteDiff": {
            "get": {
                "operationId": "promoteChartDiff",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiPromotionChangesResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get diff from chart to promote",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "description": "chartUuid for the chart to check diff",
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/saved/{chartUuid}/downloadCsv": {
            "post": {
                "operationId": "DownloadCsvFromSavedChart",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "properties": {
                                                "jobId": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": ["jobId"],
                                            "type": "object"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Download a CSV from a saved chart uuid",
                "tags": ["Charts"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "chartUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "csvLimit": {
                                        "type": "number",
                                        "format": "double",
                                        "nullable": true
                                    },
                                    "onlyRaw": {
                                        "type": "boolean"
                                    },
                                    "tileUuid": {
                                        "type": "string"
                                    },
                                    "dashboardFilters": {}
                                },
                                "required": ["onlyRaw", "dashboardFilters"],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/schedulers/{projectUuid}/logs": {
            "get": {
                "operationId": "getSchedulerLogs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerLogsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get scheduled logs",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/{schedulerUuid}": {
            "get": {
                "operationId": "getScheduler",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerAndTargetsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a scheduler",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "updateScheduler",
                "responses": {
                    "201": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerAndTargetsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a scheduler",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the new scheduler data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "the new scheduler data"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteScheduler",
                "responses": {
                    "201": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {},
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete a scheduler",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to delete",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/{schedulerUuid}/enabled": {
            "patch": {
                "operationId": "updateSchedulerEnabled",
                "responses": {
                    "201": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSchedulerAndTargetsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Set scheduler enabled",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the enabled flag",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "enabled": {
                                        "type": "boolean"
                                    }
                                },
                                "required": ["enabled"],
                                "type": "object",
                                "description": "the enabled flag"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/schedulers/{schedulerUuid}/jobs": {
            "get": {
                "operationId": "getScheduledJobs",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiScheduledJobsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get scheduled jobs",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the scheduler to update",
                        "in": "path",
                        "name": "schedulerUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/job/{jobId}/status": {
            "get": {
                "operationId": "getSchedulerJobStatus",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiJobStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a generic job status\nThis method can be used when polling from the frontend",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [
                    {
                        "description": "the jobId for the status to check",
                        "in": "path",
                        "name": "jobId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/schedulers/send": {
            "post": {
                "operationId": "sendScheduler",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiTestSchedulerResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Send a scheduler now before saving it",
                "tags": ["Schedulers"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the create scheduler data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "the create scheduler data"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/share/{nanoId}": {
            "get": {
                "operationId": "getShareUrl",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiShareResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get a share url from a short url id",
                "tags": ["Share links"],
                "security": [],
                "parameters": [
                    {
                        "description": "the short id for the share url",
                        "in": "path",
                        "name": "nanoId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/share": {
            "post": {
                "operationId": "CreateShareUrl",
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiShareResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Given a full URL generates a short url id that can be used for sharing",
                "tags": ["Share links"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "a full URL used to generate a short url id",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateShareUrl",
                                "description": "a full URL used to generate a short url id"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/slack/channels": {
            "get": {
                "operationId": "getSlackChannels",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSlackChannelsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get slack channels",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "search",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/slack/custom-settings": {
            "put": {
                "operationId": "UpdateCustomSettings",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSlackCustomSettingsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update slack notification channel to send notifications to scheduled jobs fail",
                "tags": ["Integrations"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SlackAppCustomSettings"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}": {
            "get": {
                "operationId": "GetSpace",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get details for a space in a project",
                "tags": ["Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to get",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "delete": {
                "operationId": "DeleteSpace",
                "responses": {
                    "204": {
                        "description": "Deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete a space from a project",
                "tags": ["Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to delete",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "patch": {
                "operationId": "UpdateSpace",
                "responses": {
                    "200": {
                        "description": "Updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSpaceResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update a space in a project",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to update",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSpace"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}/share": {
            "post": {
                "operationId": "AddSpaceUserAccess",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Grant a user access to a space",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddSpaceUserAccess"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}/share/{userUuid}": {
            "delete": {
                "operationId": "RevokeSpaceAccessForUser",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user's access to a space",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to update",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the user to revoke access from",
                        "in": "path",
                        "name": "userUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}/group/share": {
            "post": {
                "operationId": "AddSpaceGroupAccess",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Grant a group access to a space",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to update",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddSpaceGroupAccess"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/spaces/{spaceUuid}/group/share/{groupUuid}": {
            "delete": {
                "operationId": "RevokeGroupSpaceAccess",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a group's access to a space",
                "tags": ["Roles & Permissions", "Spaces"],
                "security": [],
                "parameters": [
                    {
                        "description": "The uuid of the space's parent project",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the space to update",
                        "in": "path",
                        "name": "spaceUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The uuid of the group to revoke access from",
                        "in": "path",
                        "name": "groupUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/ssh/key-pairs": {
            "post": {
                "operationId": "createSshKeyPair",
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSshKeyPairResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "tags": ["SSH Keypairs"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/org/attributes": {
            "get": {
                "operationId": "getUserAttributes",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUserAttributesResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get all user attributes",
                "tags": ["User attributes"],
                "security": [],
                "parameters": []
            },
            "post": {
                "operationId": "createUserAttribute",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateUserAttributeResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Creates new user attribute",
                "tags": ["User attributes"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "description": "the user attribute to create",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserAttribute",
                                "description": "the user attribute to create"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/org/attributes/{userAttributeUuid}": {
            "put": {
                "operationId": "updateUserAttribute",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiCreateUserAttributeResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Updates a user attribute",
                "tags": ["User attributes"],
                "security": [],
                "parameters": [
                    {
                        "description": "the UUID for the group to add the user to",
                        "in": "path",
                        "name": "userAttributeUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the user attribute to update",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserAttribute",
                                "description": "the user attribute to update"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "removeUserAttribute",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Remove a user attribute",
                "tags": ["User attributes"],
                "security": [],
                "parameters": [
                    {
                        "description": "the user attribute UUID to remove",
                        "in": "path",
                        "name": "userAttributeUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user": {
            "get": {
                "operationId": "GetAuthenticatedUser",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetAuthenticatedUserResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get authenticated user",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            },
            "post": {
                "operationId": "RegisterUser",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiRegisterUserResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Register user",
                "tags": ["My Account"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterOrActivateUser"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/me/email/otp": {
            "put": {
                "operationId": "CreateEmailOneTimePasscode",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiEmailStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Create a new one-time passcode for the current user's primary email.\nThe user will receive an email with the passcode.",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/user/me/email/status": {
            "get": {
                "operationId": "GetEmailVerificationStatus",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiEmailStatusResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get the verification status for the current user's primary email",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "description": "the one-time passcode sent to the user's primary email",
                        "in": "query",
                        "name": "passcode",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user/me/allowedOrganizations": {
            "get": {
                "operationId": "ListMyAvailableOrganizations",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiUserAllowedOrganizationsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "List the organizations that the current user can join.\nThis is based on the user's primary email domain and the organization's allowed email domains.",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/user/me/joinOrganization/{organizationUuid}": {
            "post": {
                "operationId": "JoinOrganization",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Add the current user to an organization that accepts users with a verified email domain.\nThis will fail if the organization email domain does not match the user's primary email domain.",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "description": "the uuid of the organization to join",
                        "in": "path",
                        "name": "organizationUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user/me": {
            "delete": {
                "operationId": "DeleteMe",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete user",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            }
        },
        "/api/v1/user/warehouseCredentials": {
            "get": {
                "operationId": "getWarehouseCredentials",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "items": {
                                                "$ref": "#/components/schemas/UserWarehouseCredentials"
                                            },
                                            "type": "array"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get user warehouse credentials",
                "tags": ["My Account"],
                "security": [],
                "parameters": []
            },
            "post": {
                "operationId": "createWarehouseCredentials",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/UserWarehouseCredentials"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Create user warehouse credentials",
                "tags": ["My Account"],
                "security": [],
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertUserWarehouseCredentials"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/user/warehouseCredentials/{uuid}": {
            "patch": {
                "operationId": "updateWarehouseCredentials",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/UserWarehouseCredentials"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Update user warehouse credentials",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpsertUserWarehouseCredentials"
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "deleteWarehouseCredentials",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiSuccessEmpty"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Delete user warehouse credentials",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "uuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user/login-options": {
            "get": {
                "operationId": "getLoginOptions",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiGetLoginOptionsResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get login options",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "in": "query",
                        "name": "email",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/user/me/personal-access-tokens/{personalAccessTokenUuid}/rotate": {
            "patch": {
                "operationId": "Rotate personal access token",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "results": {
                                            "$ref": "#/components/schemas/PersonalAccessTokenWithToken"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": ["ok"],
                                            "nullable": false
                                        }
                                    },
                                    "required": ["results", "status"],
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Rotate personal access token",
                "tags": ["My Account"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "personalAccessTokenUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "expiresAt": {
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                },
                                "required": ["expiresAt"],
                                "type": "object"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/projects/{projectUuid}/validate": {
            "post": {
                "operationId": "ValidateProject",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiJobScheduledResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Validate content inside a project. This will start a validation job and return the job id.\n\nValidation jobs scan all charts and dashboards inside a project to find any broken references\nto metrics or dimensions that aren't available. Results are available after the job is completed.",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "the projectId for the validation",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "the compiled explores to validate against an existing project, this is used in the CLI to validate a project without creating a preview",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "validationTargets": {
                                        "items": {
                                            "$ref": "#/components/schemas/ValidationTarget"
                                        },
                                        "type": "array"
                                    },
                                    "explores": {
                                        "items": {},
                                        "type": "array"
                                    }
                                },
                                "type": "object",
                                "description": "the compiled explores to validate against an existing project, this is used in the CLI to validate a project without creating a preview"
                            }
                        }
                    }
                }
            },
            "get": {
                "operationId": "GetLatestValidationResults",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiValidateResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Get validation results for a project. This will return the results of the latest validation job.",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "description": "the projectId for the validation",
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "boolean to know if this request is made from the settings page, for analytics",
                        "in": "query",
                        "name": "fromSettings",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "optional jobId to get results for a specific job, used on CLI",
                        "in": "query",
                        "name": "jobId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/projects/{projectUuid}/validate/{validationId}": {
            "delete": {
                "operationId": "DeleteValidationDismiss",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiValidationDismissResponse"
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiErrorPayload"
                                }
                            }
                        }
                    }
                },
                "description": "Deletes a single validation error.",
                "tags": ["Projects"],
                "security": [],
                "parameters": [
                    {
                        "in": "path",
                        "name": "projectUuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "the projectId for the validation",
                        "in": "path",
                        "name": "validationId",
                        "required": true,
                        "schema": {
                            "format": "double",
                            "type": "number"
                        }
                    }
                ]
            }
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "tags": [
        {
            "name": "My Account",
            "description": "These routes allow users to manage their own user account."
        },
        {
            "name": "Organizations",
            "description": "Each user is a member of a single organization. These routes allow users to manage their organization. Most actions are only available to admin users."
        },
        {
            "name": "Projects",
            "description": "Projects belong to a single organization. These routes allow users to manage their projects, browse content, and execute queries. Users inside an organization might have access to a project from an organization-level role or they might be granted access to a project directly."
        },
        {
            "name": "Spaces",
            "description": "Spaces allow you to organize charts and dashboards within a project. They also allow granular access to content by allowing you to create private spaces, which are only accessible to the creator and admins."
        },
        {
            "name": "Roles & Permissions",
            "description": "These routes allow users to manage roles and permissions for their organization.",
            "externalDocs": {
                "url": "https://docs.lightdash.com/references/roles"
            }
        }
    ]
}
