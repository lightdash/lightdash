import { DynamicStructuredTool } from '@langchain/core/tools';
import {
    AiWebAppPrompt,
    getErrorMessage,
    isSlackPrompt,
    SlackPrompt,
    UpdateSlackResponse,
} from '@lightdash/common';
import * as Sentry from '@sentry/node';
import { z } from 'zod';
import { SlackClient } from '../../../../clients/Slack/SlackClient';
import Logger from '../../../../logging/logger';
import { generateCsvToolSchema, renderCsvFile } from '../charts/csvFile';
import { RunMiniMetricQuery } from '../runMiniMetricQuery/runMiniMetricQuery';

type GetGenerateBarVizConfigToolArgs = {
    updateProgress: (progress: string) => Promise<void>;
    runMiniMetricQuery: RunMiniMetricQuery;
    getPrompt: () => Promise<SlackPrompt | AiWebAppPrompt>;
    updatePrompt: (prompt: UpdateSlackResponse) => Promise<void>;
    sendFile: InstanceType<typeof SlackClient>['postFileToThread'];
    maxLimit: number;
};
export const getGenerateCsvTool = ({
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
    updateProgress,
    maxLimit,
}: GetGenerateBarVizConfigToolArgs) => {
    const schema = generateCsvToolSchema;

    return new DynamicStructuredTool({
        name: 'generateCsvTool',
        description: `Generate a CSV file and show it to the user.

Rules for generating the CSV file:
- The dimension and metric "fieldIds" must come from an explore. If you haven't used "findFieldsInExplore" tool, please do so before using this tool.
- If the data needs to be filtered, generate the filters using the "generateQueryFilters" tool before using this tool.`,
        schema,
        func: async ({ filters, vizConfig }: z.infer<typeof schema>) => {
            try {
                await updateProgress(
                    'üîç Running a query for your bar chart...',
                );

                const prompt = await getPrompt();

                await updateProgress('üî¢ Generating your CSV...');

                const { file, metricQuery } = await renderCsvFile({
                    runMetricQuery: runMiniMetricQuery,
                    config: vizConfig,
                    filters,
                    maxLimit,
                });

                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: vizConfig,
                    metricQuery,
                });

                if (isSlackPrompt(prompt)) {
                    const sentfileArgs = {
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `CSV results generated by Lightdash`,
                        filename: 'lightdash-query-results.csv',
                        file,
                    };

                    await sendFile(sentfileArgs);
                }

                return `A CSV file has been successfully generated and shown to the user.`;
            } catch (e) {
                Logger.debug('Error generating CSV results:', e);
                Sentry.captureException(e);

                return `There was an error generating the CSV results.

Here's the original error message:
\`\`\`
${getErrorMessage(e)}
\`\`\`

Please try again.`;
            }
        },
    });
};
