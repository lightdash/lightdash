import { DynamicStructuredTool } from '@langchain/core/tools';
import {
    AiWebAppPrompt,
    getErrorMessage,
    isSlackPrompt,
    SlackPrompt,
    UpdateSlackResponse,
} from '@lightdash/common';
import * as Sentry from '@sentry/node';
import { z } from 'zod';
import { SlackClient } from '../../../../clients/Slack/SlackClient';
import Logger from '../../../../logging/logger';
import {
    generateBarVizConfigToolSchema,
    renderVerticalBarMetricChart,
} from '../charts/verticalBarChart';
import { RunMiniMetricQuery } from '../runMiniMetricQuery/runMiniMetricQuery';

type GetGenerateBarVizConfigToolArgs = {
    updateProgress: (progress: string) => Promise<void>;
    runMiniMetricQuery: RunMiniMetricQuery;
    getPrompt: () => Promise<SlackPrompt | AiWebAppPrompt>;
    updatePrompt: (prompt: UpdateSlackResponse) => Promise<void>;
    sendFile: InstanceType<typeof SlackClient>['postFileToThread'];
};

export const getGenerateBarVizConfigTool = ({
    updateProgress,
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
}: GetGenerateBarVizConfigToolArgs) => {
    const schema = generateBarVizConfigToolSchema;

    return new DynamicStructuredTool({
        name: 'generateBarVizConfig',
        description: `Generate Bar Chart Visualization and show it to the user.

Rules for generating the bar chart visualization:
- The dimension and metric "fieldIds" must come from an explore. If you haven't used "findFieldsInExplore" tool, please do so before using this tool.
- If the data needs to be filtered, generate the filters using the "generateQueryFilters" tool before using this tool.`,
        schema,
        func: async ({ filters, vizConfig }: z.infer<typeof schema>) => {
            try {
                await updateProgress(
                    'üîç Running a query for your bar chart...',
                );
                const prompt = await getPrompt();

                await updateProgress('üìä Generating your bar chart...');
                const { file, metricQuery } =
                    await renderVerticalBarMetricChart({
                        runMetricQuery: runMiniMetricQuery,
                        vizConfig,
                        filters,
                    });

                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: vizConfig,
                    metricQuery,
                });

                if (isSlackPrompt(prompt)) {
                    const sentfileArgs = {
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `Bar chart generated by Lightdash`,
                        filename: 'lightdash-query-results.png',
                        file,
                    };
                    await sendFile(sentfileArgs);
                }

                await updateProgress('‚úÖ Done.');

                return `A bar chart has been successfully generated and shown to the user.`;
            } catch (e) {
                Logger.debug('Error generating bar chart visualization', e);
                Sentry.captureException(e);

                return `There was an error generating the bar chart.

Here's the original error message:
\`\`\`
${getErrorMessage(e)}
\`\`\`

Please try again.`;
            }
        },
    });
};
