import { isSlackPrompt, verticalBarVizToolSchema } from '@lightdash/common';
import { tool } from 'ai';
import type {
    GetPromptFn,
    RunMiniMetricQueryFn,
    SendFileFn,
    UpdateProgressFn,
    UpdatePromptFn,
} from '../types/aiAgentDependencies';
import { renderEcharts } from '../utils/renderEcharts';
import { toolErrorHandler } from '../utils/toolErrorHandler';
import { renderVerticalBarViz } from '../visualizations/verticalBarViz';

type Dependencies = {
    updateProgress: UpdateProgressFn;
    runMiniMetricQuery: RunMiniMetricQueryFn;
    getPrompt: GetPromptFn;
    updatePrompt: UpdatePromptFn;
    sendFile: SendFileFn;
};

export const getGenerateBarVizConfig = ({
    updateProgress,
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
}: Dependencies) => {
    const schema = verticalBarVizToolSchema;

    return tool({
        description: `Generate Bar Chart Visualization and show it to the user.

Rules for generating the bar chart visualization:
- The dimension and metric "fieldIds" must come from an explore. If you haven't used "findFieldsInExplore" tool, please do so before using this tool.
- If the data needs to be filtered, generate the filters using the "generateQueryFilters" tool before using this tool.`,
        parameters: schema,
        execute: async (vizConfig) => {
            try {
                await updateProgress('ðŸ“Š Generating your bar chart...');

                const prompt = await getPrompt();
                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: vizConfig,
                });

                if (isSlackPrompt(prompt)) {
                    const { chartOptions } = await renderVerticalBarViz({
                        runMetricQuery: runMiniMetricQuery,
                        vizTool: vizConfig,
                    });

                    const file = await renderEcharts(chartOptions);
                    await updateProgress('âœ… Done.');

                    const sentfileArgs = {
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `Bar chart generated by Lightdash`,
                        filename: 'lightdash-query-results.png',
                        file,
                    };
                    await sendFile(sentfileArgs);
                }

                return `Success`;
            } catch (e) {
                return toolErrorHandler(e, `Error generating bar chart.`);
            }
        },
    });
};
