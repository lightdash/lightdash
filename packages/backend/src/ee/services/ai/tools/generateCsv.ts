import { filtersSchemaTransformed, isSlackPrompt } from '@lightdash/common';
import { tool } from 'ai';
import type {
    GetPromptFn,
    RunMiniMetricQueryFn,
    SendFileFn,
    UpdateProgressFn,
    UpdatePromptFn,
} from '../types/aiAgentDependencies';
import { toolErrorHandler } from '../utils/toolErrorHandler';
import {
    generateCsvToolSchema,
    renderCsvFile,
} from '../visualizations/csvFile';

type Dependencies = {
    updateProgress: UpdateProgressFn;
    runMiniMetricQuery: RunMiniMetricQueryFn;
    getPrompt: GetPromptFn;
    updatePrompt: UpdatePromptFn;
    sendFile: SendFileFn;
    maxLimit: number;
};
export const getGenerateCsv = ({
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
    updateProgress,
    maxLimit,
}: Dependencies) => {
    const schema = generateCsvToolSchema;

    return tool({
        description: `Generate a CSV file and show it to the user.

Rules for generating the CSV file:
- The dimension and metric "fieldIds" must come from an explore. If you haven't used "findFieldsInExplore" tool, please do so before using this tool.
- If the data needs to be filtered, generate the filters using the "generateQueryFilters" tool before using this tool.`,
        parameters: schema,
        execute: async ({ filters, vizConfig }) => {
            try {
                // Transform filters to the correct format for the query and keep the original format for the tool call args
                const transformedFilters =
                    filtersSchemaTransformed.parse(filters);
                await updateProgress(
                    'üîç Running a query for your bar chart...',
                );

                const prompt = await getPrompt();

                await updateProgress('üî¢ Generating your CSV...');

                const { csv, metricQuery } = await renderCsvFile({
                    runMetricQuery: runMiniMetricQuery,
                    config: vizConfig,
                    filters: transformedFilters ?? undefined,
                    maxLimit,
                });

                const file = Buffer.from(csv, 'utf8');

                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: vizConfig,
                    metricQuery,
                });

                if (isSlackPrompt(prompt)) {
                    const sentfileArgs = {
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `CSV results generated by Lightdash`,
                        filename: 'lightdash-query-results.csv',
                        file,
                    };

                    await sendFile(sentfileArgs);
                }

                return `A CSV file has been successfully generated and shown to the user.`;
            } catch (e) {
                return toolErrorHandler(e, `Error generating CSV.`);
            }
        },
    });
};
