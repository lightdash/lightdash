import {
    Explore,
    getTotalFilterRules,
    isSlackPrompt,
    toolTableVizArgsSchema,
    toolTableVizArgsSchemaTransformed,
    ToolTableVizArgsTransformed,
} from '@lightdash/common';
import { tool } from 'ai';
import type {
    CreateOrUpdateArtifactFn,
    GetExploreFn,
    GetPromptFn,
    RunMiniMetricQueryFn,
    SendFileFn,
    UpdateProgressFn,
    UpdatePromptFn,
} from '../types/aiAgentDependencies';
import { serializeData } from '../utils/serializeData';
import { toolErrorHandler } from '../utils/toolErrorHandler';
import { validateTableVizConfig } from '../utils/validateTableVizConfig';
import { renderTableViz } from '../visualizations/vizTable';

type Dependencies = {
    getExplore: GetExploreFn;
    updateProgress: UpdateProgressFn;
    runMiniMetricQuery: RunMiniMetricQueryFn;
    getPrompt: GetPromptFn;
    updatePrompt: UpdatePromptFn;
    sendFile: SendFileFn;
    createOrUpdateArtifact: CreateOrUpdateArtifactFn;
    maxLimit: number;
};
export const getGenerateTableVizConfig = ({
    getExplore,
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
    updateProgress,
    createOrUpdateArtifact,
    maxLimit,
}: Dependencies) => {
    const schema = toolTableVizArgsSchema;

    return tool({
        description: toolTableVizArgsSchema.description,
        parameters: schema,
        execute: async (toolArgs) => {
            let isOneRow = false;
            try {
                await updateProgress('ðŸ”¢ Querying the data...');

                // TODO: common for all viz tools. find a way to reuse this code.
                const vizTool =
                    toolTableVizArgsSchemaTransformed.parse(toolArgs);

                const explore = await getExplore({
                    exploreName: vizTool.vizConfig.exploreName,
                });

                validateTableVizConfig(vizTool, explore);
                // end of TODO

                const prompt = await getPrompt();

                // Create or update artifact
                await createOrUpdateArtifact({
                    threadUuid: prompt.threadUuid,
                    promptUuid: prompt.promptUuid,
                    artifactType: 'chart',
                    title: toolArgs.title,
                    description: toolArgs.description,
                    vizConfig: toolArgs,
                });

                // TODO :: keeping this for now, until the front-end is under feature-flag
                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: toolArgs,
                });

                const { csv, results } = await renderTableViz({
                    runMetricQuery: (q) => runMiniMetricQuery(q, maxLimit),
                    vizTool,
                    maxLimit,
                });
                await updateProgress('âœ… Done.');

                isOneRow = results.rows.length === 1;

                // Always send CSV file to Slack if it's a Slack prompt, regardless of row count
                if (isSlackPrompt(prompt)) {
                    await sendFile({
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `CSV results generated by Lightdash`,
                        filename: 'lightdash-query-results.csv',
                        file: Buffer.from(csv, 'utf8'),
                    });
                }

                if (isOneRow) {
                    return `Here's the result:
                    ${serializeData(csv, 'csv')}`;
                }

                return `Success.`;
            } catch (e) {
                return toolErrorHandler(
                    e,
                    `Error generating ${
                        isOneRow ? 'one row' : 'table'
                    } result.`,
                );
            }
        },
    });
};
