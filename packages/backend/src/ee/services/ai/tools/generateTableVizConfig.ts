import { isSlackPrompt, tableVizToolSchema } from '@lightdash/common';
import { tool } from 'ai';
import type {
    GetPromptFn,
    RunMiniMetricQueryFn,
    SendFileFn,
    UpdateProgressFn,
    UpdatePromptFn,
} from '../types/aiAgentDependencies';
import { toolErrorHandler } from '../utils/toolErrorHandler';
import { renderTableViz } from '../visualizations/tableViz';

type Dependencies = {
    updateProgress: UpdateProgressFn;
    runMiniMetricQuery: RunMiniMetricQueryFn;
    getPrompt: GetPromptFn;
    updatePrompt: UpdatePromptFn;
    sendFile: SendFileFn;
    maxLimit: number;
};
export const getGenerateTableVizConfig = ({
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
    updateProgress,
    maxLimit,
}: Dependencies) => {
    const schema = tableVizToolSchema;

    return tool({
        description: `Generate a table and show it to the user.
The dimension and metric "fieldIds" must come from an explore.
If you haven't used "findFieldsInExplore" tool, please do so before using this tool.`,
        parameters: schema,
        execute: async (vizToolResult) => {
            try {
                await updateProgress('ðŸ”¢ Generating your table...');

                const prompt = await getPrompt();
                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: vizToolResult,
                });

                if (isSlackPrompt(prompt)) {
                    const { csv } = await renderTableViz({
                        runMetricQuery: runMiniMetricQuery,
                        vizTool: vizToolResult,
                        maxLimit,
                    });

                    const file = Buffer.from(csv, 'utf8');
                    await updateProgress('âœ… Done.');

                    const sentfileArgs = {
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `CSV results generated by Lightdash`,
                        filename: 'lightdash-query-results.csv',
                        file,
                    };

                    await sendFile(sentfileArgs);
                }

                return `Success`;
            } catch (e) {
                return toolErrorHandler(e, `Error generating CSV.`);
            }
        },
    });
};
