import {
    getTotalFilterRules,
    isSlackPrompt,
    toolTimeSeriesArgsSchema,
    toolTimeSeriesArgsSchemaTransformed,
} from '@lightdash/common';
import { tool } from 'ai';
import type {
    CreateOrUpdateArtifactFn,
    GetExploreFn,
    GetPromptFn,
    RunMiniMetricQueryFn,
    SendFileFn,
    UpdateProgressFn,
    UpdatePromptFn,
} from '../types/aiAgentDependencies';
import { renderEcharts } from '../utils/renderEcharts';
import { toolErrorHandler } from '../utils/toolErrorHandler';
import {
    validateFilterRules,
    validateMetricDimensionFilterPlacement,
    validateSelectedFieldsExistence,
} from '../utils/validators';
import { renderTimeSeriesViz } from '../visualizations/vizTimeSeries';

type Dependencies = {
    getExplore: GetExploreFn;
    updateProgress: UpdateProgressFn;
    runMiniMetricQuery: RunMiniMetricQueryFn;
    getPrompt: GetPromptFn;
    updatePrompt: UpdatePromptFn;
    sendFile: SendFileFn;
    createOrUpdateArtifact: CreateOrUpdateArtifactFn;
    maxLimit: number;
};
export const getGenerateTimeSeriesVizConfig = ({
    getExplore,
    updateProgress,
    runMiniMetricQuery,
    getPrompt,
    sendFile,
    updatePrompt,
    createOrUpdateArtifact,
    maxLimit,
}: Dependencies) => {
    const schema = toolTimeSeriesArgsSchema;

    return tool({
        description: toolTimeSeriesArgsSchema.description,
        parameters: schema,
        execute: async (toolArgs) => {
            try {
                await updateProgress('ðŸ“ˆ Generating your line chart...');

                // TODO: common for all viz tools. find a way to reuse this code.
                const vizTool =
                    toolTimeSeriesArgsSchemaTransformed.parse(toolArgs);

                const filterRules = getTotalFilterRules(vizTool.filters);

                const explore = await getExplore({
                    exploreName: vizTool.vizConfig.exploreName,
                });
                const fieldsToValidate = [
                    vizTool.vizConfig.xDimension,
                    vizTool.vizConfig.breakdownByDimension,
                    ...vizTool.vizConfig.yMetrics,
                    ...vizTool.vizConfig.sorts.map(
                        (sortField) => sortField.fieldId,
                    ),
                ].filter((x) => typeof x === 'string');
                validateSelectedFieldsExistence(explore, fieldsToValidate);
                validateFilterRules(explore, filterRules);
                validateMetricDimensionFilterPlacement(
                    explore,
                    vizTool.filters,
                );
                // end of TODO

                const prompt = await getPrompt();

                // Create or update artifact
                await createOrUpdateArtifact({
                    threadUuid: prompt.threadUuid,
                    promptUuid: prompt.promptUuid,
                    artifactType: 'chart',
                    title: toolArgs.title,
                    description: toolArgs.description,
                    vizConfig: toolArgs,
                });

                // TODO :: keeping this for now, until the front-end is under feature-flag
                await updatePrompt({
                    promptUuid: prompt.promptUuid,
                    vizConfigOutput: toolArgs,
                });

                if (isSlackPrompt(prompt)) {
                    const { chartOptions } = await renderTimeSeriesViz({
                        runMetricQuery: (q) => runMiniMetricQuery(q, maxLimit),
                        vizTool,
                        maxLimit,
                    });

                    const file = await renderEcharts(chartOptions);
                    await updateProgress('âœ… Done.');

                    const sentfileArgs = {
                        channelId: prompt.slackChannelId,
                        threadTs: prompt.slackThreadTs,
                        organizationUuid: prompt.organizationUuid,
                        title: 'Generated by Lightdash',
                        comment: `Line chart generated by Lightdash`,
                        filename: 'lightdash-query-results.png',
                        file,
                    };
                    await sendFile(sentfileArgs);
                }

                return `Success`;
            } catch (e) {
                return toolErrorHandler(e, `Error generating line chart.`);
            }
        },
    });
};
