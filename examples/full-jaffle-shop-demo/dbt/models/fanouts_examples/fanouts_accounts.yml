version: 2
models:
  - name: fanouts_accounts
    description: |
      This model demonstrates all three common join patterns that cause metric inflation:
      1. Simple 1-to-many: Accounts ‚Üí Deals OR Accounts -> Users
      2. Chained 1-to-many: Accounts ‚Üí Users ‚Üí Events  
      3. Multiple 1-to-many: Accounts ‚Üí Deals AND Accounts ‚Üí Users

      When these tables are joined, each account record gets multiplied by:
      - Number of deals it has
      - Number of users it has  
      - Number of events each user has

      This creates a "fanout" effect that inflates COUNT metrics but leaves COUNT_DISTINCT safe.
      Note with the way we currently implement joins in Lightdash, tables/models are only added to 
      a join if we select dimesions or metrics from them. 
      This means we can use the same models to demonstrate all the joins. 

    meta:
      required_attributes: 
        is_admin_saas_demo: 'true'
      primary_key: account_id
      sql_filter: ${lightdash.attributes.is_admin_saas_demo} = 'true' or segment !=
        'Enterprise'
      joins:
        # üö® INTENTIONAL METRICS INFLATION DEMO üö®

        # Simple 1-to-many: Accounts ‚Üí Deals (runs parallel to deals join)
        - join: fanouts_deals
          relationship: one-to-many
          sql_on: ${fanouts_accounts.account_id} = ${fanouts_deals.account_id}
          type: left
          fields:
            [
              deal_id,
              unique_deal_count,
              stage,
              amount,
              inflated_total_deal_value,
              inflated_average_deal_value,
              inflated_deal_count,
              max_deal_value,
              min_deal_value,
              median_deal_value, 
              created_date
            ]

        # Multiple 1-to-many: Accounts ‚Üí Users (runs parallel to deals join)
        - join: fanouts_users
          relationship: one-to-many
          sql_on: ${fanouts_accounts.account_id} = ${fanouts_users.account_id}
          type: left
          fields:
            [
              user_id,
              unique_user_count,
              inflated_user_count,
              job_title,
              is_marketing_opted_in,
              unique_job_title_count,
              inflated_job_title_count,
              email,
              created_at,
              first_logged_in_at
            ]

        # Chained 1-to-many: Users ‚Üí Events (builds on the users join above)
        - join: fanouts_tracks
          relationship: one-to-many
          sql_on: ${fanouts_users.user_id} = ${fanouts_tracks.user_id}
          type: left
          fields:
            [
              unique_event_count,
              inflated_event_count,
              event_name,
              timestamp,
              event_id
            ]

        - join: fanouts_addresses
          relationship: one-to-one
          sql_on: ${fanouts_users.user_id} = ${fanouts_addresses.user_id} AND ${fanouts_addresses.valid_to} IS NULL
          type: left
          fields: [ street_address, city, state, postal_code, country_iso_code, valid_from, valid_to, unique_city_count, inflated_city_count ]

        - join: fanouts_countries
          relationship: many-to-one
          sql_on: ${fanouts_addresses.country_iso_code} = ${fanouts_countries.iso_code}
          type: left
          fields: [ country_name, unique_country_count, inflated_country_count ]

        - join: fanouts_sales_targets
          alias: fanouts_industry_sales_targets
          relationship: many-to-one 
          sql_on: |
            ${fanouts_deals.created_date} BETWEEN ${fanouts_industry_sales_targets.quarter_start_date} AND ${fanouts_industry_sales_targets.quarter_end_date} 
            AND  
              (
                (${fanouts_deals.stage} = 'Won' AND ${fanouts_accounts.industry} = ${fanouts_industry_sales_targets.target_value} AND ${fanouts_industry_sales_targets.target_type} = 'industry')
              )
          type: left
          fields:
            [
              target_deals,
              target_amount,
              quarter_start_date,
              total_target_deal_count,
              total_target_deal_amount
            ]
        - join: fanouts_sales_targets
          alias: fanouts_segment_sales_targets
          relationship: many-to-one # Many deals to one target
          sql_on: |
            ${fanouts_deals.created_date} BETWEEN ${fanouts_segment_sales_targets.quarter_start_date} AND ${fanouts_segment_sales_targets.quarter_end_date} 
            AND  
              (
                (${fanouts_deals.stage} = 'Won' AND ${fanouts_accounts.segment} = ${fanouts_segment_sales_targets.target_value} AND ${fanouts_segment_sales_targets.target_type} = 'segment')
              )
          type: left # Since this is a LEFT JOIN, deals that are not 'Won' will appear with NULL sales target data
          fields:
            [
              target_deals,
              target_amount,
              quarter_start_date,
              total_target_deal_count,
              total_target_deal_amount
            ]
    columns:
      - name: account_id
        description: "The Account ID from our database"
        meta:
          dimension:
            type: string
          metrics:
            unique_accounts:
              type: count_distinct
              label: "‚úÖ FANOUT SAFE Unique Account Count"
              description: "‚úÖ CORRECT: Uses count_distinct so won't inflate"

            # üö® INFLATION DEMO METRICS üö®
            inflated_account_count:
              type: count
              label: "üö® INFLATED Account Count"
              description: "‚ùå WRONG: Uses COUNT instead of COUNT_DISTINCT - will inflate based
                on the grain of the data"

      - name: account_name
        description: "Name of this company account"
        meta:
          dimension:
            type: string

      - name: industry
        description: "Stock market industry for this account"
        meta:
          dimension:
            type: string
          metrics:
            unique_industry_count:
              type: count_distinct
              label: "‚úÖ SAFE Unique Industry Count"
              description: "‚úÖ CORRECT: Uses count_distinct so won't inflate regardless of the
                grain of the data"
            inflated_industry_count:
              type: count
              label: "üö® ALWAYS INFLATED Industry Count"
              description: "‚ùå WRONG: Uses COUNT instead of COUNT_DISTINCT - will always return
                inflated count because multiple accounts can fall into the same
                industry."

      - name: segment
        description: "The market Segment for this account (SMB, Midmarket, Enterprise)"
        meta:
          dimension:
            type: string
          metrics:
            unique_segment_count:
              type: count_distinct
              label: "‚úÖ SAFE Unique Segment Count"
              description: "‚úÖ CORRECT: Uses count_distinct so won't inflate regardless of the
                grain of the data."
            inflated_segment_count:
              type: count
              label: "üö® ALWAYS INFLATED Segment Count"
              description: "‚ùå WRONG: Uses COUNT instead of COUNT_DISTINCT - will always return
                inflated count because multiple accounts can fall into the same
                segment."
