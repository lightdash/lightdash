
### Login
// @no-log
POST http://localhost:8080/api/v1/login
Content-Type: application/json

{
    "email": "demo@lightdash.com",
    "password": "demo_password!"
}

###
### Roles API Examples - NEW NAMESPACE STRUCTURE
### Organization UUID: 172a2270-000f-42be-9c68-c4752c23ae51
### Project UUID: 3675b69e-8324-4110-bdca-059031aa8da3
###
### This file demonstrates the NEW NAMESPACE role management API:
### 1. Role Management: /api/v2/orgs/{orgId}/roles
### 2. Organization Role Assignments: /api/v2/orgs/{orgId}/roles/assignments
### 3. Project Role Assignments: /api/v2/projects/{projectId}/roles/assignments
### 4. All role operations now require organization scope
###

@orgId = 172a2270-000f-42be-9c68-c4752c23ae51
@projectId = 3675b69e-8324-4110-bdca-059031aa8da3
@baseUrl = http://localhost:8080
@userId = b264d83a-9000-426a-85ec-3f9c20f368ce
@groupId = 2ffed772-e03c-4097-a7e1-08460fd06fa0

### STEP 0 : create a group for testing 
POST {{baseUrl}}/api/v1/org/groups
Content-Type: application/json

{
  "name": "Group role test"
}

###
### ROLE MANAGEMENT JOURNEY
###

### STEP 1: List existing roles in organization (NEW NAMESPACE)
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles

### STEP 1b: List roles with their scopes (shows what permissions each role has)
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles?load=scopes

### STEP 2: Create a new custom role (NEW NAMESPACE)
# @name createRole
POST {{baseUrl}}/api/v2/orgs/{{orgId}}/roles
Content-Type: application/json

{
  "name": "Data Analyst 5",
  "description": "Can view projects and dashboards with limited access"
}

### STEP 3: Extract role ID from created role response
### Copy the roleId from the response above and set it here:
@roleId = f1e22530-44c0-440f-a4d7-91c01fbdb0a2

### STEP 4: Get specific role details
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}


### STEP 4.1: Get specific role details for system role
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/developer

### STEP 5: Update role details (name/description) - Organization scoped
PATCH {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}
Content-Type: application/json

{
  "name": "Senior Data Analyst",
  "description": "Enhanced permissions for experienced data analysts"
}

###
### ROLE SCOPES (PERMISSIONS) MANAGEMENT
###

### STEP 7: Add scopes to define what the role can do
POST {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}/scopes
Content-Type: application/json

{
  "scopeNames": [
    "view_projects",
    "view_dashboard"
  ]
}

### STEP 7b: Get specific role details again to see new scopes
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}

### STEP 8: Add more scopes to expand role permissions
POST {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}/scopes
Content-Type: application/json

{
  "scopeNames": [
    "create_saved_chart",
    "manage_space"
  ]
}

### STEP 9: Remove a specific scope to restrict permissions
DELETE {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}/scopes/manage_space

###
### ORGANIZATION-LEVEL ROLE ASSIGNMENTS (NEW NAMESPACE)
###

### STEP 10: List current organization role assignments (system roles only)
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/assignments

### NOTE: Organization assignments are READ-ONLY for system roles (admin, member, etc.)
### Custom roles can only be assigned at the project level, not organization level

###
### PROJECT-LEVEL ROLE ASSIGNMENTS (NEW NAMESPACE)
###

### STEP 16: List current project role assignments (NEW NAMESPACE)
GET {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments


### STEP 17: Grant user access to specific project with custom role (UPSERT - Creates or Updates)
# @name assignUserToProject
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/user/{{userId}}
Content-Type: application/json

{
  "roleId": "{{roleId}}"
}




### STEP 18: Assign system role to user (UPSERT - Creates or Updates)
# Example: Assigning "editor" system role to user
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/user/{{userId}}
Content-Type: application/json

{
  "roleId": "editor"
}

### STEP 19: Assign different system role to user (UPSERT - Updates existing assignment)
# Example: Changing from "editor" to "developer" system role
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/user/{{userId}}
Content-Type: application/json

{
  "roleId": "developer"
}

### STEP 20: Assign group to project with custom role (UPSERT - Creates or Updates)
# @name assignGroupToProject
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/group/{{groupId}}
Content-Type: application/json

{
  "roleId": "{{roleId}}"
}

### STEP 21: Assign system role to group (UPSERT - Creates or Updates)
# Example: Assigning "viewer" system role to group
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/group/{{groupId}}
Content-Type: application/json

{
  "roleId": "viewer"
}

### STEP 22: Switch between custom and system roles (demonstrates upsert behavior)
# First assign custom role to user
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/user/{{userId}}
Content-Type: application/json

{
  "roleId": "{{roleId}}"
}

### Then switch to system role (upsert will update the assignment)
POST {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/user/{{userId}}
Content-Type: application/json

{
  "roleId": "admin"
}

### STEP 23: View available system roles and their scopes
GET {{baseUrl}}/api/v2/orgs/{{orgId}}/roles?load=scopes

### Look for system roles in the response:
### - viewer: Basic viewing permissions
### - interactive_viewer: Can interact with dashboards
### - editor: Can create and edit content
### - developer: Advanced permissions
### - admin: Full permissions (except organization management)

###
### CLEANUP SECTION
###

### STEP 24: Remove user's project access
DELETE {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/user/{{userId}}

### STEP 25: Remove group from project
DELETE {{baseUrl}}/api/v2/projects/{{projectId}}/roles/assignments/group/{{groupId}}

### STEP 26: Delete the custom role (final cleanup)
DELETE {{baseUrl}}/api/v2/orgs/{{orgId}}/roles/{{roleId}}
