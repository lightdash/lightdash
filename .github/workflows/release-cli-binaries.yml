name: Release CLI Binaries

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build binaries for'
        required: true
        type: string

jobs:
  build-and-upload-binaries:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: darwin
            targets: node20-macos-x64,node20-macos-arm64
          - os: ubuntu-latest
            platform: linux
            targets: node20-linux-x64
          - os: windows-latest
            platform: win32
            targets: node20-win-x64

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || inputs.tag }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm -F cli -F warehouses -F common build || echo "Build errors ignored - using existing dist"

      - name: Build binaries
        run: |
          cd packages/cli
          pnpm bundle
          pnpm exec pkg bundle/index.js --config pkg.config.json --targets ${{ matrix.targets }} --output bin/lightdash --compress Brotli
        shell: bash

      # macOS specific: Code signing and notarization
      - name: Import signing certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD="$(openssl rand -base64 32)"

          # Import certificate from secrets
          echo -n "$MACOS_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Allow codesign to access the certificate
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Clean up
          rm -f $CERTIFICATE_PATH

      - name: Sign binaries (macOS)
        if: matrix.os == 'macos-latest'
        env:
          DEVELOPER_ID: ${{ secrets.DEVELOPER_ID }}
          BUNDLE_ID: com.lightdash.cli
        run: |
          cd packages/cli

          # Make binaries executable
          chmod +x bin/lightdash-macos-x64
          chmod +x bin/lightdash-macos-arm64

          # Sign both binaries
          codesign -s "$DEVELOPER_ID" -f --timestamp -o runtime \
            -i "$BUNDLE_ID" --entitlements entitlements.plist \
            bin/lightdash-macos-x64

          codesign -s "$DEVELOPER_ID" -f --timestamp -o runtime \
            -i "$BUNDLE_ID" --entitlements entitlements.plist \
            bin/lightdash-macos-arm64

          # Verify signatures
          codesign --verify --verbose bin/lightdash-macos-x64
          codesign --verify --verbose bin/lightdash-macos-arm64

      - name: Notarize binaries (macOS)
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd packages/cli

          # Store notarization credentials
          xcrun notarytool store-credentials "CI_NOTARIZE" \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_PASSWORD"

          # Create temporary directory for zips
          mkdir -p notarize-temp

          # Function to notarize a binary
          notarize_binary() {
            local BINARY_NAME=$1
            local ZIP_PATH="notarize-temp/${BINARY_NAME}.zip"

            echo "Notarizing ${BINARY_NAME}..."

            # Create zip for notarization
            ditto -c -k --keepParent "bin/${BINARY_NAME}" "$ZIP_PATH"

            # Submit for notarization and wait
            xcrun notarytool submit "$ZIP_PATH" \
              --keychain-profile "CI_NOTARIZE" \
              --wait

            # Check status
            if [ $? -eq 0 ]; then
              echo "✓ Notarization successful for ${BINARY_NAME}"
            else
              echo "✗ Notarization failed for ${BINARY_NAME}"
              exit 1
            fi
          }

          # Notarize both binaries
          notarize_binary "lightdash-macos-x64"
          notarize_binary "lightdash-macos-arm64"

          # Clean up
          rm -rf notarize-temp

      - name: Create release archives
        run: |
          cd packages/cli
          VERSION=${{ github.event.release.tag_name || inputs.tag }}

          # Create archives based on platform
          if [[ "${{ matrix.platform }}" == "darwin" ]]; then
            tar -czf "lightdash-cli-${VERSION}-macos-x64.tar.gz" -C bin lightdash-macos-x64
            tar -czf "lightdash-cli-${VERSION}-macos-arm64.tar.gz" -C bin lightdash-macos-arm64
            shasum -a 256 lightdash-cli-*.tar.gz > checksums-macos.txt
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            tar -czf "lightdash-cli-${VERSION}-linux-x64.tar.gz" -C bin lightdash-linux-x64
            shasum -a 256 lightdash-cli-*.tar.gz > checksums-linux.txt
          elif [[ "${{ matrix.platform }}" == "win32" ]]; then
            7z a -tzip "lightdash-cli-${VERSION}-win-x64.zip" ./bin/lightdash-win-x64.exe
            certutil -hashfile "lightdash-cli-${VERSION}-win-x64.zip" SHA256 > checksums-windows.txt
          fi
        shell: bash

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name || inputs.tag }}
          files: |
            packages/cli/lightdash-cli-*.tar.gz
            packages/cli/lightdash-cli-*.zip
            packages/cli/checksums-*.txt
          fail_on_unmatched_files: false

  update-release-notes:
    needs: build-and-upload-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Update release with binary download info
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name || inputs.tag }}
          append_body: true
          body: |

            ## CLI Binary Downloads

            ### macOS
            - **Apple Silicon (M1/M2/M3):** `lightdash-cli-${{ github.event.release.tag_name || inputs.tag }}-macos-arm64.tar.gz`
            - **Intel:** `lightdash-cli-${{ github.event.release.tag_name || inputs.tag }}-macos-x64.tar.gz`

            ### Linux
            - **x64:** `lightdash-cli-${{ github.event.release.tag_name || inputs.tag }}-linux-x64.tar.gz`

            ### Windows
            - **x64:** `lightdash-cli-${{ github.event.release.tag_name || inputs.tag }}-win-x64.zip`

            ### Installation

            #### macOS/Linux
            ```bash
            # Download and extract (replace with your architecture)
            tar -xzf lightdash-cli-${{ github.event.release.tag_name || inputs.tag }}-macos-arm64.tar.gz

            # Make executable (if needed)
            chmod +x lightdash-macos-arm64

            # Run
            ./lightdash-macos-arm64 --help
            ```

            #### Windows
            ```powershell
            # Extract the zip file and run
            .\lightdash-win-x64.exe --help
            ```

            ### Verification

            #### macOS
            The binaries are signed and notarized by Apple. To verify:
            ```bash
            codesign --verify --verbose lightdash-macos-arm64
            ```

            #### All platforms
            Verify download integrity using the checksums files.