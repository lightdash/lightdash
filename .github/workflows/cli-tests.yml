name: CLI tests
on: [deployment_status]

env:
    NODE_ENV: 'development'

jobs:
    files-changed:
        if: github.ref != 'refs/heads/main'
        name: Detect what files changed
        runs-on: ubuntu-latest
        # Map a step output to a job output
        outputs:
            cli: ${{ steps.changes.outputs.cli == 'true' || steps.overrides.outputs.cli == 'true' }}
        steps:
            - uses: actions/checkout@v4
            - name: Check for files changes
              uses: dorny/paths-filter@v3
              id: changes
              with:
                  token: ${{ github.token }}
                  filters: .github/file-filters.yml
            - uses: 8BitJonny/gh-get-current-pr@3.0.0
              id: PR
            - name: Get result with overides
              id: overrides
              run: |
                  echo "PR ${{ steps.PR.outputs.number }}"
                  echo "CLI override: ${{contains(steps.PR.outputs.pr_body, 'test-cli')}}"
                  echo "cli=${{contains(steps.PR.outputs.pr_body, 'test-cli')}}" >> "$GITHUB_OUTPUT"

    prepare-preview:
        # Only trigger for correct environment and status and if CLI files changed
        if: needs.files-changed.outputs.cli == 'true'
        needs: files-changed
        runs-on: ubuntu-latest
        outputs:
            url: ${{ github.event.deployment_status.environment_url }}
        steps:
            - name: is render ready
              if: ${{ !(github.event.deployment_status.state == 'success' && github.event.deployment_status.environment_url != null) }}
              run: |
                  echo "Render environment ${{ github.event.deployment.environment }} is not ready: ${{ github.event.deployment_status.state }} ${{ github.event.deployment_status.environment_url }}"
                  exit 1

    # CLI tests without dbt
    # This is used to test the CLI commands that only use Lightdash API
    # like login, content as code, etc.
    # We don't need to install dbt dependencies for this.
    cli-tests-without-dbt:
        timeout-minutes: 30
        runs-on: ubuntu-latest
        needs: prepare-preview
        name: CLI tests without dbt
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Node, PNPM, and Cypress
              uses: ./.github/workflows/_setup_node_pnpm_cypress

            # Build packages
            - name: Build packages/common module
              run: pnpm common-build
            - name: Build packages/warehouses module
              run: pnpm warehouses-build
            - name: Build and install packages/cli module
              run: cd packages/cli && pnpm build && npm install -g
            - name: Test lightdash version
              run: |
                  lightdash_version=$(lightdash --version)
                  package_version="$(pnpm m ls --depth=-1 | grep '@lightdash/cli@' | sed -E 's/.*@lightdash\/cli@([0-9.]+).*/\1/')"
                  if [ $package_version = $lightdash_version ]; then exit 0 ; else echo "Version mismatch"; exit 1; fi

            # Run Cypress
            - name: Run Cypress
              uses: cypress-io/github-action@v6
              with:
                  install: false
                  working-directory: packages/e2e
                  spec: cypress/cli/api
                  config: 'baseUrl=${{needs.prepare-preview.outputs.url}}'

    # CLI tests with a single dbt version
    # They require simple dbt interaction, for building manifest
    # But in these tests we are more interested about the integration wiht Lightdash
    # For commands like preview, validate, etc.
    cli-tests:
        timeout-minutes: 30
        runs-on: ubuntu-latest
        needs: prepare-preview
        name: CLI tests
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Node, PNPM, and Cypress
              uses: ./.github/workflows/_setup_node_pnpm_cypress

            ## Install pip
            - uses: actions/setup-python@v4
              with:
                  python-version: '3.9.x'
            - run: pip install dbt-core~=1.9.0 dbt-postgres~=1.9.0

            ## DBT seed
            - name: Seed DBT
              run: dbt seed --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR --full-refresh
              env:
                  PROJECT_DIR: './examples/full-jaffle-shop-demo/dbt'
                  PROFILES_DIR: './examples/full-jaffle-shop-demo/profiles'
                  PGHOST: ${{secrets.PGHOST}}
                  PGPASSWORD: ${{secrets.PGPASSWORD}}
                  PGPORT: 5432
                  PGUSER: postgres
                  PGDATABASE: postgres
                  SEED_SCHEMA: jaffle_cli_tests_${{ github.run_id }}

            ## DBT run
            - name: Run DBT
              run: dbt run --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR --full-refresh
              env:
                  PROJECT_DIR: './examples/full-jaffle-shop-demo/dbt'
                  PROFILES_DIR: './examples/full-jaffle-shop-demo/profiles'
                  PGHOST: ${{secrets.PGHOST}}
                  PGPASSWORD: ${{secrets.PGPASSWORD}}
                  PGPORT: 5432
                  PGUSER: postgres
                  PGDATABASE: postgres
                  SEED_SCHEMA: jaffle_cli_tests_${{ github.run_id }}

            # Build packages
            - name: Build packages/common module
              run: pnpm common-build
            - name: Build packages/warehouses module
              run: pnpm warehouses-build
            - name: Build and install packages/cli module
              run: cd packages/cli && pnpm build && npm install -g
            - name: Test lightdash version
              run: |
                  lightdash_version=$(lightdash --version)
                  package_version="$(pnpm m ls --depth=-1 | grep '@lightdash/cli@' | sed -E 's/.*@lightdash\/cli@([0-9.]+).*/\1/')"
                  if [ $package_version = $lightdash_version ]; then exit 0 ; else echo "Version mismatch"; exit 1; fi

            # Run Cypress
            - name: Run Cypress
              uses: cypress-io/github-action@v6
              with:
                  install: false
                  working-directory: packages/e2e
                  spec: cypress/cli/integration/*
                  config: 'baseUrl=${{needs.prepare-preview.outputs.url}}'
              env:
                  CYPRESS_PGHOST: ${{secrets.PGHOST}}
                  CYPRESS_PGPASSWORD: ${{secrets.PGPASSWORD}}
                  CYPRESS_SEED_SCHEMA: jaffle_cli_tests_${{ github.run_id }}

    # CLI tests with multiple dbt versions
    # These tests are testing more complex interaction with dbt
    # like the --select flag, or dbt generate
    cli-dbt-tests:
        timeout-minutes: 30
        runs-on: ubuntu-latest
        needs: prepare-preview
        strategy:
            fail-fast: false
            matrix:
                # Make sure we support the first and 2 latest versions
                dbt: ['1.4', '1.9', '1.10']
        name: dbt ${{ matrix.dbt }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Setup Node, PNPM, and Cypress
              uses: ./.github/workflows/_setup_node_pnpm_cypress

            ## Install pip
            - uses: actions/setup-python@v4
              with:
                  python-version: '3.9.x'
            # dbt-postgres 1.10 is not available yet, so we need to install 1.9
            - run: |
                  if [ "${{ matrix.dbt }}" = "1.10" ]; then
                    pip install dbt-core~=${{ matrix.dbt }}.0 dbt-postgres~=1.9.0 
                  else
                    pip install dbt-core~=${{ matrix.dbt }}.0 dbt-postgres~=${{ matrix.dbt }}.0
                  fi

            ## DBT seed
            - name: Seed DBT
              run: dbt seed --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR --full-refresh
              env:
                  PROJECT_DIR: './examples/full-jaffle-shop-demo/dbt'
                  PROFILES_DIR: './examples/full-jaffle-shop-demo/profiles'
                  PGHOST: ${{secrets.PGHOST}}
                  PGPASSWORD: ${{secrets.PGPASSWORD}}
                  PGPORT: 5432
                  PGUSER: postgres
                  PGDATABASE: postgres
                  SEED_SCHEMA: jaffle_dbt_tests_${{ github.run_id }}_${{ strategy.job-index }}

            ## DBT run
            - name: Run DBT
              run: dbt run --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR --full-refresh
              env:
                  PROJECT_DIR: './examples/full-jaffle-shop-demo/dbt'
                  PROFILES_DIR: './examples/full-jaffle-shop-demo/profiles'
                  PGHOST: ${{secrets.PGHOST}}
                  PGPASSWORD: ${{secrets.PGPASSWORD}}
                  PGPORT: 5432
                  PGUSER: postgres
                  PGDATABASE: postgres
                  SEED_SCHEMA: jaffle_dbt_tests_${{ github.run_id }}_${{ strategy.job-index }}

            # Build packages
            - name: Build packages/common module
              run: pnpm common-build
            - name: Build packages/warehouses module
              run: pnpm warehouses-build
            - name: Build and install packages/cli module
              run: cd packages/cli && pnpm build && npm install -g
            - name: Test lightdash version
              run: |
                  lightdash_version=$(lightdash --version)
                  package_version="$(pnpm m ls --depth=-1 | grep '@lightdash/cli@' | sed -E 's/.*@lightdash\/cli@([0-9.]+).*/\1/')"
                  if [ $package_version = $lightdash_version ]; then exit 0 ; else echo "Version mismatch"; exit 1; fi

            # Run Cypress
            - name: Run Cypress
              uses: cypress-io/github-action@v6
              with:
                  install: false
                  working-directory: packages/e2e
                  spec: cypress/cli/dbt/*
                  config: 'baseUrl=${{needs.prepare-preview.outputs.url}}'
              env:
                  CYPRESS_PGHOST: ${{secrets.PGHOST}}
                  CYPRESS_PGPASSWORD: ${{secrets.PGPASSWORD}}
                  CYPRESS_SEED_SCHEMA: jaffle_dbt_tests_${{ github.run_id }}_${{ strategy.job-index }}

    # Cleanup job to drop all schemas created during tests
    cleanup-schemas:
        if: always()
        runs-on: ubuntu-latest
        needs: [cli-tests-without-dbt, cli-tests, cli-dbt-tests]
        name: Cleanup test schemas
        steps:
            - name: Drop test schemas
              run: |
                  # Drop all schemas matching the pattern for this run
                  PATTERN="^(jaffle_cli_tests_${{ github.run_id }}|jaffle_dbt_tests_${{ github.run_id }}_[0-9]+)$"

                  # Get all schemas matching the pattern
                  SCHEMAS=$(psql -t -c "SELECT schema_name FROM information_schema.schemata WHERE schema_name ~ '$PATTERN';")

                  # Drop each schema
                  for schema in $SCHEMAS; do
                      if [ -n "$schema" ]; then
                          echo "Dropping schema: $schema"
                          psql -c "DROP SCHEMA IF EXISTS \"$schema\" CASCADE;"
                      fi
                  done

                  echo "Schema cleanup completed"
              env:
                  PGHOST: ${{secrets.PGHOST}}
                  PGPASSWORD: ${{secrets.PGPASSWORD}}
                  PGPORT: 5432
                  PGUSER: postgres
                  PGDATABASE: postgres
